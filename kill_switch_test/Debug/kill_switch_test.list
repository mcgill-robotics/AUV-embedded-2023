
kill_switch_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080058b8  080058b8  000158b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc8  08005bc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd0  08005bd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08005be4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08005be4  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e91  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b8  00000000  00000000  00028ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017790  00000000  00000000  0002b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009419  00000000  00000000  00042a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f8b  00000000  00000000  0004be51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1ddc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019a8  00000000  00000000  000d1e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080058a0 	.word	0x080058a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080058a0 	.word	0x080058a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f817 	bl	8001438 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ff67 	bl	80012e8 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f809 	bl	8001438 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ffff 	bl	8001438 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff8f 	bl	800136c <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff85 	bl	800136c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_uldivmod>:
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d10f      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000478:	2900      	cmp	r1, #0
 800047a:	d100      	bne.n	800047e <__aeabi_uldivmod+0xe>
 800047c:	2800      	cmp	r0, #0
 800047e:	d002      	beq.n	8000486 <__aeabi_uldivmod+0x16>
 8000480:	2100      	movs	r1, #0
 8000482:	43c9      	mvns	r1, r1
 8000484:	0008      	movs	r0, r1
 8000486:	b407      	push	{r0, r1, r2}
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <__aeabi_uldivmod+0x24>)
 800048a:	a102      	add	r1, pc, #8	; (adr r1, 8000494 <__aeabi_uldivmod+0x24>)
 800048c:	1840      	adds	r0, r0, r1
 800048e:	9002      	str	r0, [sp, #8]
 8000490:	bd03      	pop	{r0, r1, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	ffffff5d 	.word	0xffffff5d
 8000498:	b403      	push	{r0, r1}
 800049a:	4668      	mov	r0, sp
 800049c:	b501      	push	{r0, lr}
 800049e:	9802      	ldr	r0, [sp, #8]
 80004a0:	f000 f824 	bl	80004ec <__udivmoddi4>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	469e      	mov	lr, r3
 80004a8:	b002      	add	sp, #8
 80004aa:	bc0c      	pop	{r2, r3}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__aeabi_d2uiz>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	2200      	movs	r2, #0
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <__aeabi_d2uiz+0x38>)
 80004b6:	0004      	movs	r4, r0
 80004b8:	000d      	movs	r5, r1
 80004ba:	f7ff ffcf 	bl	800045c <__aeabi_dcmpge>
 80004be:	2800      	cmp	r0, #0
 80004c0:	d104      	bne.n	80004cc <__aeabi_d2uiz+0x1c>
 80004c2:	0020      	movs	r0, r4
 80004c4:	0029      	movs	r1, r5
 80004c6:	f001 fe19 	bl	80020fc <__aeabi_d2iz>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <__aeabi_d2uiz+0x38>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	0020      	movs	r0, r4
 80004d2:	0029      	movs	r1, r5
 80004d4:	f001 fa80 	bl	80019d8 <__aeabi_dsub>
 80004d8:	f001 fe10 	bl	80020fc <__aeabi_d2iz>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	061b      	lsls	r3, r3, #24
 80004e0:	469c      	mov	ip, r3
 80004e2:	4460      	add	r0, ip
 80004e4:	e7f1      	b.n	80004ca <__aeabi_d2uiz+0x1a>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	41e00000 	.word	0x41e00000

080004ec <__udivmoddi4>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	4657      	mov	r7, sl
 80004f0:	464e      	mov	r6, r9
 80004f2:	4645      	mov	r5, r8
 80004f4:	46de      	mov	lr, fp
 80004f6:	b5e0      	push	{r5, r6, r7, lr}
 80004f8:	0004      	movs	r4, r0
 80004fa:	000d      	movs	r5, r1
 80004fc:	4692      	mov	sl, r2
 80004fe:	4699      	mov	r9, r3
 8000500:	b083      	sub	sp, #12
 8000502:	428b      	cmp	r3, r1
 8000504:	d830      	bhi.n	8000568 <__udivmoddi4+0x7c>
 8000506:	d02d      	beq.n	8000564 <__udivmoddi4+0x78>
 8000508:	4649      	mov	r1, r9
 800050a:	4650      	mov	r0, sl
 800050c:	f001 fea0 	bl	8002250 <__clzdi2>
 8000510:	0029      	movs	r1, r5
 8000512:	0006      	movs	r6, r0
 8000514:	0020      	movs	r0, r4
 8000516:	f001 fe9b 	bl	8002250 <__clzdi2>
 800051a:	1a33      	subs	r3, r6, r0
 800051c:	4698      	mov	r8, r3
 800051e:	3b20      	subs	r3, #32
 8000520:	469b      	mov	fp, r3
 8000522:	d433      	bmi.n	800058c <__udivmoddi4+0xa0>
 8000524:	465a      	mov	r2, fp
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	4642      	mov	r2, r8
 800052c:	001f      	movs	r7, r3
 800052e:	4653      	mov	r3, sl
 8000530:	4093      	lsls	r3, r2
 8000532:	001e      	movs	r6, r3
 8000534:	42af      	cmp	r7, r5
 8000536:	d83a      	bhi.n	80005ae <__udivmoddi4+0xc2>
 8000538:	42af      	cmp	r7, r5
 800053a:	d100      	bne.n	800053e <__udivmoddi4+0x52>
 800053c:	e078      	b.n	8000630 <__udivmoddi4+0x144>
 800053e:	465b      	mov	r3, fp
 8000540:	1ba4      	subs	r4, r4, r6
 8000542:	41bd      	sbcs	r5, r7
 8000544:	2b00      	cmp	r3, #0
 8000546:	da00      	bge.n	800054a <__udivmoddi4+0x5e>
 8000548:	e075      	b.n	8000636 <__udivmoddi4+0x14a>
 800054a:	2200      	movs	r2, #0
 800054c:	2300      	movs	r3, #0
 800054e:	9200      	str	r2, [sp, #0]
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	465a      	mov	r2, fp
 8000556:	4093      	lsls	r3, r2
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2301      	movs	r3, #1
 800055c:	4642      	mov	r2, r8
 800055e:	4093      	lsls	r3, r2
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	e028      	b.n	80005b6 <__udivmoddi4+0xca>
 8000564:	4282      	cmp	r2, r0
 8000566:	d9cf      	bls.n	8000508 <__udivmoddi4+0x1c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <__udivmoddi4+0x8e>
 8000576:	601c      	str	r4, [r3, #0]
 8000578:	605d      	str	r5, [r3, #4]
 800057a:	9800      	ldr	r0, [sp, #0]
 800057c:	9901      	ldr	r1, [sp, #4]
 800057e:	b003      	add	sp, #12
 8000580:	bcf0      	pop	{r4, r5, r6, r7}
 8000582:	46bb      	mov	fp, r7
 8000584:	46b2      	mov	sl, r6
 8000586:	46a9      	mov	r9, r5
 8000588:	46a0      	mov	r8, r4
 800058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	4652      	mov	r2, sl
 8000594:	40da      	lsrs	r2, r3
 8000596:	4641      	mov	r1, r8
 8000598:	0013      	movs	r3, r2
 800059a:	464a      	mov	r2, r9
 800059c:	408a      	lsls	r2, r1
 800059e:	0017      	movs	r7, r2
 80005a0:	4642      	mov	r2, r8
 80005a2:	431f      	orrs	r7, r3
 80005a4:	4653      	mov	r3, sl
 80005a6:	4093      	lsls	r3, r2
 80005a8:	001e      	movs	r6, r3
 80005aa:	42af      	cmp	r7, r5
 80005ac:	d9c4      	bls.n	8000538 <__udivmoddi4+0x4c>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4643      	mov	r3, r8
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0d9      	beq.n	8000570 <__udivmoddi4+0x84>
 80005bc:	07fb      	lsls	r3, r7, #31
 80005be:	0872      	lsrs	r2, r6, #1
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4646      	mov	r6, r8
 80005c4:	087b      	lsrs	r3, r7, #1
 80005c6:	e00e      	b.n	80005e6 <__udivmoddi4+0xfa>
 80005c8:	42ab      	cmp	r3, r5
 80005ca:	d101      	bne.n	80005d0 <__udivmoddi4+0xe4>
 80005cc:	42a2      	cmp	r2, r4
 80005ce:	d80c      	bhi.n	80005ea <__udivmoddi4+0xfe>
 80005d0:	1aa4      	subs	r4, r4, r2
 80005d2:	419d      	sbcs	r5, r3
 80005d4:	2001      	movs	r0, #1
 80005d6:	1924      	adds	r4, r4, r4
 80005d8:	416d      	adcs	r5, r5
 80005da:	2100      	movs	r1, #0
 80005dc:	3e01      	subs	r6, #1
 80005de:	1824      	adds	r4, r4, r0
 80005e0:	414d      	adcs	r5, r1
 80005e2:	2e00      	cmp	r6, #0
 80005e4:	d006      	beq.n	80005f4 <__udivmoddi4+0x108>
 80005e6:	42ab      	cmp	r3, r5
 80005e8:	d9ee      	bls.n	80005c8 <__udivmoddi4+0xdc>
 80005ea:	3e01      	subs	r6, #1
 80005ec:	1924      	adds	r4, r4, r4
 80005ee:	416d      	adcs	r5, r5
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d1f8      	bne.n	80005e6 <__udivmoddi4+0xfa>
 80005f4:	9800      	ldr	r0, [sp, #0]
 80005f6:	9901      	ldr	r1, [sp, #4]
 80005f8:	465b      	mov	r3, fp
 80005fa:	1900      	adds	r0, r0, r4
 80005fc:	4169      	adcs	r1, r5
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db24      	blt.n	800064c <__udivmoddi4+0x160>
 8000602:	002b      	movs	r3, r5
 8000604:	465a      	mov	r2, fp
 8000606:	4644      	mov	r4, r8
 8000608:	40d3      	lsrs	r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	40e2      	lsrs	r2, r4
 800060e:	001c      	movs	r4, r3
 8000610:	465b      	mov	r3, fp
 8000612:	0015      	movs	r5, r2
 8000614:	2b00      	cmp	r3, #0
 8000616:	db2a      	blt.n	800066e <__udivmoddi4+0x182>
 8000618:	0026      	movs	r6, r4
 800061a:	409e      	lsls	r6, r3
 800061c:	0033      	movs	r3, r6
 800061e:	0026      	movs	r6, r4
 8000620:	4647      	mov	r7, r8
 8000622:	40be      	lsls	r6, r7
 8000624:	0032      	movs	r2, r6
 8000626:	1a80      	subs	r0, r0, r2
 8000628:	4199      	sbcs	r1, r3
 800062a:	9000      	str	r0, [sp, #0]
 800062c:	9101      	str	r1, [sp, #4]
 800062e:	e79f      	b.n	8000570 <__udivmoddi4+0x84>
 8000630:	42a3      	cmp	r3, r4
 8000632:	d8bc      	bhi.n	80005ae <__udivmoddi4+0xc2>
 8000634:	e783      	b.n	800053e <__udivmoddi4+0x52>
 8000636:	4642      	mov	r2, r8
 8000638:	2320      	movs	r3, #32
 800063a:	2100      	movs	r1, #0
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	2200      	movs	r2, #0
 8000640:	9100      	str	r1, [sp, #0]
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	2201      	movs	r2, #1
 8000646:	40da      	lsrs	r2, r3
 8000648:	9201      	str	r2, [sp, #4]
 800064a:	e786      	b.n	800055a <__udivmoddi4+0x6e>
 800064c:	4642      	mov	r2, r8
 800064e:	2320      	movs	r3, #32
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	002a      	movs	r2, r5
 8000654:	4646      	mov	r6, r8
 8000656:	409a      	lsls	r2, r3
 8000658:	0023      	movs	r3, r4
 800065a:	40f3      	lsrs	r3, r6
 800065c:	4644      	mov	r4, r8
 800065e:	4313      	orrs	r3, r2
 8000660:	002a      	movs	r2, r5
 8000662:	40e2      	lsrs	r2, r4
 8000664:	001c      	movs	r4, r3
 8000666:	465b      	mov	r3, fp
 8000668:	0015      	movs	r5, r2
 800066a:	2b00      	cmp	r3, #0
 800066c:	dad4      	bge.n	8000618 <__udivmoddi4+0x12c>
 800066e:	4642      	mov	r2, r8
 8000670:	002f      	movs	r7, r5
 8000672:	2320      	movs	r3, #32
 8000674:	0026      	movs	r6, r4
 8000676:	4097      	lsls	r7, r2
 8000678:	1a9b      	subs	r3, r3, r2
 800067a:	40de      	lsrs	r6, r3
 800067c:	003b      	movs	r3, r7
 800067e:	4333      	orrs	r3, r6
 8000680:	e7cd      	b.n	800061e <__udivmoddi4+0x132>
 8000682:	46c0      	nop			; (mov r8, r8)

08000684 <__aeabi_dadd>:
 8000684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000686:	464f      	mov	r7, r9
 8000688:	4646      	mov	r6, r8
 800068a:	46d6      	mov	lr, sl
 800068c:	000d      	movs	r5, r1
 800068e:	0004      	movs	r4, r0
 8000690:	b5c0      	push	{r6, r7, lr}
 8000692:	001f      	movs	r7, r3
 8000694:	0011      	movs	r1, r2
 8000696:	0328      	lsls	r0, r5, #12
 8000698:	0f62      	lsrs	r2, r4, #29
 800069a:	0a40      	lsrs	r0, r0, #9
 800069c:	4310      	orrs	r0, r2
 800069e:	007a      	lsls	r2, r7, #1
 80006a0:	0d52      	lsrs	r2, r2, #21
 80006a2:	00e3      	lsls	r3, r4, #3
 80006a4:	033c      	lsls	r4, r7, #12
 80006a6:	4691      	mov	r9, r2
 80006a8:	0a64      	lsrs	r4, r4, #9
 80006aa:	0ffa      	lsrs	r2, r7, #31
 80006ac:	0f4f      	lsrs	r7, r1, #29
 80006ae:	006e      	lsls	r6, r5, #1
 80006b0:	4327      	orrs	r7, r4
 80006b2:	4692      	mov	sl, r2
 80006b4:	46b8      	mov	r8, r7
 80006b6:	0d76      	lsrs	r6, r6, #21
 80006b8:	0fed      	lsrs	r5, r5, #31
 80006ba:	00c9      	lsls	r1, r1, #3
 80006bc:	4295      	cmp	r5, r2
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x3e>
 80006c0:	e099      	b.n	80007f6 <__aeabi_dadd+0x172>
 80006c2:	464c      	mov	r4, r9
 80006c4:	1b34      	subs	r4, r6, r4
 80006c6:	46a4      	mov	ip, r4
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	dc00      	bgt.n	80006ce <__aeabi_dadd+0x4a>
 80006cc:	e07c      	b.n	80007c8 <__aeabi_dadd+0x144>
 80006ce:	464a      	mov	r2, r9
 80006d0:	2a00      	cmp	r2, #0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x52>
 80006d4:	e0b8      	b.n	8000848 <__aeabi_dadd+0x1c4>
 80006d6:	4ac5      	ldr	r2, [pc, #788]	; (80009ec <__aeabi_dadd+0x368>)
 80006d8:	4296      	cmp	r6, r2
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x5a>
 80006dc:	e11c      	b.n	8000918 <__aeabi_dadd+0x294>
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	003c      	movs	r4, r7
 80006e2:	0412      	lsls	r2, r2, #16
 80006e4:	4314      	orrs	r4, r2
 80006e6:	46a0      	mov	r8, r4
 80006e8:	4662      	mov	r2, ip
 80006ea:	2a38      	cmp	r2, #56	; 0x38
 80006ec:	dd00      	ble.n	80006f0 <__aeabi_dadd+0x6c>
 80006ee:	e161      	b.n	80009b4 <__aeabi_dadd+0x330>
 80006f0:	2a1f      	cmp	r2, #31
 80006f2:	dd00      	ble.n	80006f6 <__aeabi_dadd+0x72>
 80006f4:	e1cc      	b.n	8000a90 <__aeabi_dadd+0x40c>
 80006f6:	4664      	mov	r4, ip
 80006f8:	2220      	movs	r2, #32
 80006fa:	1b12      	subs	r2, r2, r4
 80006fc:	4644      	mov	r4, r8
 80006fe:	4094      	lsls	r4, r2
 8000700:	000f      	movs	r7, r1
 8000702:	46a1      	mov	r9, r4
 8000704:	4664      	mov	r4, ip
 8000706:	4091      	lsls	r1, r2
 8000708:	40e7      	lsrs	r7, r4
 800070a:	464c      	mov	r4, r9
 800070c:	1e4a      	subs	r2, r1, #1
 800070e:	4191      	sbcs	r1, r2
 8000710:	433c      	orrs	r4, r7
 8000712:	4642      	mov	r2, r8
 8000714:	4321      	orrs	r1, r4
 8000716:	4664      	mov	r4, ip
 8000718:	40e2      	lsrs	r2, r4
 800071a:	1a80      	subs	r0, r0, r2
 800071c:	1a5c      	subs	r4, r3, r1
 800071e:	42a3      	cmp	r3, r4
 8000720:	419b      	sbcs	r3, r3
 8000722:	425f      	negs	r7, r3
 8000724:	1bc7      	subs	r7, r0, r7
 8000726:	023b      	lsls	r3, r7, #8
 8000728:	d400      	bmi.n	800072c <__aeabi_dadd+0xa8>
 800072a:	e0d0      	b.n	80008ce <__aeabi_dadd+0x24a>
 800072c:	027f      	lsls	r7, r7, #9
 800072e:	0a7f      	lsrs	r7, r7, #9
 8000730:	2f00      	cmp	r7, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0xb2>
 8000734:	e0ff      	b.n	8000936 <__aeabi_dadd+0x2b2>
 8000736:	0038      	movs	r0, r7
 8000738:	f001 fd6c 	bl	8002214 <__clzsi2>
 800073c:	0001      	movs	r1, r0
 800073e:	3908      	subs	r1, #8
 8000740:	2320      	movs	r3, #32
 8000742:	0022      	movs	r2, r4
 8000744:	1a5b      	subs	r3, r3, r1
 8000746:	408f      	lsls	r7, r1
 8000748:	40da      	lsrs	r2, r3
 800074a:	408c      	lsls	r4, r1
 800074c:	4317      	orrs	r7, r2
 800074e:	42b1      	cmp	r1, r6
 8000750:	da00      	bge.n	8000754 <__aeabi_dadd+0xd0>
 8000752:	e0ff      	b.n	8000954 <__aeabi_dadd+0x2d0>
 8000754:	1b89      	subs	r1, r1, r6
 8000756:	1c4b      	adds	r3, r1, #1
 8000758:	2b1f      	cmp	r3, #31
 800075a:	dd00      	ble.n	800075e <__aeabi_dadd+0xda>
 800075c:	e0a8      	b.n	80008b0 <__aeabi_dadd+0x22c>
 800075e:	2220      	movs	r2, #32
 8000760:	0039      	movs	r1, r7
 8000762:	1ad2      	subs	r2, r2, r3
 8000764:	0020      	movs	r0, r4
 8000766:	4094      	lsls	r4, r2
 8000768:	4091      	lsls	r1, r2
 800076a:	40d8      	lsrs	r0, r3
 800076c:	1e62      	subs	r2, r4, #1
 800076e:	4194      	sbcs	r4, r2
 8000770:	40df      	lsrs	r7, r3
 8000772:	2600      	movs	r6, #0
 8000774:	4301      	orrs	r1, r0
 8000776:	430c      	orrs	r4, r1
 8000778:	0763      	lsls	r3, r4, #29
 800077a:	d009      	beq.n	8000790 <__aeabi_dadd+0x10c>
 800077c:	230f      	movs	r3, #15
 800077e:	4023      	ands	r3, r4
 8000780:	2b04      	cmp	r3, #4
 8000782:	d005      	beq.n	8000790 <__aeabi_dadd+0x10c>
 8000784:	1d23      	adds	r3, r4, #4
 8000786:	42a3      	cmp	r3, r4
 8000788:	41a4      	sbcs	r4, r4
 800078a:	4264      	negs	r4, r4
 800078c:	193f      	adds	r7, r7, r4
 800078e:	001c      	movs	r4, r3
 8000790:	023b      	lsls	r3, r7, #8
 8000792:	d400      	bmi.n	8000796 <__aeabi_dadd+0x112>
 8000794:	e09e      	b.n	80008d4 <__aeabi_dadd+0x250>
 8000796:	4b95      	ldr	r3, [pc, #596]	; (80009ec <__aeabi_dadd+0x368>)
 8000798:	3601      	adds	r6, #1
 800079a:	429e      	cmp	r6, r3
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x11c>
 800079e:	e0b7      	b.n	8000910 <__aeabi_dadd+0x28c>
 80007a0:	4a93      	ldr	r2, [pc, #588]	; (80009f0 <__aeabi_dadd+0x36c>)
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	4017      	ands	r7, r2
 80007a6:	077b      	lsls	r3, r7, #29
 80007a8:	0571      	lsls	r1, r6, #21
 80007aa:	027f      	lsls	r7, r7, #9
 80007ac:	4323      	orrs	r3, r4
 80007ae:	0b3f      	lsrs	r7, r7, #12
 80007b0:	0d4a      	lsrs	r2, r1, #21
 80007b2:	0512      	lsls	r2, r2, #20
 80007b4:	433a      	orrs	r2, r7
 80007b6:	07ed      	lsls	r5, r5, #31
 80007b8:	432a      	orrs	r2, r5
 80007ba:	0018      	movs	r0, r3
 80007bc:	0011      	movs	r1, r2
 80007be:	bce0      	pop	{r5, r6, r7}
 80007c0:	46ba      	mov	sl, r7
 80007c2:	46b1      	mov	r9, r6
 80007c4:	46a8      	mov	r8, r5
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d04b      	beq.n	8000864 <__aeabi_dadd+0x1e0>
 80007cc:	464c      	mov	r4, r9
 80007ce:	1ba4      	subs	r4, r4, r6
 80007d0:	46a4      	mov	ip, r4
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x154>
 80007d6:	e123      	b.n	8000a20 <__aeabi_dadd+0x39c>
 80007d8:	0004      	movs	r4, r0
 80007da:	431c      	orrs	r4, r3
 80007dc:	d100      	bne.n	80007e0 <__aeabi_dadd+0x15c>
 80007de:	e1af      	b.n	8000b40 <__aeabi_dadd+0x4bc>
 80007e0:	4662      	mov	r2, ip
 80007e2:	1e54      	subs	r4, r2, #1
 80007e4:	2a01      	cmp	r2, #1
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x166>
 80007e8:	e215      	b.n	8000c16 <__aeabi_dadd+0x592>
 80007ea:	4d80      	ldr	r5, [pc, #512]	; (80009ec <__aeabi_dadd+0x368>)
 80007ec:	45ac      	cmp	ip, r5
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x16e>
 80007f0:	e1c8      	b.n	8000b84 <__aeabi_dadd+0x500>
 80007f2:	46a4      	mov	ip, r4
 80007f4:	e11b      	b.n	8000a2e <__aeabi_dadd+0x3aa>
 80007f6:	464a      	mov	r2, r9
 80007f8:	1ab2      	subs	r2, r6, r2
 80007fa:	4694      	mov	ip, r2
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	dc00      	bgt.n	8000802 <__aeabi_dadd+0x17e>
 8000800:	e0ac      	b.n	800095c <__aeabi_dadd+0x2d8>
 8000802:	464a      	mov	r2, r9
 8000804:	2a00      	cmp	r2, #0
 8000806:	d043      	beq.n	8000890 <__aeabi_dadd+0x20c>
 8000808:	4a78      	ldr	r2, [pc, #480]	; (80009ec <__aeabi_dadd+0x368>)
 800080a:	4296      	cmp	r6, r2
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x18c>
 800080e:	e1af      	b.n	8000b70 <__aeabi_dadd+0x4ec>
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	003c      	movs	r4, r7
 8000814:	0412      	lsls	r2, r2, #16
 8000816:	4314      	orrs	r4, r2
 8000818:	46a0      	mov	r8, r4
 800081a:	4662      	mov	r2, ip
 800081c:	2a38      	cmp	r2, #56	; 0x38
 800081e:	dc67      	bgt.n	80008f0 <__aeabi_dadd+0x26c>
 8000820:	2a1f      	cmp	r2, #31
 8000822:	dc00      	bgt.n	8000826 <__aeabi_dadd+0x1a2>
 8000824:	e15f      	b.n	8000ae6 <__aeabi_dadd+0x462>
 8000826:	4647      	mov	r7, r8
 8000828:	3a20      	subs	r2, #32
 800082a:	40d7      	lsrs	r7, r2
 800082c:	4662      	mov	r2, ip
 800082e:	2a20      	cmp	r2, #32
 8000830:	d005      	beq.n	800083e <__aeabi_dadd+0x1ba>
 8000832:	4664      	mov	r4, ip
 8000834:	2240      	movs	r2, #64	; 0x40
 8000836:	1b12      	subs	r2, r2, r4
 8000838:	4644      	mov	r4, r8
 800083a:	4094      	lsls	r4, r2
 800083c:	4321      	orrs	r1, r4
 800083e:	1e4a      	subs	r2, r1, #1
 8000840:	4191      	sbcs	r1, r2
 8000842:	000c      	movs	r4, r1
 8000844:	433c      	orrs	r4, r7
 8000846:	e057      	b.n	80008f8 <__aeabi_dadd+0x274>
 8000848:	003a      	movs	r2, r7
 800084a:	430a      	orrs	r2, r1
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0x1cc>
 800084e:	e105      	b.n	8000a5c <__aeabi_dadd+0x3d8>
 8000850:	0022      	movs	r2, r4
 8000852:	3a01      	subs	r2, #1
 8000854:	2c01      	cmp	r4, #1
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x1d6>
 8000858:	e182      	b.n	8000b60 <__aeabi_dadd+0x4dc>
 800085a:	4c64      	ldr	r4, [pc, #400]	; (80009ec <__aeabi_dadd+0x368>)
 800085c:	45a4      	cmp	ip, r4
 800085e:	d05b      	beq.n	8000918 <__aeabi_dadd+0x294>
 8000860:	4694      	mov	ip, r2
 8000862:	e741      	b.n	80006e8 <__aeabi_dadd+0x64>
 8000864:	4c63      	ldr	r4, [pc, #396]	; (80009f4 <__aeabi_dadd+0x370>)
 8000866:	1c77      	adds	r7, r6, #1
 8000868:	4227      	tst	r7, r4
 800086a:	d000      	beq.n	800086e <__aeabi_dadd+0x1ea>
 800086c:	e0c4      	b.n	80009f8 <__aeabi_dadd+0x374>
 800086e:	0004      	movs	r4, r0
 8000870:	431c      	orrs	r4, r3
 8000872:	2e00      	cmp	r6, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_dadd+0x1f4>
 8000876:	e169      	b.n	8000b4c <__aeabi_dadd+0x4c8>
 8000878:	2c00      	cmp	r4, #0
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x1fa>
 800087c:	e1bf      	b.n	8000bfe <__aeabi_dadd+0x57a>
 800087e:	4644      	mov	r4, r8
 8000880:	430c      	orrs	r4, r1
 8000882:	d000      	beq.n	8000886 <__aeabi_dadd+0x202>
 8000884:	e1d0      	b.n	8000c28 <__aeabi_dadd+0x5a4>
 8000886:	0742      	lsls	r2, r0, #29
 8000888:	08db      	lsrs	r3, r3, #3
 800088a:	4313      	orrs	r3, r2
 800088c:	08c0      	lsrs	r0, r0, #3
 800088e:	e029      	b.n	80008e4 <__aeabi_dadd+0x260>
 8000890:	003a      	movs	r2, r7
 8000892:	430a      	orrs	r2, r1
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x214>
 8000896:	e170      	b.n	8000b7a <__aeabi_dadd+0x4f6>
 8000898:	4662      	mov	r2, ip
 800089a:	4664      	mov	r4, ip
 800089c:	3a01      	subs	r2, #1
 800089e:	2c01      	cmp	r4, #1
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x220>
 80008a2:	e0e0      	b.n	8000a66 <__aeabi_dadd+0x3e2>
 80008a4:	4c51      	ldr	r4, [pc, #324]	; (80009ec <__aeabi_dadd+0x368>)
 80008a6:	45a4      	cmp	ip, r4
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x228>
 80008aa:	e161      	b.n	8000b70 <__aeabi_dadd+0x4ec>
 80008ac:	4694      	mov	ip, r2
 80008ae:	e7b4      	b.n	800081a <__aeabi_dadd+0x196>
 80008b0:	003a      	movs	r2, r7
 80008b2:	391f      	subs	r1, #31
 80008b4:	40ca      	lsrs	r2, r1
 80008b6:	0011      	movs	r1, r2
 80008b8:	2b20      	cmp	r3, #32
 80008ba:	d003      	beq.n	80008c4 <__aeabi_dadd+0x240>
 80008bc:	2240      	movs	r2, #64	; 0x40
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	409f      	lsls	r7, r3
 80008c2:	433c      	orrs	r4, r7
 80008c4:	1e63      	subs	r3, r4, #1
 80008c6:	419c      	sbcs	r4, r3
 80008c8:	2700      	movs	r7, #0
 80008ca:	2600      	movs	r6, #0
 80008cc:	430c      	orrs	r4, r1
 80008ce:	0763      	lsls	r3, r4, #29
 80008d0:	d000      	beq.n	80008d4 <__aeabi_dadd+0x250>
 80008d2:	e753      	b.n	800077c <__aeabi_dadd+0xf8>
 80008d4:	46b4      	mov	ip, r6
 80008d6:	08e4      	lsrs	r4, r4, #3
 80008d8:	077b      	lsls	r3, r7, #29
 80008da:	4323      	orrs	r3, r4
 80008dc:	08f8      	lsrs	r0, r7, #3
 80008de:	4a43      	ldr	r2, [pc, #268]	; (80009ec <__aeabi_dadd+0x368>)
 80008e0:	4594      	cmp	ip, r2
 80008e2:	d01d      	beq.n	8000920 <__aeabi_dadd+0x29c>
 80008e4:	4662      	mov	r2, ip
 80008e6:	0307      	lsls	r7, r0, #12
 80008e8:	0552      	lsls	r2, r2, #21
 80008ea:	0b3f      	lsrs	r7, r7, #12
 80008ec:	0d52      	lsrs	r2, r2, #21
 80008ee:	e760      	b.n	80007b2 <__aeabi_dadd+0x12e>
 80008f0:	4644      	mov	r4, r8
 80008f2:	430c      	orrs	r4, r1
 80008f4:	1e62      	subs	r2, r4, #1
 80008f6:	4194      	sbcs	r4, r2
 80008f8:	18e4      	adds	r4, r4, r3
 80008fa:	429c      	cmp	r4, r3
 80008fc:	419b      	sbcs	r3, r3
 80008fe:	425f      	negs	r7, r3
 8000900:	183f      	adds	r7, r7, r0
 8000902:	023b      	lsls	r3, r7, #8
 8000904:	d5e3      	bpl.n	80008ce <__aeabi_dadd+0x24a>
 8000906:	4b39      	ldr	r3, [pc, #228]	; (80009ec <__aeabi_dadd+0x368>)
 8000908:	3601      	adds	r6, #1
 800090a:	429e      	cmp	r6, r3
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x28c>
 800090e:	e0b5      	b.n	8000a7c <__aeabi_dadd+0x3f8>
 8000910:	0032      	movs	r2, r6
 8000912:	2700      	movs	r7, #0
 8000914:	2300      	movs	r3, #0
 8000916:	e74c      	b.n	80007b2 <__aeabi_dadd+0x12e>
 8000918:	0742      	lsls	r2, r0, #29
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	4313      	orrs	r3, r2
 800091e:	08c0      	lsrs	r0, r0, #3
 8000920:	001a      	movs	r2, r3
 8000922:	4302      	orrs	r2, r0
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x2a4>
 8000926:	e1e1      	b.n	8000cec <__aeabi_dadd+0x668>
 8000928:	2780      	movs	r7, #128	; 0x80
 800092a:	033f      	lsls	r7, r7, #12
 800092c:	4307      	orrs	r7, r0
 800092e:	033f      	lsls	r7, r7, #12
 8000930:	4a2e      	ldr	r2, [pc, #184]	; (80009ec <__aeabi_dadd+0x368>)
 8000932:	0b3f      	lsrs	r7, r7, #12
 8000934:	e73d      	b.n	80007b2 <__aeabi_dadd+0x12e>
 8000936:	0020      	movs	r0, r4
 8000938:	f001 fc6c 	bl	8002214 <__clzsi2>
 800093c:	0001      	movs	r1, r0
 800093e:	3118      	adds	r1, #24
 8000940:	291f      	cmp	r1, #31
 8000942:	dc00      	bgt.n	8000946 <__aeabi_dadd+0x2c2>
 8000944:	e6fc      	b.n	8000740 <__aeabi_dadd+0xbc>
 8000946:	3808      	subs	r0, #8
 8000948:	4084      	lsls	r4, r0
 800094a:	0027      	movs	r7, r4
 800094c:	2400      	movs	r4, #0
 800094e:	42b1      	cmp	r1, r6
 8000950:	db00      	blt.n	8000954 <__aeabi_dadd+0x2d0>
 8000952:	e6ff      	b.n	8000754 <__aeabi_dadd+0xd0>
 8000954:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <__aeabi_dadd+0x36c>)
 8000956:	1a76      	subs	r6, r6, r1
 8000958:	4017      	ands	r7, r2
 800095a:	e70d      	b.n	8000778 <__aeabi_dadd+0xf4>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d02f      	beq.n	80009c0 <__aeabi_dadd+0x33c>
 8000960:	464a      	mov	r2, r9
 8000962:	1b92      	subs	r2, r2, r6
 8000964:	4694      	mov	ip, r2
 8000966:	2e00      	cmp	r6, #0
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x2e8>
 800096a:	e0ad      	b.n	8000ac8 <__aeabi_dadd+0x444>
 800096c:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <__aeabi_dadd+0x368>)
 800096e:	4591      	cmp	r9, r2
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x2f0>
 8000972:	e10f      	b.n	8000b94 <__aeabi_dadd+0x510>
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	0412      	lsls	r2, r2, #16
 8000978:	4310      	orrs	r0, r2
 800097a:	4662      	mov	r2, ip
 800097c:	2a38      	cmp	r2, #56	; 0x38
 800097e:	dd00      	ble.n	8000982 <__aeabi_dadd+0x2fe>
 8000980:	e10f      	b.n	8000ba2 <__aeabi_dadd+0x51e>
 8000982:	2a1f      	cmp	r2, #31
 8000984:	dd00      	ble.n	8000988 <__aeabi_dadd+0x304>
 8000986:	e180      	b.n	8000c8a <__aeabi_dadd+0x606>
 8000988:	4664      	mov	r4, ip
 800098a:	2220      	movs	r2, #32
 800098c:	001e      	movs	r6, r3
 800098e:	1b12      	subs	r2, r2, r4
 8000990:	4667      	mov	r7, ip
 8000992:	0004      	movs	r4, r0
 8000994:	4093      	lsls	r3, r2
 8000996:	4094      	lsls	r4, r2
 8000998:	40fe      	lsrs	r6, r7
 800099a:	1e5a      	subs	r2, r3, #1
 800099c:	4193      	sbcs	r3, r2
 800099e:	40f8      	lsrs	r0, r7
 80009a0:	4334      	orrs	r4, r6
 80009a2:	431c      	orrs	r4, r3
 80009a4:	4480      	add	r8, r0
 80009a6:	1864      	adds	r4, r4, r1
 80009a8:	428c      	cmp	r4, r1
 80009aa:	41bf      	sbcs	r7, r7
 80009ac:	427f      	negs	r7, r7
 80009ae:	464e      	mov	r6, r9
 80009b0:	4447      	add	r7, r8
 80009b2:	e7a6      	b.n	8000902 <__aeabi_dadd+0x27e>
 80009b4:	4642      	mov	r2, r8
 80009b6:	430a      	orrs	r2, r1
 80009b8:	0011      	movs	r1, r2
 80009ba:	1e4a      	subs	r2, r1, #1
 80009bc:	4191      	sbcs	r1, r2
 80009be:	e6ad      	b.n	800071c <__aeabi_dadd+0x98>
 80009c0:	4c0c      	ldr	r4, [pc, #48]	; (80009f4 <__aeabi_dadd+0x370>)
 80009c2:	1c72      	adds	r2, r6, #1
 80009c4:	4222      	tst	r2, r4
 80009c6:	d000      	beq.n	80009ca <__aeabi_dadd+0x346>
 80009c8:	e0a1      	b.n	8000b0e <__aeabi_dadd+0x48a>
 80009ca:	0002      	movs	r2, r0
 80009cc:	431a      	orrs	r2, r3
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d000      	beq.n	80009d4 <__aeabi_dadd+0x350>
 80009d2:	e0fa      	b.n	8000bca <__aeabi_dadd+0x546>
 80009d4:	2a00      	cmp	r2, #0
 80009d6:	d100      	bne.n	80009da <__aeabi_dadd+0x356>
 80009d8:	e145      	b.n	8000c66 <__aeabi_dadd+0x5e2>
 80009da:	003a      	movs	r2, r7
 80009dc:	430a      	orrs	r2, r1
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x35e>
 80009e0:	e146      	b.n	8000c70 <__aeabi_dadd+0x5ec>
 80009e2:	0742      	lsls	r2, r0, #29
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	08c0      	lsrs	r0, r0, #3
 80009ea:	e77b      	b.n	80008e4 <__aeabi_dadd+0x260>
 80009ec:	000007ff 	.word	0x000007ff
 80009f0:	ff7fffff 	.word	0xff7fffff
 80009f4:	000007fe 	.word	0x000007fe
 80009f8:	4647      	mov	r7, r8
 80009fa:	1a5c      	subs	r4, r3, r1
 80009fc:	1bc2      	subs	r2, r0, r7
 80009fe:	42a3      	cmp	r3, r4
 8000a00:	41bf      	sbcs	r7, r7
 8000a02:	427f      	negs	r7, r7
 8000a04:	46b9      	mov	r9, r7
 8000a06:	0017      	movs	r7, r2
 8000a08:	464a      	mov	r2, r9
 8000a0a:	1abf      	subs	r7, r7, r2
 8000a0c:	023a      	lsls	r2, r7, #8
 8000a0e:	d500      	bpl.n	8000a12 <__aeabi_dadd+0x38e>
 8000a10:	e08d      	b.n	8000b2e <__aeabi_dadd+0x4aa>
 8000a12:	0023      	movs	r3, r4
 8000a14:	433b      	orrs	r3, r7
 8000a16:	d000      	beq.n	8000a1a <__aeabi_dadd+0x396>
 8000a18:	e68a      	b.n	8000730 <__aeabi_dadd+0xac>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	2500      	movs	r5, #0
 8000a1e:	e761      	b.n	80008e4 <__aeabi_dadd+0x260>
 8000a20:	4cb4      	ldr	r4, [pc, #720]	; (8000cf4 <__aeabi_dadd+0x670>)
 8000a22:	45a1      	cmp	r9, r4
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dadd+0x3a4>
 8000a26:	e0ad      	b.n	8000b84 <__aeabi_dadd+0x500>
 8000a28:	2480      	movs	r4, #128	; 0x80
 8000a2a:	0424      	lsls	r4, r4, #16
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	4664      	mov	r4, ip
 8000a30:	2c38      	cmp	r4, #56	; 0x38
 8000a32:	dc3d      	bgt.n	8000ab0 <__aeabi_dadd+0x42c>
 8000a34:	4662      	mov	r2, ip
 8000a36:	2c1f      	cmp	r4, #31
 8000a38:	dd00      	ble.n	8000a3c <__aeabi_dadd+0x3b8>
 8000a3a:	e0b7      	b.n	8000bac <__aeabi_dadd+0x528>
 8000a3c:	2520      	movs	r5, #32
 8000a3e:	001e      	movs	r6, r3
 8000a40:	1b2d      	subs	r5, r5, r4
 8000a42:	0004      	movs	r4, r0
 8000a44:	40ab      	lsls	r3, r5
 8000a46:	40ac      	lsls	r4, r5
 8000a48:	40d6      	lsrs	r6, r2
 8000a4a:	40d0      	lsrs	r0, r2
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	1e5d      	subs	r5, r3, #1
 8000a50:	41ab      	sbcs	r3, r5
 8000a52:	4334      	orrs	r4, r6
 8000a54:	1a12      	subs	r2, r2, r0
 8000a56:	4690      	mov	r8, r2
 8000a58:	4323      	orrs	r3, r4
 8000a5a:	e02c      	b.n	8000ab6 <__aeabi_dadd+0x432>
 8000a5c:	0742      	lsls	r2, r0, #29
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	4313      	orrs	r3, r2
 8000a62:	08c0      	lsrs	r0, r0, #3
 8000a64:	e73b      	b.n	80008de <__aeabi_dadd+0x25a>
 8000a66:	185c      	adds	r4, r3, r1
 8000a68:	429c      	cmp	r4, r3
 8000a6a:	419b      	sbcs	r3, r3
 8000a6c:	4440      	add	r0, r8
 8000a6e:	425b      	negs	r3, r3
 8000a70:	18c7      	adds	r7, r0, r3
 8000a72:	2601      	movs	r6, #1
 8000a74:	023b      	lsls	r3, r7, #8
 8000a76:	d400      	bmi.n	8000a7a <__aeabi_dadd+0x3f6>
 8000a78:	e729      	b.n	80008ce <__aeabi_dadd+0x24a>
 8000a7a:	2602      	movs	r6, #2
 8000a7c:	4a9e      	ldr	r2, [pc, #632]	; (8000cf8 <__aeabi_dadd+0x674>)
 8000a7e:	0863      	lsrs	r3, r4, #1
 8000a80:	4017      	ands	r7, r2
 8000a82:	2201      	movs	r2, #1
 8000a84:	4014      	ands	r4, r2
 8000a86:	431c      	orrs	r4, r3
 8000a88:	07fb      	lsls	r3, r7, #31
 8000a8a:	431c      	orrs	r4, r3
 8000a8c:	087f      	lsrs	r7, r7, #1
 8000a8e:	e673      	b.n	8000778 <__aeabi_dadd+0xf4>
 8000a90:	4644      	mov	r4, r8
 8000a92:	3a20      	subs	r2, #32
 8000a94:	40d4      	lsrs	r4, r2
 8000a96:	4662      	mov	r2, ip
 8000a98:	2a20      	cmp	r2, #32
 8000a9a:	d005      	beq.n	8000aa8 <__aeabi_dadd+0x424>
 8000a9c:	4667      	mov	r7, ip
 8000a9e:	2240      	movs	r2, #64	; 0x40
 8000aa0:	1bd2      	subs	r2, r2, r7
 8000aa2:	4647      	mov	r7, r8
 8000aa4:	4097      	lsls	r7, r2
 8000aa6:	4339      	orrs	r1, r7
 8000aa8:	1e4a      	subs	r2, r1, #1
 8000aaa:	4191      	sbcs	r1, r2
 8000aac:	4321      	orrs	r1, r4
 8000aae:	e635      	b.n	800071c <__aeabi_dadd+0x98>
 8000ab0:	4303      	orrs	r3, r0
 8000ab2:	1e58      	subs	r0, r3, #1
 8000ab4:	4183      	sbcs	r3, r0
 8000ab6:	1acc      	subs	r4, r1, r3
 8000ab8:	42a1      	cmp	r1, r4
 8000aba:	41bf      	sbcs	r7, r7
 8000abc:	4643      	mov	r3, r8
 8000abe:	427f      	negs	r7, r7
 8000ac0:	4655      	mov	r5, sl
 8000ac2:	464e      	mov	r6, r9
 8000ac4:	1bdf      	subs	r7, r3, r7
 8000ac6:	e62e      	b.n	8000726 <__aeabi_dadd+0xa2>
 8000ac8:	0002      	movs	r2, r0
 8000aca:	431a      	orrs	r2, r3
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dadd+0x44c>
 8000ace:	e0bd      	b.n	8000c4c <__aeabi_dadd+0x5c8>
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	4664      	mov	r4, ip
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	2c01      	cmp	r4, #1
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x458>
 8000ada:	e0e5      	b.n	8000ca8 <__aeabi_dadd+0x624>
 8000adc:	4c85      	ldr	r4, [pc, #532]	; (8000cf4 <__aeabi_dadd+0x670>)
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	d058      	beq.n	8000b94 <__aeabi_dadd+0x510>
 8000ae2:	4694      	mov	ip, r2
 8000ae4:	e749      	b.n	800097a <__aeabi_dadd+0x2f6>
 8000ae6:	4664      	mov	r4, ip
 8000ae8:	2220      	movs	r2, #32
 8000aea:	1b12      	subs	r2, r2, r4
 8000aec:	4644      	mov	r4, r8
 8000aee:	4094      	lsls	r4, r2
 8000af0:	000f      	movs	r7, r1
 8000af2:	46a1      	mov	r9, r4
 8000af4:	4664      	mov	r4, ip
 8000af6:	4091      	lsls	r1, r2
 8000af8:	40e7      	lsrs	r7, r4
 8000afa:	464c      	mov	r4, r9
 8000afc:	1e4a      	subs	r2, r1, #1
 8000afe:	4191      	sbcs	r1, r2
 8000b00:	433c      	orrs	r4, r7
 8000b02:	4642      	mov	r2, r8
 8000b04:	430c      	orrs	r4, r1
 8000b06:	4661      	mov	r1, ip
 8000b08:	40ca      	lsrs	r2, r1
 8000b0a:	1880      	adds	r0, r0, r2
 8000b0c:	e6f4      	b.n	80008f8 <__aeabi_dadd+0x274>
 8000b0e:	4c79      	ldr	r4, [pc, #484]	; (8000cf4 <__aeabi_dadd+0x670>)
 8000b10:	42a2      	cmp	r2, r4
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x492>
 8000b14:	e6fd      	b.n	8000912 <__aeabi_dadd+0x28e>
 8000b16:	1859      	adds	r1, r3, r1
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	419b      	sbcs	r3, r3
 8000b1c:	4440      	add	r0, r8
 8000b1e:	425f      	negs	r7, r3
 8000b20:	19c7      	adds	r7, r0, r7
 8000b22:	07fc      	lsls	r4, r7, #31
 8000b24:	0849      	lsrs	r1, r1, #1
 8000b26:	0016      	movs	r6, r2
 8000b28:	430c      	orrs	r4, r1
 8000b2a:	087f      	lsrs	r7, r7, #1
 8000b2c:	e6cf      	b.n	80008ce <__aeabi_dadd+0x24a>
 8000b2e:	1acc      	subs	r4, r1, r3
 8000b30:	42a1      	cmp	r1, r4
 8000b32:	41bf      	sbcs	r7, r7
 8000b34:	4643      	mov	r3, r8
 8000b36:	427f      	negs	r7, r7
 8000b38:	1a18      	subs	r0, r3, r0
 8000b3a:	4655      	mov	r5, sl
 8000b3c:	1bc7      	subs	r7, r0, r7
 8000b3e:	e5f7      	b.n	8000730 <__aeabi_dadd+0xac>
 8000b40:	08c9      	lsrs	r1, r1, #3
 8000b42:	077b      	lsls	r3, r7, #29
 8000b44:	4655      	mov	r5, sl
 8000b46:	430b      	orrs	r3, r1
 8000b48:	08f8      	lsrs	r0, r7, #3
 8000b4a:	e6c8      	b.n	80008de <__aeabi_dadd+0x25a>
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_dadd+0x4ce>
 8000b50:	e081      	b.n	8000c56 <__aeabi_dadd+0x5d2>
 8000b52:	4643      	mov	r3, r8
 8000b54:	430b      	orrs	r3, r1
 8000b56:	d115      	bne.n	8000b84 <__aeabi_dadd+0x500>
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	2500      	movs	r5, #0
 8000b5c:	0300      	lsls	r0, r0, #12
 8000b5e:	e6e3      	b.n	8000928 <__aeabi_dadd+0x2a4>
 8000b60:	1a5c      	subs	r4, r3, r1
 8000b62:	42a3      	cmp	r3, r4
 8000b64:	419b      	sbcs	r3, r3
 8000b66:	1bc7      	subs	r7, r0, r7
 8000b68:	425b      	negs	r3, r3
 8000b6a:	2601      	movs	r6, #1
 8000b6c:	1aff      	subs	r7, r7, r3
 8000b6e:	e5da      	b.n	8000726 <__aeabi_dadd+0xa2>
 8000b70:	0742      	lsls	r2, r0, #29
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	08c0      	lsrs	r0, r0, #3
 8000b78:	e6d2      	b.n	8000920 <__aeabi_dadd+0x29c>
 8000b7a:	0742      	lsls	r2, r0, #29
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	08c0      	lsrs	r0, r0, #3
 8000b82:	e6ac      	b.n	80008de <__aeabi_dadd+0x25a>
 8000b84:	4643      	mov	r3, r8
 8000b86:	4642      	mov	r2, r8
 8000b88:	08c9      	lsrs	r1, r1, #3
 8000b8a:	075b      	lsls	r3, r3, #29
 8000b8c:	4655      	mov	r5, sl
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	08d0      	lsrs	r0, r2, #3
 8000b92:	e6c5      	b.n	8000920 <__aeabi_dadd+0x29c>
 8000b94:	4643      	mov	r3, r8
 8000b96:	4642      	mov	r2, r8
 8000b98:	075b      	lsls	r3, r3, #29
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	08d0      	lsrs	r0, r2, #3
 8000ba0:	e6be      	b.n	8000920 <__aeabi_dadd+0x29c>
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	1e63      	subs	r3, r4, #1
 8000ba8:	419c      	sbcs	r4, r3
 8000baa:	e6fc      	b.n	80009a6 <__aeabi_dadd+0x322>
 8000bac:	0002      	movs	r2, r0
 8000bae:	3c20      	subs	r4, #32
 8000bb0:	40e2      	lsrs	r2, r4
 8000bb2:	0014      	movs	r4, r2
 8000bb4:	4662      	mov	r2, ip
 8000bb6:	2a20      	cmp	r2, #32
 8000bb8:	d003      	beq.n	8000bc2 <__aeabi_dadd+0x53e>
 8000bba:	2540      	movs	r5, #64	; 0x40
 8000bbc:	1aad      	subs	r5, r5, r2
 8000bbe:	40a8      	lsls	r0, r5
 8000bc0:	4303      	orrs	r3, r0
 8000bc2:	1e58      	subs	r0, r3, #1
 8000bc4:	4183      	sbcs	r3, r0
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	e775      	b.n	8000ab6 <__aeabi_dadd+0x432>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d0e2      	beq.n	8000b94 <__aeabi_dadd+0x510>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	d0cd      	beq.n	8000b70 <__aeabi_dadd+0x4ec>
 8000bd4:	0742      	lsls	r2, r0, #29
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	08c0      	lsrs	r0, r0, #3
 8000bde:	0312      	lsls	r2, r2, #12
 8000be0:	4210      	tst	r0, r2
 8000be2:	d006      	beq.n	8000bf2 <__aeabi_dadd+0x56e>
 8000be4:	08fc      	lsrs	r4, r7, #3
 8000be6:	4214      	tst	r4, r2
 8000be8:	d103      	bne.n	8000bf2 <__aeabi_dadd+0x56e>
 8000bea:	0020      	movs	r0, r4
 8000bec:	08cb      	lsrs	r3, r1, #3
 8000bee:	077a      	lsls	r2, r7, #29
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	0f5a      	lsrs	r2, r3, #29
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	0752      	lsls	r2, r2, #29
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	e690      	b.n	8000920 <__aeabi_dadd+0x29c>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	430b      	orrs	r3, r1
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x582>
 8000c04:	e709      	b.n	8000a1a <__aeabi_dadd+0x396>
 8000c06:	4643      	mov	r3, r8
 8000c08:	4642      	mov	r2, r8
 8000c0a:	08c9      	lsrs	r1, r1, #3
 8000c0c:	075b      	lsls	r3, r3, #29
 8000c0e:	4655      	mov	r5, sl
 8000c10:	430b      	orrs	r3, r1
 8000c12:	08d0      	lsrs	r0, r2, #3
 8000c14:	e666      	b.n	80008e4 <__aeabi_dadd+0x260>
 8000c16:	1acc      	subs	r4, r1, r3
 8000c18:	42a1      	cmp	r1, r4
 8000c1a:	4189      	sbcs	r1, r1
 8000c1c:	1a3f      	subs	r7, r7, r0
 8000c1e:	4249      	negs	r1, r1
 8000c20:	4655      	mov	r5, sl
 8000c22:	2601      	movs	r6, #1
 8000c24:	1a7f      	subs	r7, r7, r1
 8000c26:	e57e      	b.n	8000726 <__aeabi_dadd+0xa2>
 8000c28:	4642      	mov	r2, r8
 8000c2a:	1a5c      	subs	r4, r3, r1
 8000c2c:	1a87      	subs	r7, r0, r2
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	4192      	sbcs	r2, r2
 8000c32:	4252      	negs	r2, r2
 8000c34:	1abf      	subs	r7, r7, r2
 8000c36:	023a      	lsls	r2, r7, #8
 8000c38:	d53d      	bpl.n	8000cb6 <__aeabi_dadd+0x632>
 8000c3a:	1acc      	subs	r4, r1, r3
 8000c3c:	42a1      	cmp	r1, r4
 8000c3e:	4189      	sbcs	r1, r1
 8000c40:	4643      	mov	r3, r8
 8000c42:	4249      	negs	r1, r1
 8000c44:	1a1f      	subs	r7, r3, r0
 8000c46:	4655      	mov	r5, sl
 8000c48:	1a7f      	subs	r7, r7, r1
 8000c4a:	e595      	b.n	8000778 <__aeabi_dadd+0xf4>
 8000c4c:	077b      	lsls	r3, r7, #29
 8000c4e:	08c9      	lsrs	r1, r1, #3
 8000c50:	430b      	orrs	r3, r1
 8000c52:	08f8      	lsrs	r0, r7, #3
 8000c54:	e643      	b.n	80008de <__aeabi_dadd+0x25a>
 8000c56:	4644      	mov	r4, r8
 8000c58:	08db      	lsrs	r3, r3, #3
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	d130      	bne.n	8000cc0 <__aeabi_dadd+0x63c>
 8000c5e:	0742      	lsls	r2, r0, #29
 8000c60:	4313      	orrs	r3, r2
 8000c62:	08c0      	lsrs	r0, r0, #3
 8000c64:	e65c      	b.n	8000920 <__aeabi_dadd+0x29c>
 8000c66:	077b      	lsls	r3, r7, #29
 8000c68:	08c9      	lsrs	r1, r1, #3
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	08f8      	lsrs	r0, r7, #3
 8000c6e:	e639      	b.n	80008e4 <__aeabi_dadd+0x260>
 8000c70:	185c      	adds	r4, r3, r1
 8000c72:	429c      	cmp	r4, r3
 8000c74:	419b      	sbcs	r3, r3
 8000c76:	4440      	add	r0, r8
 8000c78:	425b      	negs	r3, r3
 8000c7a:	18c7      	adds	r7, r0, r3
 8000c7c:	023b      	lsls	r3, r7, #8
 8000c7e:	d400      	bmi.n	8000c82 <__aeabi_dadd+0x5fe>
 8000c80:	e625      	b.n	80008ce <__aeabi_dadd+0x24a>
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <__aeabi_dadd+0x674>)
 8000c84:	2601      	movs	r6, #1
 8000c86:	401f      	ands	r7, r3
 8000c88:	e621      	b.n	80008ce <__aeabi_dadd+0x24a>
 8000c8a:	0004      	movs	r4, r0
 8000c8c:	3a20      	subs	r2, #32
 8000c8e:	40d4      	lsrs	r4, r2
 8000c90:	4662      	mov	r2, ip
 8000c92:	2a20      	cmp	r2, #32
 8000c94:	d004      	beq.n	8000ca0 <__aeabi_dadd+0x61c>
 8000c96:	2240      	movs	r2, #64	; 0x40
 8000c98:	4666      	mov	r6, ip
 8000c9a:	1b92      	subs	r2, r2, r6
 8000c9c:	4090      	lsls	r0, r2
 8000c9e:	4303      	orrs	r3, r0
 8000ca0:	1e5a      	subs	r2, r3, #1
 8000ca2:	4193      	sbcs	r3, r2
 8000ca4:	431c      	orrs	r4, r3
 8000ca6:	e67e      	b.n	80009a6 <__aeabi_dadd+0x322>
 8000ca8:	185c      	adds	r4, r3, r1
 8000caa:	428c      	cmp	r4, r1
 8000cac:	4189      	sbcs	r1, r1
 8000cae:	4440      	add	r0, r8
 8000cb0:	4249      	negs	r1, r1
 8000cb2:	1847      	adds	r7, r0, r1
 8000cb4:	e6dd      	b.n	8000a72 <__aeabi_dadd+0x3ee>
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	433b      	orrs	r3, r7
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x63a>
 8000cbc:	e6ad      	b.n	8000a1a <__aeabi_dadd+0x396>
 8000cbe:	e606      	b.n	80008ce <__aeabi_dadd+0x24a>
 8000cc0:	0744      	lsls	r4, r0, #29
 8000cc2:	4323      	orrs	r3, r4
 8000cc4:	2480      	movs	r4, #128	; 0x80
 8000cc6:	08c0      	lsrs	r0, r0, #3
 8000cc8:	0324      	lsls	r4, r4, #12
 8000cca:	4220      	tst	r0, r4
 8000ccc:	d008      	beq.n	8000ce0 <__aeabi_dadd+0x65c>
 8000cce:	4642      	mov	r2, r8
 8000cd0:	08d6      	lsrs	r6, r2, #3
 8000cd2:	4226      	tst	r6, r4
 8000cd4:	d104      	bne.n	8000ce0 <__aeabi_dadd+0x65c>
 8000cd6:	4655      	mov	r5, sl
 8000cd8:	0030      	movs	r0, r6
 8000cda:	08cb      	lsrs	r3, r1, #3
 8000cdc:	0751      	lsls	r1, r2, #29
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	0f5a      	lsrs	r2, r3, #29
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	0752      	lsls	r2, r2, #29
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	e619      	b.n	8000920 <__aeabi_dadd+0x29c>
 8000cec:	2300      	movs	r3, #0
 8000cee:	4a01      	ldr	r2, [pc, #4]	; (8000cf4 <__aeabi_dadd+0x670>)
 8000cf0:	001f      	movs	r7, r3
 8000cf2:	e55e      	b.n	80007b2 <__aeabi_dadd+0x12e>
 8000cf4:	000007ff 	.word	0x000007ff
 8000cf8:	ff7fffff 	.word	0xff7fffff

08000cfc <__aeabi_ddiv>:
 8000cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfe:	4657      	mov	r7, sl
 8000d00:	464e      	mov	r6, r9
 8000d02:	4645      	mov	r5, r8
 8000d04:	46de      	mov	lr, fp
 8000d06:	b5e0      	push	{r5, r6, r7, lr}
 8000d08:	4681      	mov	r9, r0
 8000d0a:	0005      	movs	r5, r0
 8000d0c:	030c      	lsls	r4, r1, #12
 8000d0e:	0048      	lsls	r0, r1, #1
 8000d10:	4692      	mov	sl, r2
 8000d12:	001f      	movs	r7, r3
 8000d14:	b085      	sub	sp, #20
 8000d16:	0b24      	lsrs	r4, r4, #12
 8000d18:	0d40      	lsrs	r0, r0, #21
 8000d1a:	0fce      	lsrs	r6, r1, #31
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_ddiv+0x26>
 8000d20:	e156      	b.n	8000fd0 <__aeabi_ddiv+0x2d4>
 8000d22:	4bd4      	ldr	r3, [pc, #848]	; (8001074 <__aeabi_ddiv+0x378>)
 8000d24:	4298      	cmp	r0, r3
 8000d26:	d100      	bne.n	8000d2a <__aeabi_ddiv+0x2e>
 8000d28:	e172      	b.n	8001010 <__aeabi_ddiv+0x314>
 8000d2a:	0f6b      	lsrs	r3, r5, #29
 8000d2c:	00e4      	lsls	r4, r4, #3
 8000d2e:	431c      	orrs	r4, r3
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	4323      	orrs	r3, r4
 8000d36:	4698      	mov	r8, r3
 8000d38:	4bcf      	ldr	r3, [pc, #828]	; (8001078 <__aeabi_ddiv+0x37c>)
 8000d3a:	00ed      	lsls	r5, r5, #3
 8000d3c:	469b      	mov	fp, r3
 8000d3e:	2300      	movs	r3, #0
 8000d40:	4699      	mov	r9, r3
 8000d42:	4483      	add	fp, r0
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	033c      	lsls	r4, r7, #12
 8000d48:	007b      	lsls	r3, r7, #1
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	0b24      	lsrs	r4, r4, #12
 8000d4e:	0d5b      	lsrs	r3, r3, #21
 8000d50:	0fff      	lsrs	r7, r7, #31
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0x5c>
 8000d56:	e11f      	b.n	8000f98 <__aeabi_ddiv+0x29c>
 8000d58:	4ac6      	ldr	r2, [pc, #792]	; (8001074 <__aeabi_ddiv+0x378>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_ddiv+0x64>
 8000d5e:	e162      	b.n	8001026 <__aeabi_ddiv+0x32a>
 8000d60:	49c5      	ldr	r1, [pc, #788]	; (8001078 <__aeabi_ddiv+0x37c>)
 8000d62:	0f42      	lsrs	r2, r0, #29
 8000d64:	468c      	mov	ip, r1
 8000d66:	00e4      	lsls	r4, r4, #3
 8000d68:	4659      	mov	r1, fp
 8000d6a:	4314      	orrs	r4, r2
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	4463      	add	r3, ip
 8000d70:	0412      	lsls	r2, r2, #16
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	4314      	orrs	r4, r2
 8000d76:	469b      	mov	fp, r3
 8000d78:	00c2      	lsls	r2, r0, #3
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	0033      	movs	r3, r6
 8000d7e:	407b      	eors	r3, r7
 8000d80:	469a      	mov	sl, r3
 8000d82:	464b      	mov	r3, r9
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d827      	bhi.n	8000dd8 <__aeabi_ddiv+0xdc>
 8000d88:	49bc      	ldr	r1, [pc, #752]	; (800107c <__aeabi_ddiv+0x380>)
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	58cb      	ldr	r3, [r1, r3]
 8000d8e:	469f      	mov	pc, r3
 8000d90:	46b2      	mov	sl, r6
 8000d92:	9b00      	ldr	r3, [sp, #0]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d016      	beq.n	8000dc6 <__aeabi_ddiv+0xca>
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_ddiv+0xa2>
 8000d9c:	e28e      	b.n	80012bc <__aeabi_ddiv+0x5c0>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d000      	beq.n	8000da4 <__aeabi_ddiv+0xa8>
 8000da2:	e0d9      	b.n	8000f58 <__aeabi_ddiv+0x25c>
 8000da4:	2300      	movs	r3, #0
 8000da6:	2400      	movs	r4, #0
 8000da8:	2500      	movs	r5, #0
 8000daa:	4652      	mov	r2, sl
 8000dac:	051b      	lsls	r3, r3, #20
 8000dae:	4323      	orrs	r3, r4
 8000db0:	07d2      	lsls	r2, r2, #31
 8000db2:	4313      	orrs	r3, r2
 8000db4:	0028      	movs	r0, r5
 8000db6:	0019      	movs	r1, r3
 8000db8:	b005      	add	sp, #20
 8000dba:	bcf0      	pop	{r4, r5, r6, r7}
 8000dbc:	46bb      	mov	fp, r7
 8000dbe:	46b2      	mov	sl, r6
 8000dc0:	46a9      	mov	r9, r5
 8000dc2:	46a0      	mov	r8, r4
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc6:	2400      	movs	r4, #0
 8000dc8:	2500      	movs	r5, #0
 8000dca:	4baa      	ldr	r3, [pc, #680]	; (8001074 <__aeabi_ddiv+0x378>)
 8000dcc:	e7ed      	b.n	8000daa <__aeabi_ddiv+0xae>
 8000dce:	46ba      	mov	sl, r7
 8000dd0:	46a0      	mov	r8, r4
 8000dd2:	0015      	movs	r5, r2
 8000dd4:	9000      	str	r0, [sp, #0]
 8000dd6:	e7dc      	b.n	8000d92 <__aeabi_ddiv+0x96>
 8000dd8:	4544      	cmp	r4, r8
 8000dda:	d200      	bcs.n	8000dde <__aeabi_ddiv+0xe2>
 8000ddc:	e1c7      	b.n	800116e <__aeabi_ddiv+0x472>
 8000dde:	d100      	bne.n	8000de2 <__aeabi_ddiv+0xe6>
 8000de0:	e1c2      	b.n	8001168 <__aeabi_ddiv+0x46c>
 8000de2:	2301      	movs	r3, #1
 8000de4:	425b      	negs	r3, r3
 8000de6:	469c      	mov	ip, r3
 8000de8:	002e      	movs	r6, r5
 8000dea:	4640      	mov	r0, r8
 8000dec:	2500      	movs	r5, #0
 8000dee:	44e3      	add	fp, ip
 8000df0:	0223      	lsls	r3, r4, #8
 8000df2:	0e14      	lsrs	r4, r2, #24
 8000df4:	431c      	orrs	r4, r3
 8000df6:	0c1b      	lsrs	r3, r3, #16
 8000df8:	4699      	mov	r9, r3
 8000dfa:	0423      	lsls	r3, r4, #16
 8000dfc:	0c1f      	lsrs	r7, r3, #16
 8000dfe:	0212      	lsls	r2, r2, #8
 8000e00:	4649      	mov	r1, r9
 8000e02:	9200      	str	r2, [sp, #0]
 8000e04:	9701      	str	r7, [sp, #4]
 8000e06:	f7ff fa05 	bl	8000214 <__aeabi_uidivmod>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	437a      	muls	r2, r7
 8000e0e:	040b      	lsls	r3, r1, #16
 8000e10:	0c31      	lsrs	r1, r6, #16
 8000e12:	4680      	mov	r8, r0
 8000e14:	4319      	orrs	r1, r3
 8000e16:	428a      	cmp	r2, r1
 8000e18:	d907      	bls.n	8000e2a <__aeabi_ddiv+0x12e>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	469c      	mov	ip, r3
 8000e20:	1909      	adds	r1, r1, r4
 8000e22:	44e0      	add	r8, ip
 8000e24:	428c      	cmp	r4, r1
 8000e26:	d800      	bhi.n	8000e2a <__aeabi_ddiv+0x12e>
 8000e28:	e207      	b.n	800123a <__aeabi_ddiv+0x53e>
 8000e2a:	1a88      	subs	r0, r1, r2
 8000e2c:	4649      	mov	r1, r9
 8000e2e:	f7ff f9f1 	bl	8000214 <__aeabi_uidivmod>
 8000e32:	0409      	lsls	r1, r1, #16
 8000e34:	468c      	mov	ip, r1
 8000e36:	0431      	lsls	r1, r6, #16
 8000e38:	4666      	mov	r6, ip
 8000e3a:	9a01      	ldr	r2, [sp, #4]
 8000e3c:	0c09      	lsrs	r1, r1, #16
 8000e3e:	4342      	muls	r2, r0
 8000e40:	0003      	movs	r3, r0
 8000e42:	4331      	orrs	r1, r6
 8000e44:	428a      	cmp	r2, r1
 8000e46:	d904      	bls.n	8000e52 <__aeabi_ddiv+0x156>
 8000e48:	1909      	adds	r1, r1, r4
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	428c      	cmp	r4, r1
 8000e4e:	d800      	bhi.n	8000e52 <__aeabi_ddiv+0x156>
 8000e50:	e1ed      	b.n	800122e <__aeabi_ddiv+0x532>
 8000e52:	1a88      	subs	r0, r1, r2
 8000e54:	4642      	mov	r2, r8
 8000e56:	0412      	lsls	r2, r2, #16
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	4690      	mov	r8, r2
 8000e5c:	4641      	mov	r1, r8
 8000e5e:	9b00      	ldr	r3, [sp, #0]
 8000e60:	040e      	lsls	r6, r1, #16
 8000e62:	0c1b      	lsrs	r3, r3, #16
 8000e64:	001f      	movs	r7, r3
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	9b00      	ldr	r3, [sp, #0]
 8000e6a:	0c36      	lsrs	r6, r6, #16
 8000e6c:	041b      	lsls	r3, r3, #16
 8000e6e:	0c19      	lsrs	r1, r3, #16
 8000e70:	000b      	movs	r3, r1
 8000e72:	4373      	muls	r3, r6
 8000e74:	0c12      	lsrs	r2, r2, #16
 8000e76:	437e      	muls	r6, r7
 8000e78:	9103      	str	r1, [sp, #12]
 8000e7a:	4351      	muls	r1, r2
 8000e7c:	437a      	muls	r2, r7
 8000e7e:	0c1f      	lsrs	r7, r3, #16
 8000e80:	46bc      	mov	ip, r7
 8000e82:	1876      	adds	r6, r6, r1
 8000e84:	4466      	add	r6, ip
 8000e86:	42b1      	cmp	r1, r6
 8000e88:	d903      	bls.n	8000e92 <__aeabi_ddiv+0x196>
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	0249      	lsls	r1, r1, #9
 8000e8e:	468c      	mov	ip, r1
 8000e90:	4462      	add	r2, ip
 8000e92:	0c31      	lsrs	r1, r6, #16
 8000e94:	188a      	adds	r2, r1, r2
 8000e96:	0431      	lsls	r1, r6, #16
 8000e98:	041e      	lsls	r6, r3, #16
 8000e9a:	0c36      	lsrs	r6, r6, #16
 8000e9c:	198e      	adds	r6, r1, r6
 8000e9e:	4290      	cmp	r0, r2
 8000ea0:	d302      	bcc.n	8000ea8 <__aeabi_ddiv+0x1ac>
 8000ea2:	d112      	bne.n	8000eca <__aeabi_ddiv+0x1ce>
 8000ea4:	42b5      	cmp	r5, r6
 8000ea6:	d210      	bcs.n	8000eca <__aeabi_ddiv+0x1ce>
 8000ea8:	4643      	mov	r3, r8
 8000eaa:	1e59      	subs	r1, r3, #1
 8000eac:	9b00      	ldr	r3, [sp, #0]
 8000eae:	469c      	mov	ip, r3
 8000eb0:	4465      	add	r5, ip
 8000eb2:	001f      	movs	r7, r3
 8000eb4:	429d      	cmp	r5, r3
 8000eb6:	419b      	sbcs	r3, r3
 8000eb8:	425b      	negs	r3, r3
 8000eba:	191b      	adds	r3, r3, r4
 8000ebc:	18c0      	adds	r0, r0, r3
 8000ebe:	4284      	cmp	r4, r0
 8000ec0:	d200      	bcs.n	8000ec4 <__aeabi_ddiv+0x1c8>
 8000ec2:	e1a0      	b.n	8001206 <__aeabi_ddiv+0x50a>
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_ddiv+0x1cc>
 8000ec6:	e19b      	b.n	8001200 <__aeabi_ddiv+0x504>
 8000ec8:	4688      	mov	r8, r1
 8000eca:	1bae      	subs	r6, r5, r6
 8000ecc:	42b5      	cmp	r5, r6
 8000ece:	41ad      	sbcs	r5, r5
 8000ed0:	1a80      	subs	r0, r0, r2
 8000ed2:	426d      	negs	r5, r5
 8000ed4:	1b40      	subs	r0, r0, r5
 8000ed6:	4284      	cmp	r4, r0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x1e0>
 8000eda:	e1d5      	b.n	8001288 <__aeabi_ddiv+0x58c>
 8000edc:	4649      	mov	r1, r9
 8000ede:	f7ff f999 	bl	8000214 <__aeabi_uidivmod>
 8000ee2:	9a01      	ldr	r2, [sp, #4]
 8000ee4:	040b      	lsls	r3, r1, #16
 8000ee6:	4342      	muls	r2, r0
 8000ee8:	0c31      	lsrs	r1, r6, #16
 8000eea:	0005      	movs	r5, r0
 8000eec:	4319      	orrs	r1, r3
 8000eee:	428a      	cmp	r2, r1
 8000ef0:	d900      	bls.n	8000ef4 <__aeabi_ddiv+0x1f8>
 8000ef2:	e16c      	b.n	80011ce <__aeabi_ddiv+0x4d2>
 8000ef4:	1a88      	subs	r0, r1, r2
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	f7ff f98c 	bl	8000214 <__aeabi_uidivmod>
 8000efc:	9a01      	ldr	r2, [sp, #4]
 8000efe:	0436      	lsls	r6, r6, #16
 8000f00:	4342      	muls	r2, r0
 8000f02:	0409      	lsls	r1, r1, #16
 8000f04:	0c36      	lsrs	r6, r6, #16
 8000f06:	0003      	movs	r3, r0
 8000f08:	430e      	orrs	r6, r1
 8000f0a:	42b2      	cmp	r2, r6
 8000f0c:	d900      	bls.n	8000f10 <__aeabi_ddiv+0x214>
 8000f0e:	e153      	b.n	80011b8 <__aeabi_ddiv+0x4bc>
 8000f10:	9803      	ldr	r0, [sp, #12]
 8000f12:	1ab6      	subs	r6, r6, r2
 8000f14:	0002      	movs	r2, r0
 8000f16:	042d      	lsls	r5, r5, #16
 8000f18:	431d      	orrs	r5, r3
 8000f1a:	9f02      	ldr	r7, [sp, #8]
 8000f1c:	042b      	lsls	r3, r5, #16
 8000f1e:	0c1b      	lsrs	r3, r3, #16
 8000f20:	435a      	muls	r2, r3
 8000f22:	437b      	muls	r3, r7
 8000f24:	469c      	mov	ip, r3
 8000f26:	0c29      	lsrs	r1, r5, #16
 8000f28:	4348      	muls	r0, r1
 8000f2a:	0c13      	lsrs	r3, r2, #16
 8000f2c:	4484      	add	ip, r0
 8000f2e:	4463      	add	r3, ip
 8000f30:	4379      	muls	r1, r7
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d903      	bls.n	8000f3e <__aeabi_ddiv+0x242>
 8000f36:	2080      	movs	r0, #128	; 0x80
 8000f38:	0240      	lsls	r0, r0, #9
 8000f3a:	4684      	mov	ip, r0
 8000f3c:	4461      	add	r1, ip
 8000f3e:	0c18      	lsrs	r0, r3, #16
 8000f40:	0412      	lsls	r2, r2, #16
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	0c12      	lsrs	r2, r2, #16
 8000f46:	1841      	adds	r1, r0, r1
 8000f48:	189b      	adds	r3, r3, r2
 8000f4a:	428e      	cmp	r6, r1
 8000f4c:	d200      	bcs.n	8000f50 <__aeabi_ddiv+0x254>
 8000f4e:	e0ff      	b.n	8001150 <__aeabi_ddiv+0x454>
 8000f50:	d100      	bne.n	8000f54 <__aeabi_ddiv+0x258>
 8000f52:	e0fa      	b.n	800114a <__aeabi_ddiv+0x44e>
 8000f54:	2301      	movs	r3, #1
 8000f56:	431d      	orrs	r5, r3
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <__aeabi_ddiv+0x384>)
 8000f5a:	445a      	add	r2, fp
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	dc00      	bgt.n	8000f62 <__aeabi_ddiv+0x266>
 8000f60:	e0aa      	b.n	80010b8 <__aeabi_ddiv+0x3bc>
 8000f62:	076b      	lsls	r3, r5, #29
 8000f64:	d000      	beq.n	8000f68 <__aeabi_ddiv+0x26c>
 8000f66:	e13d      	b.n	80011e4 <__aeabi_ddiv+0x4e8>
 8000f68:	08ed      	lsrs	r5, r5, #3
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	01db      	lsls	r3, r3, #7
 8000f6e:	d506      	bpl.n	8000f7e <__aeabi_ddiv+0x282>
 8000f70:	4642      	mov	r2, r8
 8000f72:	4b44      	ldr	r3, [pc, #272]	; (8001084 <__aeabi_ddiv+0x388>)
 8000f74:	401a      	ands	r2, r3
 8000f76:	4690      	mov	r8, r2
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	00d2      	lsls	r2, r2, #3
 8000f7c:	445a      	add	r2, fp
 8000f7e:	4b42      	ldr	r3, [pc, #264]	; (8001088 <__aeabi_ddiv+0x38c>)
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dd00      	ble.n	8000f86 <__aeabi_ddiv+0x28a>
 8000f84:	e71f      	b.n	8000dc6 <__aeabi_ddiv+0xca>
 8000f86:	4643      	mov	r3, r8
 8000f88:	075b      	lsls	r3, r3, #29
 8000f8a:	431d      	orrs	r5, r3
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	0552      	lsls	r2, r2, #21
 8000f90:	025c      	lsls	r4, r3, #9
 8000f92:	0b24      	lsrs	r4, r4, #12
 8000f94:	0d53      	lsrs	r3, r2, #21
 8000f96:	e708      	b.n	8000daa <__aeabi_ddiv+0xae>
 8000f98:	4652      	mov	r2, sl
 8000f9a:	4322      	orrs	r2, r4
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_ddiv+0x2a4>
 8000f9e:	e07b      	b.n	8001098 <__aeabi_ddiv+0x39c>
 8000fa0:	2c00      	cmp	r4, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_ddiv+0x2aa>
 8000fa4:	e0fa      	b.n	800119c <__aeabi_ddiv+0x4a0>
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f001 f934 	bl	8002214 <__clzsi2>
 8000fac:	0002      	movs	r2, r0
 8000fae:	3a0b      	subs	r2, #11
 8000fb0:	231d      	movs	r3, #29
 8000fb2:	0001      	movs	r1, r0
 8000fb4:	1a9b      	subs	r3, r3, r2
 8000fb6:	4652      	mov	r2, sl
 8000fb8:	3908      	subs	r1, #8
 8000fba:	40da      	lsrs	r2, r3
 8000fbc:	408c      	lsls	r4, r1
 8000fbe:	4314      	orrs	r4, r2
 8000fc0:	4652      	mov	r2, sl
 8000fc2:	408a      	lsls	r2, r1
 8000fc4:	4b31      	ldr	r3, [pc, #196]	; (800108c <__aeabi_ddiv+0x390>)
 8000fc6:	4458      	add	r0, fp
 8000fc8:	469b      	mov	fp, r3
 8000fca:	4483      	add	fp, r0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	e6d5      	b.n	8000d7c <__aeabi_ddiv+0x80>
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	4323      	orrs	r3, r4
 8000fd4:	4698      	mov	r8, r3
 8000fd6:	d044      	beq.n	8001062 <__aeabi_ddiv+0x366>
 8000fd8:	2c00      	cmp	r4, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_ddiv+0x2e2>
 8000fdc:	e0ce      	b.n	800117c <__aeabi_ddiv+0x480>
 8000fde:	0020      	movs	r0, r4
 8000fe0:	f001 f918 	bl	8002214 <__clzsi2>
 8000fe4:	0001      	movs	r1, r0
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	390b      	subs	r1, #11
 8000fea:	231d      	movs	r3, #29
 8000fec:	1a5b      	subs	r3, r3, r1
 8000fee:	4649      	mov	r1, r9
 8000ff0:	0010      	movs	r0, r2
 8000ff2:	40d9      	lsrs	r1, r3
 8000ff4:	3808      	subs	r0, #8
 8000ff6:	4084      	lsls	r4, r0
 8000ff8:	000b      	movs	r3, r1
 8000ffa:	464d      	mov	r5, r9
 8000ffc:	4323      	orrs	r3, r4
 8000ffe:	4698      	mov	r8, r3
 8001000:	4085      	lsls	r5, r0
 8001002:	4823      	ldr	r0, [pc, #140]	; (8001090 <__aeabi_ddiv+0x394>)
 8001004:	1a83      	subs	r3, r0, r2
 8001006:	469b      	mov	fp, r3
 8001008:	2300      	movs	r3, #0
 800100a:	4699      	mov	r9, r3
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	e69a      	b.n	8000d46 <__aeabi_ddiv+0x4a>
 8001010:	464b      	mov	r3, r9
 8001012:	4323      	orrs	r3, r4
 8001014:	4698      	mov	r8, r3
 8001016:	d11d      	bne.n	8001054 <__aeabi_ddiv+0x358>
 8001018:	2308      	movs	r3, #8
 800101a:	4699      	mov	r9, r3
 800101c:	3b06      	subs	r3, #6
 800101e:	2500      	movs	r5, #0
 8001020:	4683      	mov	fp, r0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	e68f      	b.n	8000d46 <__aeabi_ddiv+0x4a>
 8001026:	4652      	mov	r2, sl
 8001028:	4322      	orrs	r2, r4
 800102a:	d109      	bne.n	8001040 <__aeabi_ddiv+0x344>
 800102c:	2302      	movs	r3, #2
 800102e:	4649      	mov	r1, r9
 8001030:	4319      	orrs	r1, r3
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <__aeabi_ddiv+0x398>)
 8001034:	4689      	mov	r9, r1
 8001036:	469c      	mov	ip, r3
 8001038:	2400      	movs	r4, #0
 800103a:	2002      	movs	r0, #2
 800103c:	44e3      	add	fp, ip
 800103e:	e69d      	b.n	8000d7c <__aeabi_ddiv+0x80>
 8001040:	2303      	movs	r3, #3
 8001042:	464a      	mov	r2, r9
 8001044:	431a      	orrs	r2, r3
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <__aeabi_ddiv+0x398>)
 8001048:	4691      	mov	r9, r2
 800104a:	469c      	mov	ip, r3
 800104c:	4652      	mov	r2, sl
 800104e:	2003      	movs	r0, #3
 8001050:	44e3      	add	fp, ip
 8001052:	e693      	b.n	8000d7c <__aeabi_ddiv+0x80>
 8001054:	230c      	movs	r3, #12
 8001056:	4699      	mov	r9, r3
 8001058:	3b09      	subs	r3, #9
 800105a:	46a0      	mov	r8, r4
 800105c:	4683      	mov	fp, r0
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	e671      	b.n	8000d46 <__aeabi_ddiv+0x4a>
 8001062:	2304      	movs	r3, #4
 8001064:	4699      	mov	r9, r3
 8001066:	2300      	movs	r3, #0
 8001068:	469b      	mov	fp, r3
 800106a:	3301      	adds	r3, #1
 800106c:	2500      	movs	r5, #0
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	e669      	b.n	8000d46 <__aeabi_ddiv+0x4a>
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	000007ff 	.word	0x000007ff
 8001078:	fffffc01 	.word	0xfffffc01
 800107c:	080058e0 	.word	0x080058e0
 8001080:	000003ff 	.word	0x000003ff
 8001084:	feffffff 	.word	0xfeffffff
 8001088:	000007fe 	.word	0x000007fe
 800108c:	000003f3 	.word	0x000003f3
 8001090:	fffffc0d 	.word	0xfffffc0d
 8001094:	fffff801 	.word	0xfffff801
 8001098:	4649      	mov	r1, r9
 800109a:	2301      	movs	r3, #1
 800109c:	4319      	orrs	r1, r3
 800109e:	4689      	mov	r9, r1
 80010a0:	2400      	movs	r4, #0
 80010a2:	2001      	movs	r0, #1
 80010a4:	e66a      	b.n	8000d7c <__aeabi_ddiv+0x80>
 80010a6:	2300      	movs	r3, #0
 80010a8:	2480      	movs	r4, #128	; 0x80
 80010aa:	469a      	mov	sl, r3
 80010ac:	2500      	movs	r5, #0
 80010ae:	4b8a      	ldr	r3, [pc, #552]	; (80012d8 <__aeabi_ddiv+0x5dc>)
 80010b0:	0324      	lsls	r4, r4, #12
 80010b2:	e67a      	b.n	8000daa <__aeabi_ddiv+0xae>
 80010b4:	2501      	movs	r5, #1
 80010b6:	426d      	negs	r5, r5
 80010b8:	2301      	movs	r3, #1
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	2b38      	cmp	r3, #56	; 0x38
 80010be:	dd00      	ble.n	80010c2 <__aeabi_ddiv+0x3c6>
 80010c0:	e670      	b.n	8000da4 <__aeabi_ddiv+0xa8>
 80010c2:	2b1f      	cmp	r3, #31
 80010c4:	dc00      	bgt.n	80010c8 <__aeabi_ddiv+0x3cc>
 80010c6:	e0bf      	b.n	8001248 <__aeabi_ddiv+0x54c>
 80010c8:	211f      	movs	r1, #31
 80010ca:	4249      	negs	r1, r1
 80010cc:	1a8a      	subs	r2, r1, r2
 80010ce:	4641      	mov	r1, r8
 80010d0:	40d1      	lsrs	r1, r2
 80010d2:	000a      	movs	r2, r1
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d004      	beq.n	80010e2 <__aeabi_ddiv+0x3e6>
 80010d8:	4641      	mov	r1, r8
 80010da:	4b80      	ldr	r3, [pc, #512]	; (80012dc <__aeabi_ddiv+0x5e0>)
 80010dc:	445b      	add	r3, fp
 80010de:	4099      	lsls	r1, r3
 80010e0:	430d      	orrs	r5, r1
 80010e2:	1e6b      	subs	r3, r5, #1
 80010e4:	419d      	sbcs	r5, r3
 80010e6:	2307      	movs	r3, #7
 80010e8:	432a      	orrs	r2, r5
 80010ea:	001d      	movs	r5, r3
 80010ec:	2400      	movs	r4, #0
 80010ee:	4015      	ands	r5, r2
 80010f0:	4213      	tst	r3, r2
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x3fa>
 80010f4:	e0d4      	b.n	80012a0 <__aeabi_ddiv+0x5a4>
 80010f6:	210f      	movs	r1, #15
 80010f8:	2300      	movs	r3, #0
 80010fa:	4011      	ands	r1, r2
 80010fc:	2904      	cmp	r1, #4
 80010fe:	d100      	bne.n	8001102 <__aeabi_ddiv+0x406>
 8001100:	e0cb      	b.n	800129a <__aeabi_ddiv+0x59e>
 8001102:	1d11      	adds	r1, r2, #4
 8001104:	4291      	cmp	r1, r2
 8001106:	4192      	sbcs	r2, r2
 8001108:	4252      	negs	r2, r2
 800110a:	189b      	adds	r3, r3, r2
 800110c:	000a      	movs	r2, r1
 800110e:	0219      	lsls	r1, r3, #8
 8001110:	d400      	bmi.n	8001114 <__aeabi_ddiv+0x418>
 8001112:	e0c2      	b.n	800129a <__aeabi_ddiv+0x59e>
 8001114:	2301      	movs	r3, #1
 8001116:	2400      	movs	r4, #0
 8001118:	2500      	movs	r5, #0
 800111a:	e646      	b.n	8000daa <__aeabi_ddiv+0xae>
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	4641      	mov	r1, r8
 8001120:	031b      	lsls	r3, r3, #12
 8001122:	4219      	tst	r1, r3
 8001124:	d008      	beq.n	8001138 <__aeabi_ddiv+0x43c>
 8001126:	421c      	tst	r4, r3
 8001128:	d106      	bne.n	8001138 <__aeabi_ddiv+0x43c>
 800112a:	431c      	orrs	r4, r3
 800112c:	0324      	lsls	r4, r4, #12
 800112e:	46ba      	mov	sl, r7
 8001130:	0015      	movs	r5, r2
 8001132:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <__aeabi_ddiv+0x5dc>)
 8001134:	0b24      	lsrs	r4, r4, #12
 8001136:	e638      	b.n	8000daa <__aeabi_ddiv+0xae>
 8001138:	2480      	movs	r4, #128	; 0x80
 800113a:	4643      	mov	r3, r8
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	431c      	orrs	r4, r3
 8001140:	0324      	lsls	r4, r4, #12
 8001142:	46b2      	mov	sl, r6
 8001144:	4b64      	ldr	r3, [pc, #400]	; (80012d8 <__aeabi_ddiv+0x5dc>)
 8001146:	0b24      	lsrs	r4, r4, #12
 8001148:	e62f      	b.n	8000daa <__aeabi_ddiv+0xae>
 800114a:	2b00      	cmp	r3, #0
 800114c:	d100      	bne.n	8001150 <__aeabi_ddiv+0x454>
 800114e:	e703      	b.n	8000f58 <__aeabi_ddiv+0x25c>
 8001150:	19a6      	adds	r6, r4, r6
 8001152:	1e68      	subs	r0, r5, #1
 8001154:	42a6      	cmp	r6, r4
 8001156:	d200      	bcs.n	800115a <__aeabi_ddiv+0x45e>
 8001158:	e08d      	b.n	8001276 <__aeabi_ddiv+0x57a>
 800115a:	428e      	cmp	r6, r1
 800115c:	d200      	bcs.n	8001160 <__aeabi_ddiv+0x464>
 800115e:	e0a3      	b.n	80012a8 <__aeabi_ddiv+0x5ac>
 8001160:	d100      	bne.n	8001164 <__aeabi_ddiv+0x468>
 8001162:	e0b3      	b.n	80012cc <__aeabi_ddiv+0x5d0>
 8001164:	0005      	movs	r5, r0
 8001166:	e6f5      	b.n	8000f54 <__aeabi_ddiv+0x258>
 8001168:	42aa      	cmp	r2, r5
 800116a:	d900      	bls.n	800116e <__aeabi_ddiv+0x472>
 800116c:	e639      	b.n	8000de2 <__aeabi_ddiv+0xe6>
 800116e:	4643      	mov	r3, r8
 8001170:	07de      	lsls	r6, r3, #31
 8001172:	0858      	lsrs	r0, r3, #1
 8001174:	086b      	lsrs	r3, r5, #1
 8001176:	431e      	orrs	r6, r3
 8001178:	07ed      	lsls	r5, r5, #31
 800117a:	e639      	b.n	8000df0 <__aeabi_ddiv+0xf4>
 800117c:	4648      	mov	r0, r9
 800117e:	f001 f849 	bl	8002214 <__clzsi2>
 8001182:	0001      	movs	r1, r0
 8001184:	0002      	movs	r2, r0
 8001186:	3115      	adds	r1, #21
 8001188:	3220      	adds	r2, #32
 800118a:	291c      	cmp	r1, #28
 800118c:	dc00      	bgt.n	8001190 <__aeabi_ddiv+0x494>
 800118e:	e72c      	b.n	8000fea <__aeabi_ddiv+0x2ee>
 8001190:	464b      	mov	r3, r9
 8001192:	3808      	subs	r0, #8
 8001194:	4083      	lsls	r3, r0
 8001196:	2500      	movs	r5, #0
 8001198:	4698      	mov	r8, r3
 800119a:	e732      	b.n	8001002 <__aeabi_ddiv+0x306>
 800119c:	f001 f83a 	bl	8002214 <__clzsi2>
 80011a0:	0003      	movs	r3, r0
 80011a2:	001a      	movs	r2, r3
 80011a4:	3215      	adds	r2, #21
 80011a6:	3020      	adds	r0, #32
 80011a8:	2a1c      	cmp	r2, #28
 80011aa:	dc00      	bgt.n	80011ae <__aeabi_ddiv+0x4b2>
 80011ac:	e700      	b.n	8000fb0 <__aeabi_ddiv+0x2b4>
 80011ae:	4654      	mov	r4, sl
 80011b0:	3b08      	subs	r3, #8
 80011b2:	2200      	movs	r2, #0
 80011b4:	409c      	lsls	r4, r3
 80011b6:	e705      	b.n	8000fc4 <__aeabi_ddiv+0x2c8>
 80011b8:	1936      	adds	r6, r6, r4
 80011ba:	3b01      	subs	r3, #1
 80011bc:	42b4      	cmp	r4, r6
 80011be:	d900      	bls.n	80011c2 <__aeabi_ddiv+0x4c6>
 80011c0:	e6a6      	b.n	8000f10 <__aeabi_ddiv+0x214>
 80011c2:	42b2      	cmp	r2, r6
 80011c4:	d800      	bhi.n	80011c8 <__aeabi_ddiv+0x4cc>
 80011c6:	e6a3      	b.n	8000f10 <__aeabi_ddiv+0x214>
 80011c8:	1e83      	subs	r3, r0, #2
 80011ca:	1936      	adds	r6, r6, r4
 80011cc:	e6a0      	b.n	8000f10 <__aeabi_ddiv+0x214>
 80011ce:	1909      	adds	r1, r1, r4
 80011d0:	3d01      	subs	r5, #1
 80011d2:	428c      	cmp	r4, r1
 80011d4:	d900      	bls.n	80011d8 <__aeabi_ddiv+0x4dc>
 80011d6:	e68d      	b.n	8000ef4 <__aeabi_ddiv+0x1f8>
 80011d8:	428a      	cmp	r2, r1
 80011da:	d800      	bhi.n	80011de <__aeabi_ddiv+0x4e2>
 80011dc:	e68a      	b.n	8000ef4 <__aeabi_ddiv+0x1f8>
 80011de:	1e85      	subs	r5, r0, #2
 80011e0:	1909      	adds	r1, r1, r4
 80011e2:	e687      	b.n	8000ef4 <__aeabi_ddiv+0x1f8>
 80011e4:	230f      	movs	r3, #15
 80011e6:	402b      	ands	r3, r5
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x4f2>
 80011ec:	e6bc      	b.n	8000f68 <__aeabi_ddiv+0x26c>
 80011ee:	2305      	movs	r3, #5
 80011f0:	425b      	negs	r3, r3
 80011f2:	42ab      	cmp	r3, r5
 80011f4:	419b      	sbcs	r3, r3
 80011f6:	3504      	adds	r5, #4
 80011f8:	425b      	negs	r3, r3
 80011fa:	08ed      	lsrs	r5, r5, #3
 80011fc:	4498      	add	r8, r3
 80011fe:	e6b4      	b.n	8000f6a <__aeabi_ddiv+0x26e>
 8001200:	42af      	cmp	r7, r5
 8001202:	d900      	bls.n	8001206 <__aeabi_ddiv+0x50a>
 8001204:	e660      	b.n	8000ec8 <__aeabi_ddiv+0x1cc>
 8001206:	4282      	cmp	r2, r0
 8001208:	d804      	bhi.n	8001214 <__aeabi_ddiv+0x518>
 800120a:	d000      	beq.n	800120e <__aeabi_ddiv+0x512>
 800120c:	e65c      	b.n	8000ec8 <__aeabi_ddiv+0x1cc>
 800120e:	42ae      	cmp	r6, r5
 8001210:	d800      	bhi.n	8001214 <__aeabi_ddiv+0x518>
 8001212:	e659      	b.n	8000ec8 <__aeabi_ddiv+0x1cc>
 8001214:	2302      	movs	r3, #2
 8001216:	425b      	negs	r3, r3
 8001218:	469c      	mov	ip, r3
 800121a:	9b00      	ldr	r3, [sp, #0]
 800121c:	44e0      	add	r8, ip
 800121e:	469c      	mov	ip, r3
 8001220:	4465      	add	r5, ip
 8001222:	429d      	cmp	r5, r3
 8001224:	419b      	sbcs	r3, r3
 8001226:	425b      	negs	r3, r3
 8001228:	191b      	adds	r3, r3, r4
 800122a:	18c0      	adds	r0, r0, r3
 800122c:	e64d      	b.n	8000eca <__aeabi_ddiv+0x1ce>
 800122e:	428a      	cmp	r2, r1
 8001230:	d800      	bhi.n	8001234 <__aeabi_ddiv+0x538>
 8001232:	e60e      	b.n	8000e52 <__aeabi_ddiv+0x156>
 8001234:	1e83      	subs	r3, r0, #2
 8001236:	1909      	adds	r1, r1, r4
 8001238:	e60b      	b.n	8000e52 <__aeabi_ddiv+0x156>
 800123a:	428a      	cmp	r2, r1
 800123c:	d800      	bhi.n	8001240 <__aeabi_ddiv+0x544>
 800123e:	e5f4      	b.n	8000e2a <__aeabi_ddiv+0x12e>
 8001240:	1e83      	subs	r3, r0, #2
 8001242:	4698      	mov	r8, r3
 8001244:	1909      	adds	r1, r1, r4
 8001246:	e5f0      	b.n	8000e2a <__aeabi_ddiv+0x12e>
 8001248:	4925      	ldr	r1, [pc, #148]	; (80012e0 <__aeabi_ddiv+0x5e4>)
 800124a:	0028      	movs	r0, r5
 800124c:	4459      	add	r1, fp
 800124e:	408d      	lsls	r5, r1
 8001250:	4642      	mov	r2, r8
 8001252:	408a      	lsls	r2, r1
 8001254:	1e69      	subs	r1, r5, #1
 8001256:	418d      	sbcs	r5, r1
 8001258:	4641      	mov	r1, r8
 800125a:	40d8      	lsrs	r0, r3
 800125c:	40d9      	lsrs	r1, r3
 800125e:	4302      	orrs	r2, r0
 8001260:	432a      	orrs	r2, r5
 8001262:	000b      	movs	r3, r1
 8001264:	0751      	lsls	r1, r2, #29
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x56e>
 8001268:	e751      	b.n	800110e <__aeabi_ddiv+0x412>
 800126a:	210f      	movs	r1, #15
 800126c:	4011      	ands	r1, r2
 800126e:	2904      	cmp	r1, #4
 8001270:	d000      	beq.n	8001274 <__aeabi_ddiv+0x578>
 8001272:	e746      	b.n	8001102 <__aeabi_ddiv+0x406>
 8001274:	e74b      	b.n	800110e <__aeabi_ddiv+0x412>
 8001276:	0005      	movs	r5, r0
 8001278:	428e      	cmp	r6, r1
 800127a:	d000      	beq.n	800127e <__aeabi_ddiv+0x582>
 800127c:	e66a      	b.n	8000f54 <__aeabi_ddiv+0x258>
 800127e:	9a00      	ldr	r2, [sp, #0]
 8001280:	4293      	cmp	r3, r2
 8001282:	d000      	beq.n	8001286 <__aeabi_ddiv+0x58a>
 8001284:	e666      	b.n	8000f54 <__aeabi_ddiv+0x258>
 8001286:	e667      	b.n	8000f58 <__aeabi_ddiv+0x25c>
 8001288:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <__aeabi_ddiv+0x5e8>)
 800128a:	445a      	add	r2, fp
 800128c:	2a00      	cmp	r2, #0
 800128e:	dc00      	bgt.n	8001292 <__aeabi_ddiv+0x596>
 8001290:	e710      	b.n	80010b4 <__aeabi_ddiv+0x3b8>
 8001292:	2301      	movs	r3, #1
 8001294:	2500      	movs	r5, #0
 8001296:	4498      	add	r8, r3
 8001298:	e667      	b.n	8000f6a <__aeabi_ddiv+0x26e>
 800129a:	075d      	lsls	r5, r3, #29
 800129c:	025b      	lsls	r3, r3, #9
 800129e:	0b1c      	lsrs	r4, r3, #12
 80012a0:	08d2      	lsrs	r2, r2, #3
 80012a2:	2300      	movs	r3, #0
 80012a4:	4315      	orrs	r5, r2
 80012a6:	e580      	b.n	8000daa <__aeabi_ddiv+0xae>
 80012a8:	9800      	ldr	r0, [sp, #0]
 80012aa:	3d02      	subs	r5, #2
 80012ac:	0042      	lsls	r2, r0, #1
 80012ae:	4282      	cmp	r2, r0
 80012b0:	41bf      	sbcs	r7, r7
 80012b2:	427f      	negs	r7, r7
 80012b4:	193c      	adds	r4, r7, r4
 80012b6:	1936      	adds	r6, r6, r4
 80012b8:	9200      	str	r2, [sp, #0]
 80012ba:	e7dd      	b.n	8001278 <__aeabi_ddiv+0x57c>
 80012bc:	2480      	movs	r4, #128	; 0x80
 80012be:	4643      	mov	r3, r8
 80012c0:	0324      	lsls	r4, r4, #12
 80012c2:	431c      	orrs	r4, r3
 80012c4:	0324      	lsls	r4, r4, #12
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__aeabi_ddiv+0x5dc>)
 80012c8:	0b24      	lsrs	r4, r4, #12
 80012ca:	e56e      	b.n	8000daa <__aeabi_ddiv+0xae>
 80012cc:	9a00      	ldr	r2, [sp, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3ea      	bcc.n	80012a8 <__aeabi_ddiv+0x5ac>
 80012d2:	0005      	movs	r5, r0
 80012d4:	e7d3      	b.n	800127e <__aeabi_ddiv+0x582>
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	000007ff 	.word	0x000007ff
 80012dc:	0000043e 	.word	0x0000043e
 80012e0:	0000041e 	.word	0x0000041e
 80012e4:	000003ff 	.word	0x000003ff

080012e8 <__eqdf2>:
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	464e      	mov	r6, r9
 80012ec:	4645      	mov	r5, r8
 80012ee:	46de      	mov	lr, fp
 80012f0:	4657      	mov	r7, sl
 80012f2:	4690      	mov	r8, r2
 80012f4:	b5e0      	push	{r5, r6, r7, lr}
 80012f6:	0017      	movs	r7, r2
 80012f8:	031a      	lsls	r2, r3, #12
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	0005      	movs	r5, r0
 80012fe:	4684      	mov	ip, r0
 8001300:	4819      	ldr	r0, [pc, #100]	; (8001368 <__eqdf2+0x80>)
 8001302:	030e      	lsls	r6, r1, #12
 8001304:	004c      	lsls	r4, r1, #1
 8001306:	4691      	mov	r9, r2
 8001308:	005a      	lsls	r2, r3, #1
 800130a:	0fdb      	lsrs	r3, r3, #31
 800130c:	469b      	mov	fp, r3
 800130e:	0b36      	lsrs	r6, r6, #12
 8001310:	0d64      	lsrs	r4, r4, #21
 8001312:	0fc9      	lsrs	r1, r1, #31
 8001314:	0d52      	lsrs	r2, r2, #21
 8001316:	4284      	cmp	r4, r0
 8001318:	d019      	beq.n	800134e <__eqdf2+0x66>
 800131a:	4282      	cmp	r2, r0
 800131c:	d010      	beq.n	8001340 <__eqdf2+0x58>
 800131e:	2001      	movs	r0, #1
 8001320:	4294      	cmp	r4, r2
 8001322:	d10e      	bne.n	8001342 <__eqdf2+0x5a>
 8001324:	454e      	cmp	r6, r9
 8001326:	d10c      	bne.n	8001342 <__eqdf2+0x5a>
 8001328:	2001      	movs	r0, #1
 800132a:	45c4      	cmp	ip, r8
 800132c:	d109      	bne.n	8001342 <__eqdf2+0x5a>
 800132e:	4559      	cmp	r1, fp
 8001330:	d017      	beq.n	8001362 <__eqdf2+0x7a>
 8001332:	2c00      	cmp	r4, #0
 8001334:	d105      	bne.n	8001342 <__eqdf2+0x5a>
 8001336:	0030      	movs	r0, r6
 8001338:	4328      	orrs	r0, r5
 800133a:	1e43      	subs	r3, r0, #1
 800133c:	4198      	sbcs	r0, r3
 800133e:	e000      	b.n	8001342 <__eqdf2+0x5a>
 8001340:	2001      	movs	r0, #1
 8001342:	bcf0      	pop	{r4, r5, r6, r7}
 8001344:	46bb      	mov	fp, r7
 8001346:	46b2      	mov	sl, r6
 8001348:	46a9      	mov	r9, r5
 800134a:	46a0      	mov	r8, r4
 800134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134e:	0033      	movs	r3, r6
 8001350:	2001      	movs	r0, #1
 8001352:	432b      	orrs	r3, r5
 8001354:	d1f5      	bne.n	8001342 <__eqdf2+0x5a>
 8001356:	42a2      	cmp	r2, r4
 8001358:	d1f3      	bne.n	8001342 <__eqdf2+0x5a>
 800135a:	464b      	mov	r3, r9
 800135c:	433b      	orrs	r3, r7
 800135e:	d1f0      	bne.n	8001342 <__eqdf2+0x5a>
 8001360:	e7e2      	b.n	8001328 <__eqdf2+0x40>
 8001362:	2000      	movs	r0, #0
 8001364:	e7ed      	b.n	8001342 <__eqdf2+0x5a>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	000007ff 	.word	0x000007ff

0800136c <__gedf2>:
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	4647      	mov	r7, r8
 8001370:	46ce      	mov	lr, r9
 8001372:	0004      	movs	r4, r0
 8001374:	0018      	movs	r0, r3
 8001376:	0016      	movs	r6, r2
 8001378:	031b      	lsls	r3, r3, #12
 800137a:	0b1b      	lsrs	r3, r3, #12
 800137c:	4d2d      	ldr	r5, [pc, #180]	; (8001434 <__gedf2+0xc8>)
 800137e:	004a      	lsls	r2, r1, #1
 8001380:	4699      	mov	r9, r3
 8001382:	b580      	push	{r7, lr}
 8001384:	0043      	lsls	r3, r0, #1
 8001386:	030f      	lsls	r7, r1, #12
 8001388:	46a4      	mov	ip, r4
 800138a:	46b0      	mov	r8, r6
 800138c:	0b3f      	lsrs	r7, r7, #12
 800138e:	0d52      	lsrs	r2, r2, #21
 8001390:	0fc9      	lsrs	r1, r1, #31
 8001392:	0d5b      	lsrs	r3, r3, #21
 8001394:	0fc0      	lsrs	r0, r0, #31
 8001396:	42aa      	cmp	r2, r5
 8001398:	d021      	beq.n	80013de <__gedf2+0x72>
 800139a:	42ab      	cmp	r3, r5
 800139c:	d013      	beq.n	80013c6 <__gedf2+0x5a>
 800139e:	2a00      	cmp	r2, #0
 80013a0:	d122      	bne.n	80013e8 <__gedf2+0x7c>
 80013a2:	433c      	orrs	r4, r7
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <__gedf2+0x42>
 80013a8:	464d      	mov	r5, r9
 80013aa:	432e      	orrs	r6, r5
 80013ac:	d022      	beq.n	80013f4 <__gedf2+0x88>
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d010      	beq.n	80013d4 <__gedf2+0x68>
 80013b2:	4281      	cmp	r1, r0
 80013b4:	d022      	beq.n	80013fc <__gedf2+0x90>
 80013b6:	2002      	movs	r0, #2
 80013b8:	3901      	subs	r1, #1
 80013ba:	4008      	ands	r0, r1
 80013bc:	3801      	subs	r0, #1
 80013be:	bcc0      	pop	{r6, r7}
 80013c0:	46b9      	mov	r9, r7
 80013c2:	46b0      	mov	r8, r6
 80013c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c6:	464d      	mov	r5, r9
 80013c8:	432e      	orrs	r6, r5
 80013ca:	d129      	bne.n	8001420 <__gedf2+0xb4>
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d1f0      	bne.n	80013b2 <__gedf2+0x46>
 80013d0:	433c      	orrs	r4, r7
 80013d2:	d1ee      	bne.n	80013b2 <__gedf2+0x46>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d1f2      	bne.n	80013be <__gedf2+0x52>
 80013d8:	2001      	movs	r0, #1
 80013da:	4240      	negs	r0, r0
 80013dc:	e7ef      	b.n	80013be <__gedf2+0x52>
 80013de:	003d      	movs	r5, r7
 80013e0:	4325      	orrs	r5, r4
 80013e2:	d11d      	bne.n	8001420 <__gedf2+0xb4>
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d0ee      	beq.n	80013c6 <__gedf2+0x5a>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1e2      	bne.n	80013b2 <__gedf2+0x46>
 80013ec:	464c      	mov	r4, r9
 80013ee:	4326      	orrs	r6, r4
 80013f0:	d1df      	bne.n	80013b2 <__gedf2+0x46>
 80013f2:	e7e0      	b.n	80013b6 <__gedf2+0x4a>
 80013f4:	2000      	movs	r0, #0
 80013f6:	2c00      	cmp	r4, #0
 80013f8:	d0e1      	beq.n	80013be <__gedf2+0x52>
 80013fa:	e7dc      	b.n	80013b6 <__gedf2+0x4a>
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dc0a      	bgt.n	8001416 <__gedf2+0xaa>
 8001400:	dbe8      	blt.n	80013d4 <__gedf2+0x68>
 8001402:	454f      	cmp	r7, r9
 8001404:	d8d7      	bhi.n	80013b6 <__gedf2+0x4a>
 8001406:	d00e      	beq.n	8001426 <__gedf2+0xba>
 8001408:	2000      	movs	r0, #0
 800140a:	454f      	cmp	r7, r9
 800140c:	d2d7      	bcs.n	80013be <__gedf2+0x52>
 800140e:	2900      	cmp	r1, #0
 8001410:	d0e2      	beq.n	80013d8 <__gedf2+0x6c>
 8001412:	0008      	movs	r0, r1
 8001414:	e7d3      	b.n	80013be <__gedf2+0x52>
 8001416:	4243      	negs	r3, r0
 8001418:	4158      	adcs	r0, r3
 800141a:	0040      	lsls	r0, r0, #1
 800141c:	3801      	subs	r0, #1
 800141e:	e7ce      	b.n	80013be <__gedf2+0x52>
 8001420:	2002      	movs	r0, #2
 8001422:	4240      	negs	r0, r0
 8001424:	e7cb      	b.n	80013be <__gedf2+0x52>
 8001426:	45c4      	cmp	ip, r8
 8001428:	d8c5      	bhi.n	80013b6 <__gedf2+0x4a>
 800142a:	2000      	movs	r0, #0
 800142c:	45c4      	cmp	ip, r8
 800142e:	d2c6      	bcs.n	80013be <__gedf2+0x52>
 8001430:	e7ed      	b.n	800140e <__gedf2+0xa2>
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	000007ff 	.word	0x000007ff

08001438 <__ledf2>:
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	4647      	mov	r7, r8
 800143c:	46ce      	mov	lr, r9
 800143e:	0004      	movs	r4, r0
 8001440:	0018      	movs	r0, r3
 8001442:	0016      	movs	r6, r2
 8001444:	031b      	lsls	r3, r3, #12
 8001446:	0b1b      	lsrs	r3, r3, #12
 8001448:	4d2c      	ldr	r5, [pc, #176]	; (80014fc <__ledf2+0xc4>)
 800144a:	004a      	lsls	r2, r1, #1
 800144c:	4699      	mov	r9, r3
 800144e:	b580      	push	{r7, lr}
 8001450:	0043      	lsls	r3, r0, #1
 8001452:	030f      	lsls	r7, r1, #12
 8001454:	46a4      	mov	ip, r4
 8001456:	46b0      	mov	r8, r6
 8001458:	0b3f      	lsrs	r7, r7, #12
 800145a:	0d52      	lsrs	r2, r2, #21
 800145c:	0fc9      	lsrs	r1, r1, #31
 800145e:	0d5b      	lsrs	r3, r3, #21
 8001460:	0fc0      	lsrs	r0, r0, #31
 8001462:	42aa      	cmp	r2, r5
 8001464:	d00d      	beq.n	8001482 <__ledf2+0x4a>
 8001466:	42ab      	cmp	r3, r5
 8001468:	d010      	beq.n	800148c <__ledf2+0x54>
 800146a:	2a00      	cmp	r2, #0
 800146c:	d127      	bne.n	80014be <__ledf2+0x86>
 800146e:	433c      	orrs	r4, r7
 8001470:	2b00      	cmp	r3, #0
 8001472:	d111      	bne.n	8001498 <__ledf2+0x60>
 8001474:	464d      	mov	r5, r9
 8001476:	432e      	orrs	r6, r5
 8001478:	d10e      	bne.n	8001498 <__ledf2+0x60>
 800147a:	2000      	movs	r0, #0
 800147c:	2c00      	cmp	r4, #0
 800147e:	d015      	beq.n	80014ac <__ledf2+0x74>
 8001480:	e00e      	b.n	80014a0 <__ledf2+0x68>
 8001482:	003d      	movs	r5, r7
 8001484:	4325      	orrs	r5, r4
 8001486:	d110      	bne.n	80014aa <__ledf2+0x72>
 8001488:	4293      	cmp	r3, r2
 800148a:	d118      	bne.n	80014be <__ledf2+0x86>
 800148c:	464d      	mov	r5, r9
 800148e:	432e      	orrs	r6, r5
 8001490:	d10b      	bne.n	80014aa <__ledf2+0x72>
 8001492:	2a00      	cmp	r2, #0
 8001494:	d102      	bne.n	800149c <__ledf2+0x64>
 8001496:	433c      	orrs	r4, r7
 8001498:	2c00      	cmp	r4, #0
 800149a:	d00b      	beq.n	80014b4 <__ledf2+0x7c>
 800149c:	4281      	cmp	r1, r0
 800149e:	d014      	beq.n	80014ca <__ledf2+0x92>
 80014a0:	2002      	movs	r0, #2
 80014a2:	3901      	subs	r1, #1
 80014a4:	4008      	ands	r0, r1
 80014a6:	3801      	subs	r0, #1
 80014a8:	e000      	b.n	80014ac <__ledf2+0x74>
 80014aa:	2002      	movs	r0, #2
 80014ac:	bcc0      	pop	{r6, r7}
 80014ae:	46b9      	mov	r9, r7
 80014b0:	46b0      	mov	r8, r6
 80014b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d1f9      	bne.n	80014ac <__ledf2+0x74>
 80014b8:	2001      	movs	r0, #1
 80014ba:	4240      	negs	r0, r0
 80014bc:	e7f6      	b.n	80014ac <__ledf2+0x74>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1ec      	bne.n	800149c <__ledf2+0x64>
 80014c2:	464c      	mov	r4, r9
 80014c4:	4326      	orrs	r6, r4
 80014c6:	d1e9      	bne.n	800149c <__ledf2+0x64>
 80014c8:	e7ea      	b.n	80014a0 <__ledf2+0x68>
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dd04      	ble.n	80014d8 <__ledf2+0xa0>
 80014ce:	4243      	negs	r3, r0
 80014d0:	4158      	adcs	r0, r3
 80014d2:	0040      	lsls	r0, r0, #1
 80014d4:	3801      	subs	r0, #1
 80014d6:	e7e9      	b.n	80014ac <__ledf2+0x74>
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbeb      	blt.n	80014b4 <__ledf2+0x7c>
 80014dc:	454f      	cmp	r7, r9
 80014de:	d8df      	bhi.n	80014a0 <__ledf2+0x68>
 80014e0:	d006      	beq.n	80014f0 <__ledf2+0xb8>
 80014e2:	2000      	movs	r0, #0
 80014e4:	454f      	cmp	r7, r9
 80014e6:	d2e1      	bcs.n	80014ac <__ledf2+0x74>
 80014e8:	2900      	cmp	r1, #0
 80014ea:	d0e5      	beq.n	80014b8 <__ledf2+0x80>
 80014ec:	0008      	movs	r0, r1
 80014ee:	e7dd      	b.n	80014ac <__ledf2+0x74>
 80014f0:	45c4      	cmp	ip, r8
 80014f2:	d8d5      	bhi.n	80014a0 <__ledf2+0x68>
 80014f4:	2000      	movs	r0, #0
 80014f6:	45c4      	cmp	ip, r8
 80014f8:	d2d8      	bcs.n	80014ac <__ledf2+0x74>
 80014fa:	e7f5      	b.n	80014e8 <__ledf2+0xb0>
 80014fc:	000007ff 	.word	0x000007ff

08001500 <__aeabi_dmul>:
 8001500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001502:	4657      	mov	r7, sl
 8001504:	464e      	mov	r6, r9
 8001506:	4645      	mov	r5, r8
 8001508:	46de      	mov	lr, fp
 800150a:	b5e0      	push	{r5, r6, r7, lr}
 800150c:	4698      	mov	r8, r3
 800150e:	030c      	lsls	r4, r1, #12
 8001510:	004b      	lsls	r3, r1, #1
 8001512:	0006      	movs	r6, r0
 8001514:	4692      	mov	sl, r2
 8001516:	b087      	sub	sp, #28
 8001518:	0b24      	lsrs	r4, r4, #12
 800151a:	0d5b      	lsrs	r3, r3, #21
 800151c:	0fcf      	lsrs	r7, r1, #31
 800151e:	2b00      	cmp	r3, #0
 8001520:	d100      	bne.n	8001524 <__aeabi_dmul+0x24>
 8001522:	e15c      	b.n	80017de <__aeabi_dmul+0x2de>
 8001524:	4ad9      	ldr	r2, [pc, #868]	; (800188c <__aeabi_dmul+0x38c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d100      	bne.n	800152c <__aeabi_dmul+0x2c>
 800152a:	e175      	b.n	8001818 <__aeabi_dmul+0x318>
 800152c:	0f42      	lsrs	r2, r0, #29
 800152e:	00e4      	lsls	r4, r4, #3
 8001530:	4314      	orrs	r4, r2
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	0412      	lsls	r2, r2, #16
 8001536:	4314      	orrs	r4, r2
 8001538:	4ad5      	ldr	r2, [pc, #852]	; (8001890 <__aeabi_dmul+0x390>)
 800153a:	00c5      	lsls	r5, r0, #3
 800153c:	4694      	mov	ip, r2
 800153e:	4463      	add	r3, ip
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2300      	movs	r3, #0
 8001544:	4699      	mov	r9, r3
 8001546:	469b      	mov	fp, r3
 8001548:	4643      	mov	r3, r8
 800154a:	4642      	mov	r2, r8
 800154c:	031e      	lsls	r6, r3, #12
 800154e:	0fd2      	lsrs	r2, r2, #31
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4650      	mov	r0, sl
 8001554:	4690      	mov	r8, r2
 8001556:	0b36      	lsrs	r6, r6, #12
 8001558:	0d5b      	lsrs	r3, r3, #21
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x5e>
 800155c:	e120      	b.n	80017a0 <__aeabi_dmul+0x2a0>
 800155e:	4acb      	ldr	r2, [pc, #812]	; (800188c <__aeabi_dmul+0x38c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d100      	bne.n	8001566 <__aeabi_dmul+0x66>
 8001564:	e162      	b.n	800182c <__aeabi_dmul+0x32c>
 8001566:	49ca      	ldr	r1, [pc, #808]	; (8001890 <__aeabi_dmul+0x390>)
 8001568:	0f42      	lsrs	r2, r0, #29
 800156a:	468c      	mov	ip, r1
 800156c:	9900      	ldr	r1, [sp, #0]
 800156e:	4463      	add	r3, ip
 8001570:	00f6      	lsls	r6, r6, #3
 8001572:	468c      	mov	ip, r1
 8001574:	4316      	orrs	r6, r2
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	449c      	add	ip, r3
 800157a:	0412      	lsls	r2, r2, #16
 800157c:	4663      	mov	r3, ip
 800157e:	4316      	orrs	r6, r2
 8001580:	00c2      	lsls	r2, r0, #3
 8001582:	2000      	movs	r0, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	9900      	ldr	r1, [sp, #0]
 8001588:	4643      	mov	r3, r8
 800158a:	3101      	adds	r1, #1
 800158c:	468c      	mov	ip, r1
 800158e:	4649      	mov	r1, r9
 8001590:	407b      	eors	r3, r7
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	290f      	cmp	r1, #15
 8001596:	d826      	bhi.n	80015e6 <__aeabi_dmul+0xe6>
 8001598:	4bbe      	ldr	r3, [pc, #760]	; (8001894 <__aeabi_dmul+0x394>)
 800159a:	0089      	lsls	r1, r1, #2
 800159c:	5859      	ldr	r1, [r3, r1]
 800159e:	468f      	mov	pc, r1
 80015a0:	4643      	mov	r3, r8
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	0034      	movs	r4, r6
 80015a6:	0015      	movs	r5, r2
 80015a8:	4683      	mov	fp, r0
 80015aa:	465b      	mov	r3, fp
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d016      	beq.n	80015de <__aeabi_dmul+0xde>
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0xb6>
 80015b4:	e203      	b.n	80019be <__aeabi_dmul+0x4be>
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d000      	beq.n	80015bc <__aeabi_dmul+0xbc>
 80015ba:	e0cd      	b.n	8001758 <__aeabi_dmul+0x258>
 80015bc:	2200      	movs	r2, #0
 80015be:	2400      	movs	r4, #0
 80015c0:	2500      	movs	r5, #0
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	0512      	lsls	r2, r2, #20
 80015c6:	4322      	orrs	r2, r4
 80015c8:	07db      	lsls	r3, r3, #31
 80015ca:	431a      	orrs	r2, r3
 80015cc:	0028      	movs	r0, r5
 80015ce:	0011      	movs	r1, r2
 80015d0:	b007      	add	sp, #28
 80015d2:	bcf0      	pop	{r4, r5, r6, r7}
 80015d4:	46bb      	mov	fp, r7
 80015d6:	46b2      	mov	sl, r6
 80015d8:	46a9      	mov	r9, r5
 80015da:	46a0      	mov	r8, r4
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015de:	2400      	movs	r4, #0
 80015e0:	2500      	movs	r5, #0
 80015e2:	4aaa      	ldr	r2, [pc, #680]	; (800188c <__aeabi_dmul+0x38c>)
 80015e4:	e7ed      	b.n	80015c2 <__aeabi_dmul+0xc2>
 80015e6:	0c28      	lsrs	r0, r5, #16
 80015e8:	042d      	lsls	r5, r5, #16
 80015ea:	0c2d      	lsrs	r5, r5, #16
 80015ec:	002b      	movs	r3, r5
 80015ee:	0c11      	lsrs	r1, r2, #16
 80015f0:	0412      	lsls	r2, r2, #16
 80015f2:	0c12      	lsrs	r2, r2, #16
 80015f4:	4353      	muls	r3, r2
 80015f6:	4698      	mov	r8, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	002f      	movs	r7, r5
 80015fc:	4343      	muls	r3, r0
 80015fe:	4699      	mov	r9, r3
 8001600:	434f      	muls	r7, r1
 8001602:	444f      	add	r7, r9
 8001604:	46bb      	mov	fp, r7
 8001606:	4647      	mov	r7, r8
 8001608:	000b      	movs	r3, r1
 800160a:	0c3f      	lsrs	r7, r7, #16
 800160c:	46ba      	mov	sl, r7
 800160e:	4343      	muls	r3, r0
 8001610:	44da      	add	sl, fp
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	45d1      	cmp	r9, sl
 8001616:	d904      	bls.n	8001622 <__aeabi_dmul+0x122>
 8001618:	2780      	movs	r7, #128	; 0x80
 800161a:	027f      	lsls	r7, r7, #9
 800161c:	46b9      	mov	r9, r7
 800161e:	444b      	add	r3, r9
 8001620:	9302      	str	r3, [sp, #8]
 8001622:	4653      	mov	r3, sl
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	469b      	mov	fp, r3
 8001628:	4653      	mov	r3, sl
 800162a:	041f      	lsls	r7, r3, #16
 800162c:	4643      	mov	r3, r8
 800162e:	041b      	lsls	r3, r3, #16
 8001630:	0c1b      	lsrs	r3, r3, #16
 8001632:	4698      	mov	r8, r3
 8001634:	003b      	movs	r3, r7
 8001636:	4443      	add	r3, r8
 8001638:	9304      	str	r3, [sp, #16]
 800163a:	0c33      	lsrs	r3, r6, #16
 800163c:	0436      	lsls	r6, r6, #16
 800163e:	0c36      	lsrs	r6, r6, #16
 8001640:	4698      	mov	r8, r3
 8001642:	0033      	movs	r3, r6
 8001644:	4343      	muls	r3, r0
 8001646:	4699      	mov	r9, r3
 8001648:	4643      	mov	r3, r8
 800164a:	4343      	muls	r3, r0
 800164c:	002f      	movs	r7, r5
 800164e:	469a      	mov	sl, r3
 8001650:	4643      	mov	r3, r8
 8001652:	4377      	muls	r7, r6
 8001654:	435d      	muls	r5, r3
 8001656:	0c38      	lsrs	r0, r7, #16
 8001658:	444d      	add	r5, r9
 800165a:	1945      	adds	r5, r0, r5
 800165c:	45a9      	cmp	r9, r5
 800165e:	d903      	bls.n	8001668 <__aeabi_dmul+0x168>
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	025b      	lsls	r3, r3, #9
 8001664:	4699      	mov	r9, r3
 8001666:	44ca      	add	sl, r9
 8001668:	043f      	lsls	r7, r7, #16
 800166a:	0c28      	lsrs	r0, r5, #16
 800166c:	0c3f      	lsrs	r7, r7, #16
 800166e:	042d      	lsls	r5, r5, #16
 8001670:	19ed      	adds	r5, r5, r7
 8001672:	0c27      	lsrs	r7, r4, #16
 8001674:	0424      	lsls	r4, r4, #16
 8001676:	0c24      	lsrs	r4, r4, #16
 8001678:	0003      	movs	r3, r0
 800167a:	0020      	movs	r0, r4
 800167c:	4350      	muls	r0, r2
 800167e:	437a      	muls	r2, r7
 8001680:	4691      	mov	r9, r2
 8001682:	003a      	movs	r2, r7
 8001684:	4453      	add	r3, sl
 8001686:	9305      	str	r3, [sp, #20]
 8001688:	0c03      	lsrs	r3, r0, #16
 800168a:	469a      	mov	sl, r3
 800168c:	434a      	muls	r2, r1
 800168e:	4361      	muls	r1, r4
 8001690:	4449      	add	r1, r9
 8001692:	4451      	add	r1, sl
 8001694:	44ab      	add	fp, r5
 8001696:	4589      	cmp	r9, r1
 8001698:	d903      	bls.n	80016a2 <__aeabi_dmul+0x1a2>
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	025b      	lsls	r3, r3, #9
 800169e:	4699      	mov	r9, r3
 80016a0:	444a      	add	r2, r9
 80016a2:	0400      	lsls	r0, r0, #16
 80016a4:	0c0b      	lsrs	r3, r1, #16
 80016a6:	0c00      	lsrs	r0, r0, #16
 80016a8:	0409      	lsls	r1, r1, #16
 80016aa:	1809      	adds	r1, r1, r0
 80016ac:	0020      	movs	r0, r4
 80016ae:	4699      	mov	r9, r3
 80016b0:	4643      	mov	r3, r8
 80016b2:	4370      	muls	r0, r6
 80016b4:	435c      	muls	r4, r3
 80016b6:	437e      	muls	r6, r7
 80016b8:	435f      	muls	r7, r3
 80016ba:	0c03      	lsrs	r3, r0, #16
 80016bc:	4698      	mov	r8, r3
 80016be:	19a4      	adds	r4, r4, r6
 80016c0:	4444      	add	r4, r8
 80016c2:	444a      	add	r2, r9
 80016c4:	9703      	str	r7, [sp, #12]
 80016c6:	42a6      	cmp	r6, r4
 80016c8:	d904      	bls.n	80016d4 <__aeabi_dmul+0x1d4>
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	025b      	lsls	r3, r3, #9
 80016ce:	4698      	mov	r8, r3
 80016d0:	4447      	add	r7, r8
 80016d2:	9703      	str	r7, [sp, #12]
 80016d4:	0423      	lsls	r3, r4, #16
 80016d6:	9e02      	ldr	r6, [sp, #8]
 80016d8:	469a      	mov	sl, r3
 80016da:	9b05      	ldr	r3, [sp, #20]
 80016dc:	445e      	add	r6, fp
 80016de:	4698      	mov	r8, r3
 80016e0:	42ae      	cmp	r6, r5
 80016e2:	41ad      	sbcs	r5, r5
 80016e4:	1876      	adds	r6, r6, r1
 80016e6:	428e      	cmp	r6, r1
 80016e8:	4189      	sbcs	r1, r1
 80016ea:	0400      	lsls	r0, r0, #16
 80016ec:	0c00      	lsrs	r0, r0, #16
 80016ee:	4450      	add	r0, sl
 80016f0:	4440      	add	r0, r8
 80016f2:	426d      	negs	r5, r5
 80016f4:	1947      	adds	r7, r0, r5
 80016f6:	46b8      	mov	r8, r7
 80016f8:	4693      	mov	fp, r2
 80016fa:	4249      	negs	r1, r1
 80016fc:	4689      	mov	r9, r1
 80016fe:	44c3      	add	fp, r8
 8001700:	44d9      	add	r9, fp
 8001702:	4298      	cmp	r0, r3
 8001704:	4180      	sbcs	r0, r0
 8001706:	45a8      	cmp	r8, r5
 8001708:	41ad      	sbcs	r5, r5
 800170a:	4593      	cmp	fp, r2
 800170c:	4192      	sbcs	r2, r2
 800170e:	4589      	cmp	r9, r1
 8001710:	4189      	sbcs	r1, r1
 8001712:	426d      	negs	r5, r5
 8001714:	4240      	negs	r0, r0
 8001716:	4328      	orrs	r0, r5
 8001718:	0c24      	lsrs	r4, r4, #16
 800171a:	4252      	negs	r2, r2
 800171c:	4249      	negs	r1, r1
 800171e:	430a      	orrs	r2, r1
 8001720:	9b03      	ldr	r3, [sp, #12]
 8001722:	1900      	adds	r0, r0, r4
 8001724:	1880      	adds	r0, r0, r2
 8001726:	18c7      	adds	r7, r0, r3
 8001728:	464b      	mov	r3, r9
 800172a:	0ddc      	lsrs	r4, r3, #23
 800172c:	9b04      	ldr	r3, [sp, #16]
 800172e:	0275      	lsls	r5, r6, #9
 8001730:	431d      	orrs	r5, r3
 8001732:	1e6a      	subs	r2, r5, #1
 8001734:	4195      	sbcs	r5, r2
 8001736:	464b      	mov	r3, r9
 8001738:	0df6      	lsrs	r6, r6, #23
 800173a:	027f      	lsls	r7, r7, #9
 800173c:	4335      	orrs	r5, r6
 800173e:	025a      	lsls	r2, r3, #9
 8001740:	433c      	orrs	r4, r7
 8001742:	4315      	orrs	r5, r2
 8001744:	01fb      	lsls	r3, r7, #7
 8001746:	d400      	bmi.n	800174a <__aeabi_dmul+0x24a>
 8001748:	e11c      	b.n	8001984 <__aeabi_dmul+0x484>
 800174a:	2101      	movs	r1, #1
 800174c:	086a      	lsrs	r2, r5, #1
 800174e:	400d      	ands	r5, r1
 8001750:	4315      	orrs	r5, r2
 8001752:	07e2      	lsls	r2, r4, #31
 8001754:	4315      	orrs	r5, r2
 8001756:	0864      	lsrs	r4, r4, #1
 8001758:	494f      	ldr	r1, [pc, #316]	; (8001898 <__aeabi_dmul+0x398>)
 800175a:	4461      	add	r1, ip
 800175c:	2900      	cmp	r1, #0
 800175e:	dc00      	bgt.n	8001762 <__aeabi_dmul+0x262>
 8001760:	e0b0      	b.n	80018c4 <__aeabi_dmul+0x3c4>
 8001762:	076b      	lsls	r3, r5, #29
 8001764:	d009      	beq.n	800177a <__aeabi_dmul+0x27a>
 8001766:	220f      	movs	r2, #15
 8001768:	402a      	ands	r2, r5
 800176a:	2a04      	cmp	r2, #4
 800176c:	d005      	beq.n	800177a <__aeabi_dmul+0x27a>
 800176e:	1d2a      	adds	r2, r5, #4
 8001770:	42aa      	cmp	r2, r5
 8001772:	41ad      	sbcs	r5, r5
 8001774:	426d      	negs	r5, r5
 8001776:	1964      	adds	r4, r4, r5
 8001778:	0015      	movs	r5, r2
 800177a:	01e3      	lsls	r3, r4, #7
 800177c:	d504      	bpl.n	8001788 <__aeabi_dmul+0x288>
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	4a46      	ldr	r2, [pc, #280]	; (800189c <__aeabi_dmul+0x39c>)
 8001782:	00c9      	lsls	r1, r1, #3
 8001784:	4014      	ands	r4, r2
 8001786:	4461      	add	r1, ip
 8001788:	4a45      	ldr	r2, [pc, #276]	; (80018a0 <__aeabi_dmul+0x3a0>)
 800178a:	4291      	cmp	r1, r2
 800178c:	dd00      	ble.n	8001790 <__aeabi_dmul+0x290>
 800178e:	e726      	b.n	80015de <__aeabi_dmul+0xde>
 8001790:	0762      	lsls	r2, r4, #29
 8001792:	08ed      	lsrs	r5, r5, #3
 8001794:	0264      	lsls	r4, r4, #9
 8001796:	0549      	lsls	r1, r1, #21
 8001798:	4315      	orrs	r5, r2
 800179a:	0b24      	lsrs	r4, r4, #12
 800179c:	0d4a      	lsrs	r2, r1, #21
 800179e:	e710      	b.n	80015c2 <__aeabi_dmul+0xc2>
 80017a0:	4652      	mov	r2, sl
 80017a2:	4332      	orrs	r2, r6
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dmul+0x2a8>
 80017a6:	e07f      	b.n	80018a8 <__aeabi_dmul+0x3a8>
 80017a8:	2e00      	cmp	r6, #0
 80017aa:	d100      	bne.n	80017ae <__aeabi_dmul+0x2ae>
 80017ac:	e0dc      	b.n	8001968 <__aeabi_dmul+0x468>
 80017ae:	0030      	movs	r0, r6
 80017b0:	f000 fd30 	bl	8002214 <__clzsi2>
 80017b4:	0002      	movs	r2, r0
 80017b6:	3a0b      	subs	r2, #11
 80017b8:	231d      	movs	r3, #29
 80017ba:	0001      	movs	r1, r0
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	4652      	mov	r2, sl
 80017c0:	3908      	subs	r1, #8
 80017c2:	40da      	lsrs	r2, r3
 80017c4:	408e      	lsls	r6, r1
 80017c6:	4316      	orrs	r6, r2
 80017c8:	4652      	mov	r2, sl
 80017ca:	408a      	lsls	r2, r1
 80017cc:	9b00      	ldr	r3, [sp, #0]
 80017ce:	4935      	ldr	r1, [pc, #212]	; (80018a4 <__aeabi_dmul+0x3a4>)
 80017d0:	1a18      	subs	r0, r3, r0
 80017d2:	0003      	movs	r3, r0
 80017d4:	468c      	mov	ip, r1
 80017d6:	4463      	add	r3, ip
 80017d8:	2000      	movs	r0, #0
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	e6d3      	b.n	8001586 <__aeabi_dmul+0x86>
 80017de:	0025      	movs	r5, r4
 80017e0:	4305      	orrs	r5, r0
 80017e2:	d04a      	beq.n	800187a <__aeabi_dmul+0x37a>
 80017e4:	2c00      	cmp	r4, #0
 80017e6:	d100      	bne.n	80017ea <__aeabi_dmul+0x2ea>
 80017e8:	e0b0      	b.n	800194c <__aeabi_dmul+0x44c>
 80017ea:	0020      	movs	r0, r4
 80017ec:	f000 fd12 	bl	8002214 <__clzsi2>
 80017f0:	0001      	movs	r1, r0
 80017f2:	0002      	movs	r2, r0
 80017f4:	390b      	subs	r1, #11
 80017f6:	231d      	movs	r3, #29
 80017f8:	0010      	movs	r0, r2
 80017fa:	1a5b      	subs	r3, r3, r1
 80017fc:	0031      	movs	r1, r6
 80017fe:	0035      	movs	r5, r6
 8001800:	3808      	subs	r0, #8
 8001802:	4084      	lsls	r4, r0
 8001804:	40d9      	lsrs	r1, r3
 8001806:	4085      	lsls	r5, r0
 8001808:	430c      	orrs	r4, r1
 800180a:	4826      	ldr	r0, [pc, #152]	; (80018a4 <__aeabi_dmul+0x3a4>)
 800180c:	1a83      	subs	r3, r0, r2
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2300      	movs	r3, #0
 8001812:	4699      	mov	r9, r3
 8001814:	469b      	mov	fp, r3
 8001816:	e697      	b.n	8001548 <__aeabi_dmul+0x48>
 8001818:	0005      	movs	r5, r0
 800181a:	4325      	orrs	r5, r4
 800181c:	d126      	bne.n	800186c <__aeabi_dmul+0x36c>
 800181e:	2208      	movs	r2, #8
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2302      	movs	r3, #2
 8001824:	2400      	movs	r4, #0
 8001826:	4691      	mov	r9, r2
 8001828:	469b      	mov	fp, r3
 800182a:	e68d      	b.n	8001548 <__aeabi_dmul+0x48>
 800182c:	4652      	mov	r2, sl
 800182e:	9b00      	ldr	r3, [sp, #0]
 8001830:	4332      	orrs	r2, r6
 8001832:	d110      	bne.n	8001856 <__aeabi_dmul+0x356>
 8001834:	4915      	ldr	r1, [pc, #84]	; (800188c <__aeabi_dmul+0x38c>)
 8001836:	2600      	movs	r6, #0
 8001838:	468c      	mov	ip, r1
 800183a:	4463      	add	r3, ip
 800183c:	4649      	mov	r1, r9
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2302      	movs	r3, #2
 8001842:	4319      	orrs	r1, r3
 8001844:	4689      	mov	r9, r1
 8001846:	2002      	movs	r0, #2
 8001848:	e69d      	b.n	8001586 <__aeabi_dmul+0x86>
 800184a:	465b      	mov	r3, fp
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d000      	beq.n	8001854 <__aeabi_dmul+0x354>
 8001852:	e6ad      	b.n	80015b0 <__aeabi_dmul+0xb0>
 8001854:	e6c3      	b.n	80015de <__aeabi_dmul+0xde>
 8001856:	4a0d      	ldr	r2, [pc, #52]	; (800188c <__aeabi_dmul+0x38c>)
 8001858:	2003      	movs	r0, #3
 800185a:	4694      	mov	ip, r2
 800185c:	4463      	add	r3, ip
 800185e:	464a      	mov	r2, r9
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2303      	movs	r3, #3
 8001864:	431a      	orrs	r2, r3
 8001866:	4691      	mov	r9, r2
 8001868:	4652      	mov	r2, sl
 800186a:	e68c      	b.n	8001586 <__aeabi_dmul+0x86>
 800186c:	220c      	movs	r2, #12
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2303      	movs	r3, #3
 8001872:	0005      	movs	r5, r0
 8001874:	4691      	mov	r9, r2
 8001876:	469b      	mov	fp, r3
 8001878:	e666      	b.n	8001548 <__aeabi_dmul+0x48>
 800187a:	2304      	movs	r3, #4
 800187c:	4699      	mov	r9, r3
 800187e:	2300      	movs	r3, #0
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	2400      	movs	r4, #0
 8001886:	469b      	mov	fp, r3
 8001888:	e65e      	b.n	8001548 <__aeabi_dmul+0x48>
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	000007ff 	.word	0x000007ff
 8001890:	fffffc01 	.word	0xfffffc01
 8001894:	08005920 	.word	0x08005920
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	fffffc0d 	.word	0xfffffc0d
 80018a8:	4649      	mov	r1, r9
 80018aa:	2301      	movs	r3, #1
 80018ac:	4319      	orrs	r1, r3
 80018ae:	4689      	mov	r9, r1
 80018b0:	2600      	movs	r6, #0
 80018b2:	2001      	movs	r0, #1
 80018b4:	e667      	b.n	8001586 <__aeabi_dmul+0x86>
 80018b6:	2300      	movs	r3, #0
 80018b8:	2480      	movs	r4, #128	; 0x80
 80018ba:	2500      	movs	r5, #0
 80018bc:	4a43      	ldr	r2, [pc, #268]	; (80019cc <__aeabi_dmul+0x4cc>)
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	e67e      	b.n	80015c2 <__aeabi_dmul+0xc2>
 80018c4:	2001      	movs	r0, #1
 80018c6:	1a40      	subs	r0, r0, r1
 80018c8:	2838      	cmp	r0, #56	; 0x38
 80018ca:	dd00      	ble.n	80018ce <__aeabi_dmul+0x3ce>
 80018cc:	e676      	b.n	80015bc <__aeabi_dmul+0xbc>
 80018ce:	281f      	cmp	r0, #31
 80018d0:	dd5b      	ble.n	800198a <__aeabi_dmul+0x48a>
 80018d2:	221f      	movs	r2, #31
 80018d4:	0023      	movs	r3, r4
 80018d6:	4252      	negs	r2, r2
 80018d8:	1a51      	subs	r1, r2, r1
 80018da:	40cb      	lsrs	r3, r1
 80018dc:	0019      	movs	r1, r3
 80018de:	2820      	cmp	r0, #32
 80018e0:	d003      	beq.n	80018ea <__aeabi_dmul+0x3ea>
 80018e2:	4a3b      	ldr	r2, [pc, #236]	; (80019d0 <__aeabi_dmul+0x4d0>)
 80018e4:	4462      	add	r2, ip
 80018e6:	4094      	lsls	r4, r2
 80018e8:	4325      	orrs	r5, r4
 80018ea:	1e6a      	subs	r2, r5, #1
 80018ec:	4195      	sbcs	r5, r2
 80018ee:	002a      	movs	r2, r5
 80018f0:	430a      	orrs	r2, r1
 80018f2:	2107      	movs	r1, #7
 80018f4:	000d      	movs	r5, r1
 80018f6:	2400      	movs	r4, #0
 80018f8:	4015      	ands	r5, r2
 80018fa:	4211      	tst	r1, r2
 80018fc:	d05b      	beq.n	80019b6 <__aeabi_dmul+0x4b6>
 80018fe:	210f      	movs	r1, #15
 8001900:	2400      	movs	r4, #0
 8001902:	4011      	ands	r1, r2
 8001904:	2904      	cmp	r1, #4
 8001906:	d053      	beq.n	80019b0 <__aeabi_dmul+0x4b0>
 8001908:	1d11      	adds	r1, r2, #4
 800190a:	4291      	cmp	r1, r2
 800190c:	4192      	sbcs	r2, r2
 800190e:	4252      	negs	r2, r2
 8001910:	18a4      	adds	r4, r4, r2
 8001912:	000a      	movs	r2, r1
 8001914:	0223      	lsls	r3, r4, #8
 8001916:	d54b      	bpl.n	80019b0 <__aeabi_dmul+0x4b0>
 8001918:	2201      	movs	r2, #1
 800191a:	2400      	movs	r4, #0
 800191c:	2500      	movs	r5, #0
 800191e:	e650      	b.n	80015c2 <__aeabi_dmul+0xc2>
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	031b      	lsls	r3, r3, #12
 8001924:	421c      	tst	r4, r3
 8001926:	d009      	beq.n	800193c <__aeabi_dmul+0x43c>
 8001928:	421e      	tst	r6, r3
 800192a:	d107      	bne.n	800193c <__aeabi_dmul+0x43c>
 800192c:	4333      	orrs	r3, r6
 800192e:	031c      	lsls	r4, r3, #12
 8001930:	4643      	mov	r3, r8
 8001932:	0015      	movs	r5, r2
 8001934:	0b24      	lsrs	r4, r4, #12
 8001936:	4a25      	ldr	r2, [pc, #148]	; (80019cc <__aeabi_dmul+0x4cc>)
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	e642      	b.n	80015c2 <__aeabi_dmul+0xc2>
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	0312      	lsls	r2, r2, #12
 8001940:	4314      	orrs	r4, r2
 8001942:	0324      	lsls	r4, r4, #12
 8001944:	4a21      	ldr	r2, [pc, #132]	; (80019cc <__aeabi_dmul+0x4cc>)
 8001946:	0b24      	lsrs	r4, r4, #12
 8001948:	9701      	str	r7, [sp, #4]
 800194a:	e63a      	b.n	80015c2 <__aeabi_dmul+0xc2>
 800194c:	f000 fc62 	bl	8002214 <__clzsi2>
 8001950:	0001      	movs	r1, r0
 8001952:	0002      	movs	r2, r0
 8001954:	3115      	adds	r1, #21
 8001956:	3220      	adds	r2, #32
 8001958:	291c      	cmp	r1, #28
 800195a:	dc00      	bgt.n	800195e <__aeabi_dmul+0x45e>
 800195c:	e74b      	b.n	80017f6 <__aeabi_dmul+0x2f6>
 800195e:	0034      	movs	r4, r6
 8001960:	3808      	subs	r0, #8
 8001962:	2500      	movs	r5, #0
 8001964:	4084      	lsls	r4, r0
 8001966:	e750      	b.n	800180a <__aeabi_dmul+0x30a>
 8001968:	f000 fc54 	bl	8002214 <__clzsi2>
 800196c:	0003      	movs	r3, r0
 800196e:	001a      	movs	r2, r3
 8001970:	3215      	adds	r2, #21
 8001972:	3020      	adds	r0, #32
 8001974:	2a1c      	cmp	r2, #28
 8001976:	dc00      	bgt.n	800197a <__aeabi_dmul+0x47a>
 8001978:	e71e      	b.n	80017b8 <__aeabi_dmul+0x2b8>
 800197a:	4656      	mov	r6, sl
 800197c:	3b08      	subs	r3, #8
 800197e:	2200      	movs	r2, #0
 8001980:	409e      	lsls	r6, r3
 8001982:	e723      	b.n	80017cc <__aeabi_dmul+0x2cc>
 8001984:	9b00      	ldr	r3, [sp, #0]
 8001986:	469c      	mov	ip, r3
 8001988:	e6e6      	b.n	8001758 <__aeabi_dmul+0x258>
 800198a:	4912      	ldr	r1, [pc, #72]	; (80019d4 <__aeabi_dmul+0x4d4>)
 800198c:	0022      	movs	r2, r4
 800198e:	4461      	add	r1, ip
 8001990:	002e      	movs	r6, r5
 8001992:	408d      	lsls	r5, r1
 8001994:	408a      	lsls	r2, r1
 8001996:	40c6      	lsrs	r6, r0
 8001998:	1e69      	subs	r1, r5, #1
 800199a:	418d      	sbcs	r5, r1
 800199c:	4332      	orrs	r2, r6
 800199e:	432a      	orrs	r2, r5
 80019a0:	40c4      	lsrs	r4, r0
 80019a2:	0753      	lsls	r3, r2, #29
 80019a4:	d0b6      	beq.n	8001914 <__aeabi_dmul+0x414>
 80019a6:	210f      	movs	r1, #15
 80019a8:	4011      	ands	r1, r2
 80019aa:	2904      	cmp	r1, #4
 80019ac:	d1ac      	bne.n	8001908 <__aeabi_dmul+0x408>
 80019ae:	e7b1      	b.n	8001914 <__aeabi_dmul+0x414>
 80019b0:	0765      	lsls	r5, r4, #29
 80019b2:	0264      	lsls	r4, r4, #9
 80019b4:	0b24      	lsrs	r4, r4, #12
 80019b6:	08d2      	lsrs	r2, r2, #3
 80019b8:	4315      	orrs	r5, r2
 80019ba:	2200      	movs	r2, #0
 80019bc:	e601      	b.n	80015c2 <__aeabi_dmul+0xc2>
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	0312      	lsls	r2, r2, #12
 80019c2:	4314      	orrs	r4, r2
 80019c4:	0324      	lsls	r4, r4, #12
 80019c6:	4a01      	ldr	r2, [pc, #4]	; (80019cc <__aeabi_dmul+0x4cc>)
 80019c8:	0b24      	lsrs	r4, r4, #12
 80019ca:	e5fa      	b.n	80015c2 <__aeabi_dmul+0xc2>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	0000043e 	.word	0x0000043e
 80019d4:	0000041e 	.word	0x0000041e

080019d8 <__aeabi_dsub>:
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	4657      	mov	r7, sl
 80019dc:	464e      	mov	r6, r9
 80019de:	4645      	mov	r5, r8
 80019e0:	46de      	mov	lr, fp
 80019e2:	b5e0      	push	{r5, r6, r7, lr}
 80019e4:	001e      	movs	r6, r3
 80019e6:	0017      	movs	r7, r2
 80019e8:	004a      	lsls	r2, r1, #1
 80019ea:	030b      	lsls	r3, r1, #12
 80019ec:	0d52      	lsrs	r2, r2, #21
 80019ee:	0a5b      	lsrs	r3, r3, #9
 80019f0:	4690      	mov	r8, r2
 80019f2:	0f42      	lsrs	r2, r0, #29
 80019f4:	431a      	orrs	r2, r3
 80019f6:	0fcd      	lsrs	r5, r1, #31
 80019f8:	4ccd      	ldr	r4, [pc, #820]	; (8001d30 <__aeabi_dsub+0x358>)
 80019fa:	0331      	lsls	r1, r6, #12
 80019fc:	00c3      	lsls	r3, r0, #3
 80019fe:	4694      	mov	ip, r2
 8001a00:	0070      	lsls	r0, r6, #1
 8001a02:	0f7a      	lsrs	r2, r7, #29
 8001a04:	0a49      	lsrs	r1, r1, #9
 8001a06:	00ff      	lsls	r7, r7, #3
 8001a08:	469a      	mov	sl, r3
 8001a0a:	46b9      	mov	r9, r7
 8001a0c:	0d40      	lsrs	r0, r0, #21
 8001a0e:	0ff6      	lsrs	r6, r6, #31
 8001a10:	4311      	orrs	r1, r2
 8001a12:	42a0      	cmp	r0, r4
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x40>
 8001a16:	e0b1      	b.n	8001b7c <__aeabi_dsub+0x1a4>
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4056      	eors	r6, r2
 8001a1c:	46b3      	mov	fp, r6
 8001a1e:	42b5      	cmp	r5, r6
 8001a20:	d100      	bne.n	8001a24 <__aeabi_dsub+0x4c>
 8001a22:	e088      	b.n	8001b36 <__aeabi_dsub+0x15e>
 8001a24:	4642      	mov	r2, r8
 8001a26:	1a12      	subs	r2, r2, r0
 8001a28:	2a00      	cmp	r2, #0
 8001a2a:	dc00      	bgt.n	8001a2e <__aeabi_dsub+0x56>
 8001a2c:	e0ae      	b.n	8001b8c <__aeabi_dsub+0x1b4>
 8001a2e:	2800      	cmp	r0, #0
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x5c>
 8001a32:	e0c1      	b.n	8001bb8 <__aeabi_dsub+0x1e0>
 8001a34:	48be      	ldr	r0, [pc, #760]	; (8001d30 <__aeabi_dsub+0x358>)
 8001a36:	4580      	cmp	r8, r0
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x64>
 8001a3a:	e151      	b.n	8001ce0 <__aeabi_dsub+0x308>
 8001a3c:	2080      	movs	r0, #128	; 0x80
 8001a3e:	0400      	lsls	r0, r0, #16
 8001a40:	4301      	orrs	r1, r0
 8001a42:	2a38      	cmp	r2, #56	; 0x38
 8001a44:	dd00      	ble.n	8001a48 <__aeabi_dsub+0x70>
 8001a46:	e17b      	b.n	8001d40 <__aeabi_dsub+0x368>
 8001a48:	2a1f      	cmp	r2, #31
 8001a4a:	dd00      	ble.n	8001a4e <__aeabi_dsub+0x76>
 8001a4c:	e1ee      	b.n	8001e2c <__aeabi_dsub+0x454>
 8001a4e:	2020      	movs	r0, #32
 8001a50:	003e      	movs	r6, r7
 8001a52:	1a80      	subs	r0, r0, r2
 8001a54:	000c      	movs	r4, r1
 8001a56:	40d6      	lsrs	r6, r2
 8001a58:	40d1      	lsrs	r1, r2
 8001a5a:	4087      	lsls	r7, r0
 8001a5c:	4662      	mov	r2, ip
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	1a52      	subs	r2, r2, r1
 8001a62:	1e78      	subs	r0, r7, #1
 8001a64:	4187      	sbcs	r7, r0
 8001a66:	4694      	mov	ip, r2
 8001a68:	4334      	orrs	r4, r6
 8001a6a:	4327      	orrs	r7, r4
 8001a6c:	1bdc      	subs	r4, r3, r7
 8001a6e:	42a3      	cmp	r3, r4
 8001a70:	419b      	sbcs	r3, r3
 8001a72:	4662      	mov	r2, ip
 8001a74:	425b      	negs	r3, r3
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	4699      	mov	r9, r3
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	d400      	bmi.n	8001a82 <__aeabi_dsub+0xaa>
 8001a80:	e118      	b.n	8001cb4 <__aeabi_dsub+0x2dc>
 8001a82:	464b      	mov	r3, r9
 8001a84:	0258      	lsls	r0, r3, #9
 8001a86:	0a43      	lsrs	r3, r0, #9
 8001a88:	4699      	mov	r9, r3
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dsub+0xba>
 8001a90:	e137      	b.n	8001d02 <__aeabi_dsub+0x32a>
 8001a92:	4648      	mov	r0, r9
 8001a94:	f000 fbbe 	bl	8002214 <__clzsi2>
 8001a98:	0001      	movs	r1, r0
 8001a9a:	3908      	subs	r1, #8
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	0022      	movs	r2, r4
 8001aa0:	4648      	mov	r0, r9
 8001aa2:	1a5b      	subs	r3, r3, r1
 8001aa4:	40da      	lsrs	r2, r3
 8001aa6:	4088      	lsls	r0, r1
 8001aa8:	408c      	lsls	r4, r1
 8001aaa:	4643      	mov	r3, r8
 8001aac:	4310      	orrs	r0, r2
 8001aae:	4588      	cmp	r8, r1
 8001ab0:	dd00      	ble.n	8001ab4 <__aeabi_dsub+0xdc>
 8001ab2:	e136      	b.n	8001d22 <__aeabi_dsub+0x34a>
 8001ab4:	1ac9      	subs	r1, r1, r3
 8001ab6:	1c4b      	adds	r3, r1, #1
 8001ab8:	2b1f      	cmp	r3, #31
 8001aba:	dd00      	ble.n	8001abe <__aeabi_dsub+0xe6>
 8001abc:	e0ea      	b.n	8001c94 <__aeabi_dsub+0x2bc>
 8001abe:	2220      	movs	r2, #32
 8001ac0:	0026      	movs	r6, r4
 8001ac2:	1ad2      	subs	r2, r2, r3
 8001ac4:	0001      	movs	r1, r0
 8001ac6:	4094      	lsls	r4, r2
 8001ac8:	40de      	lsrs	r6, r3
 8001aca:	40d8      	lsrs	r0, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	4091      	lsls	r1, r2
 8001ad0:	1e62      	subs	r2, r4, #1
 8001ad2:	4194      	sbcs	r4, r2
 8001ad4:	4681      	mov	r9, r0
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	4331      	orrs	r1, r6
 8001ada:	430c      	orrs	r4, r1
 8001adc:	0763      	lsls	r3, r4, #29
 8001ade:	d009      	beq.n	8001af4 <__aeabi_dsub+0x11c>
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	4023      	ands	r3, r4
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d005      	beq.n	8001af4 <__aeabi_dsub+0x11c>
 8001ae8:	1d23      	adds	r3, r4, #4
 8001aea:	42a3      	cmp	r3, r4
 8001aec:	41a4      	sbcs	r4, r4
 8001aee:	4264      	negs	r4, r4
 8001af0:	44a1      	add	r9, r4
 8001af2:	001c      	movs	r4, r3
 8001af4:	464b      	mov	r3, r9
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	d400      	bmi.n	8001afc <__aeabi_dsub+0x124>
 8001afa:	e0de      	b.n	8001cba <__aeabi_dsub+0x2e2>
 8001afc:	4641      	mov	r1, r8
 8001afe:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <__aeabi_dsub+0x358>)
 8001b00:	3101      	adds	r1, #1
 8001b02:	4299      	cmp	r1, r3
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dsub+0x130>
 8001b06:	e0e7      	b.n	8001cd8 <__aeabi_dsub+0x300>
 8001b08:	464b      	mov	r3, r9
 8001b0a:	488a      	ldr	r0, [pc, #552]	; (8001d34 <__aeabi_dsub+0x35c>)
 8001b0c:	08e4      	lsrs	r4, r4, #3
 8001b0e:	4003      	ands	r3, r0
 8001b10:	0018      	movs	r0, r3
 8001b12:	0549      	lsls	r1, r1, #21
 8001b14:	075b      	lsls	r3, r3, #29
 8001b16:	0240      	lsls	r0, r0, #9
 8001b18:	4323      	orrs	r3, r4
 8001b1a:	0d4a      	lsrs	r2, r1, #21
 8001b1c:	0b04      	lsrs	r4, r0, #12
 8001b1e:	0512      	lsls	r2, r2, #20
 8001b20:	07ed      	lsls	r5, r5, #31
 8001b22:	4322      	orrs	r2, r4
 8001b24:	432a      	orrs	r2, r5
 8001b26:	0018      	movs	r0, r3
 8001b28:	0011      	movs	r1, r2
 8001b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b2c:	46bb      	mov	fp, r7
 8001b2e:	46b2      	mov	sl, r6
 8001b30:	46a9      	mov	r9, r5
 8001b32:	46a0      	mov	r8, r4
 8001b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b36:	4642      	mov	r2, r8
 8001b38:	1a12      	subs	r2, r2, r0
 8001b3a:	2a00      	cmp	r2, #0
 8001b3c:	dd52      	ble.n	8001be4 <__aeabi_dsub+0x20c>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d100      	bne.n	8001b44 <__aeabi_dsub+0x16c>
 8001b42:	e09c      	b.n	8001c7e <__aeabi_dsub+0x2a6>
 8001b44:	45a0      	cmp	r8, r4
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dsub+0x172>
 8001b48:	e0ca      	b.n	8001ce0 <__aeabi_dsub+0x308>
 8001b4a:	2080      	movs	r0, #128	; 0x80
 8001b4c:	0400      	lsls	r0, r0, #16
 8001b4e:	4301      	orrs	r1, r0
 8001b50:	2a38      	cmp	r2, #56	; 0x38
 8001b52:	dd00      	ble.n	8001b56 <__aeabi_dsub+0x17e>
 8001b54:	e149      	b.n	8001dea <__aeabi_dsub+0x412>
 8001b56:	2a1f      	cmp	r2, #31
 8001b58:	dc00      	bgt.n	8001b5c <__aeabi_dsub+0x184>
 8001b5a:	e197      	b.n	8001e8c <__aeabi_dsub+0x4b4>
 8001b5c:	0010      	movs	r0, r2
 8001b5e:	000e      	movs	r6, r1
 8001b60:	3820      	subs	r0, #32
 8001b62:	40c6      	lsrs	r6, r0
 8001b64:	2a20      	cmp	r2, #32
 8001b66:	d004      	beq.n	8001b72 <__aeabi_dsub+0x19a>
 8001b68:	2040      	movs	r0, #64	; 0x40
 8001b6a:	1a82      	subs	r2, r0, r2
 8001b6c:	4091      	lsls	r1, r2
 8001b6e:	430f      	orrs	r7, r1
 8001b70:	46b9      	mov	r9, r7
 8001b72:	464c      	mov	r4, r9
 8001b74:	1e62      	subs	r2, r4, #1
 8001b76:	4194      	sbcs	r4, r2
 8001b78:	4334      	orrs	r4, r6
 8001b7a:	e13a      	b.n	8001df2 <__aeabi_dsub+0x41a>
 8001b7c:	000a      	movs	r2, r1
 8001b7e:	433a      	orrs	r2, r7
 8001b80:	d028      	beq.n	8001bd4 <__aeabi_dsub+0x1fc>
 8001b82:	46b3      	mov	fp, r6
 8001b84:	42b5      	cmp	r5, r6
 8001b86:	d02b      	beq.n	8001be0 <__aeabi_dsub+0x208>
 8001b88:	4a6b      	ldr	r2, [pc, #428]	; (8001d38 <__aeabi_dsub+0x360>)
 8001b8a:	4442      	add	r2, r8
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	d05d      	beq.n	8001c4c <__aeabi_dsub+0x274>
 8001b90:	4642      	mov	r2, r8
 8001b92:	4644      	mov	r4, r8
 8001b94:	1a82      	subs	r2, r0, r2
 8001b96:	2c00      	cmp	r4, #0
 8001b98:	d000      	beq.n	8001b9c <__aeabi_dsub+0x1c4>
 8001b9a:	e0f5      	b.n	8001d88 <__aeabi_dsub+0x3b0>
 8001b9c:	4665      	mov	r5, ip
 8001b9e:	431d      	orrs	r5, r3
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1cc>
 8001ba2:	e19c      	b.n	8001ede <__aeabi_dsub+0x506>
 8001ba4:	1e55      	subs	r5, r2, #1
 8001ba6:	2a01      	cmp	r2, #1
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x1d4>
 8001baa:	e1fb      	b.n	8001fa4 <__aeabi_dsub+0x5cc>
 8001bac:	4c60      	ldr	r4, [pc, #384]	; (8001d30 <__aeabi_dsub+0x358>)
 8001bae:	42a2      	cmp	r2, r4
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x1dc>
 8001bb2:	e1bd      	b.n	8001f30 <__aeabi_dsub+0x558>
 8001bb4:	002a      	movs	r2, r5
 8001bb6:	e0f0      	b.n	8001d9a <__aeabi_dsub+0x3c2>
 8001bb8:	0008      	movs	r0, r1
 8001bba:	4338      	orrs	r0, r7
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x1e8>
 8001bbe:	e0c3      	b.n	8001d48 <__aeabi_dsub+0x370>
 8001bc0:	1e50      	subs	r0, r2, #1
 8001bc2:	2a01      	cmp	r2, #1
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x1f0>
 8001bc6:	e1a8      	b.n	8001f1a <__aeabi_dsub+0x542>
 8001bc8:	4c59      	ldr	r4, [pc, #356]	; (8001d30 <__aeabi_dsub+0x358>)
 8001bca:	42a2      	cmp	r2, r4
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x1f8>
 8001bce:	e087      	b.n	8001ce0 <__aeabi_dsub+0x308>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	e736      	b.n	8001a42 <__aeabi_dsub+0x6a>
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4056      	eors	r6, r2
 8001bd8:	46b3      	mov	fp, r6
 8001bda:	42b5      	cmp	r5, r6
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_dsub+0x208>
 8001bde:	e721      	b.n	8001a24 <__aeabi_dsub+0x4c>
 8001be0:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <__aeabi_dsub+0x360>)
 8001be2:	4442      	add	r2, r8
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x212>
 8001be8:	e0b5      	b.n	8001d56 <__aeabi_dsub+0x37e>
 8001bea:	4642      	mov	r2, r8
 8001bec:	4644      	mov	r4, r8
 8001bee:	1a82      	subs	r2, r0, r2
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x21e>
 8001bf4:	e138      	b.n	8001e68 <__aeabi_dsub+0x490>
 8001bf6:	4e4e      	ldr	r6, [pc, #312]	; (8001d30 <__aeabi_dsub+0x358>)
 8001bf8:	42b0      	cmp	r0, r6
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x226>
 8001bfc:	e1de      	b.n	8001fbc <__aeabi_dsub+0x5e4>
 8001bfe:	2680      	movs	r6, #128	; 0x80
 8001c00:	4664      	mov	r4, ip
 8001c02:	0436      	lsls	r6, r6, #16
 8001c04:	4334      	orrs	r4, r6
 8001c06:	46a4      	mov	ip, r4
 8001c08:	2a38      	cmp	r2, #56	; 0x38
 8001c0a:	dd00      	ble.n	8001c0e <__aeabi_dsub+0x236>
 8001c0c:	e196      	b.n	8001f3c <__aeabi_dsub+0x564>
 8001c0e:	2a1f      	cmp	r2, #31
 8001c10:	dd00      	ble.n	8001c14 <__aeabi_dsub+0x23c>
 8001c12:	e224      	b.n	800205e <__aeabi_dsub+0x686>
 8001c14:	2620      	movs	r6, #32
 8001c16:	1ab4      	subs	r4, r6, r2
 8001c18:	46a2      	mov	sl, r4
 8001c1a:	4664      	mov	r4, ip
 8001c1c:	4656      	mov	r6, sl
 8001c1e:	40b4      	lsls	r4, r6
 8001c20:	46a1      	mov	r9, r4
 8001c22:	001c      	movs	r4, r3
 8001c24:	464e      	mov	r6, r9
 8001c26:	40d4      	lsrs	r4, r2
 8001c28:	4326      	orrs	r6, r4
 8001c2a:	0034      	movs	r4, r6
 8001c2c:	4656      	mov	r6, sl
 8001c2e:	40b3      	lsls	r3, r6
 8001c30:	1e5e      	subs	r6, r3, #1
 8001c32:	41b3      	sbcs	r3, r6
 8001c34:	431c      	orrs	r4, r3
 8001c36:	4663      	mov	r3, ip
 8001c38:	40d3      	lsrs	r3, r2
 8001c3a:	18c9      	adds	r1, r1, r3
 8001c3c:	19e4      	adds	r4, r4, r7
 8001c3e:	42bc      	cmp	r4, r7
 8001c40:	41bf      	sbcs	r7, r7
 8001c42:	427f      	negs	r7, r7
 8001c44:	46b9      	mov	r9, r7
 8001c46:	4680      	mov	r8, r0
 8001c48:	4489      	add	r9, r1
 8001c4a:	e0d8      	b.n	8001dfe <__aeabi_dsub+0x426>
 8001c4c:	4640      	mov	r0, r8
 8001c4e:	4c3b      	ldr	r4, [pc, #236]	; (8001d3c <__aeabi_dsub+0x364>)
 8001c50:	3001      	adds	r0, #1
 8001c52:	4220      	tst	r0, r4
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x280>
 8001c56:	e0b4      	b.n	8001dc2 <__aeabi_dsub+0x3ea>
 8001c58:	4640      	mov	r0, r8
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_dsub+0x288>
 8001c5e:	e144      	b.n	8001eea <__aeabi_dsub+0x512>
 8001c60:	4660      	mov	r0, ip
 8001c62:	4318      	orrs	r0, r3
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x290>
 8001c66:	e190      	b.n	8001f8a <__aeabi_dsub+0x5b2>
 8001c68:	0008      	movs	r0, r1
 8001c6a:	4338      	orrs	r0, r7
 8001c6c:	d000      	beq.n	8001c70 <__aeabi_dsub+0x298>
 8001c6e:	e1aa      	b.n	8001fc6 <__aeabi_dsub+0x5ee>
 8001c70:	4661      	mov	r1, ip
 8001c72:	08db      	lsrs	r3, r3, #3
 8001c74:	0749      	lsls	r1, r1, #29
 8001c76:	430b      	orrs	r3, r1
 8001c78:	4661      	mov	r1, ip
 8001c7a:	08cc      	lsrs	r4, r1, #3
 8001c7c:	e027      	b.n	8001cce <__aeabi_dsub+0x2f6>
 8001c7e:	0008      	movs	r0, r1
 8001c80:	4338      	orrs	r0, r7
 8001c82:	d061      	beq.n	8001d48 <__aeabi_dsub+0x370>
 8001c84:	1e50      	subs	r0, r2, #1
 8001c86:	2a01      	cmp	r2, #1
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x2b4>
 8001c8a:	e139      	b.n	8001f00 <__aeabi_dsub+0x528>
 8001c8c:	42a2      	cmp	r2, r4
 8001c8e:	d027      	beq.n	8001ce0 <__aeabi_dsub+0x308>
 8001c90:	0002      	movs	r2, r0
 8001c92:	e75d      	b.n	8001b50 <__aeabi_dsub+0x178>
 8001c94:	0002      	movs	r2, r0
 8001c96:	391f      	subs	r1, #31
 8001c98:	40ca      	lsrs	r2, r1
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d003      	beq.n	8001ca8 <__aeabi_dsub+0x2d0>
 8001ca0:	2240      	movs	r2, #64	; 0x40
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4098      	lsls	r0, r3
 8001ca6:	4304      	orrs	r4, r0
 8001ca8:	1e63      	subs	r3, r4, #1
 8001caa:	419c      	sbcs	r4, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	4699      	mov	r9, r3
 8001cb0:	4698      	mov	r8, r3
 8001cb2:	430c      	orrs	r4, r1
 8001cb4:	0763      	lsls	r3, r4, #29
 8001cb6:	d000      	beq.n	8001cba <__aeabi_dsub+0x2e2>
 8001cb8:	e712      	b.n	8001ae0 <__aeabi_dsub+0x108>
 8001cba:	464b      	mov	r3, r9
 8001cbc:	464a      	mov	r2, r9
 8001cbe:	08e4      	lsrs	r4, r4, #3
 8001cc0:	075b      	lsls	r3, r3, #29
 8001cc2:	4323      	orrs	r3, r4
 8001cc4:	08d4      	lsrs	r4, r2, #3
 8001cc6:	4642      	mov	r2, r8
 8001cc8:	4919      	ldr	r1, [pc, #100]	; (8001d30 <__aeabi_dsub+0x358>)
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d00e      	beq.n	8001cec <__aeabi_dsub+0x314>
 8001cce:	0324      	lsls	r4, r4, #12
 8001cd0:	0552      	lsls	r2, r2, #21
 8001cd2:	0b24      	lsrs	r4, r4, #12
 8001cd4:	0d52      	lsrs	r2, r2, #21
 8001cd6:	e722      	b.n	8001b1e <__aeabi_dsub+0x146>
 8001cd8:	000a      	movs	r2, r1
 8001cda:	2400      	movs	r4, #0
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e71e      	b.n	8001b1e <__aeabi_dsub+0x146>
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	4662      	mov	r2, ip
 8001ce4:	0752      	lsls	r2, r2, #29
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	4662      	mov	r2, ip
 8001cea:	08d4      	lsrs	r4, r2, #3
 8001cec:	001a      	movs	r2, r3
 8001cee:	4322      	orrs	r2, r4
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dsub+0x31c>
 8001cf2:	e1fc      	b.n	80020ee <__aeabi_dsub+0x716>
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	0312      	lsls	r2, r2, #12
 8001cf8:	4314      	orrs	r4, r2
 8001cfa:	0324      	lsls	r4, r4, #12
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <__aeabi_dsub+0x358>)
 8001cfe:	0b24      	lsrs	r4, r4, #12
 8001d00:	e70d      	b.n	8001b1e <__aeabi_dsub+0x146>
 8001d02:	0020      	movs	r0, r4
 8001d04:	f000 fa86 	bl	8002214 <__clzsi2>
 8001d08:	0001      	movs	r1, r0
 8001d0a:	3118      	adds	r1, #24
 8001d0c:	291f      	cmp	r1, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x33a>
 8001d10:	e6c4      	b.n	8001a9c <__aeabi_dsub+0xc4>
 8001d12:	3808      	subs	r0, #8
 8001d14:	4084      	lsls	r4, r0
 8001d16:	4643      	mov	r3, r8
 8001d18:	0020      	movs	r0, r4
 8001d1a:	2400      	movs	r4, #0
 8001d1c:	4588      	cmp	r8, r1
 8001d1e:	dc00      	bgt.n	8001d22 <__aeabi_dsub+0x34a>
 8001d20:	e6c8      	b.n	8001ab4 <__aeabi_dsub+0xdc>
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <__aeabi_dsub+0x35c>)
 8001d24:	1a5b      	subs	r3, r3, r1
 8001d26:	4010      	ands	r0, r2
 8001d28:	4698      	mov	r8, r3
 8001d2a:	4681      	mov	r9, r0
 8001d2c:	e6d6      	b.n	8001adc <__aeabi_dsub+0x104>
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	000007ff 	.word	0x000007ff
 8001d34:	ff7fffff 	.word	0xff7fffff
 8001d38:	fffff801 	.word	0xfffff801
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	430f      	orrs	r7, r1
 8001d42:	1e7a      	subs	r2, r7, #1
 8001d44:	4197      	sbcs	r7, r2
 8001d46:	e691      	b.n	8001a6c <__aeabi_dsub+0x94>
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	0749      	lsls	r1, r1, #29
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	4661      	mov	r1, ip
 8001d52:	08cc      	lsrs	r4, r1, #3
 8001d54:	e7b8      	b.n	8001cc8 <__aeabi_dsub+0x2f0>
 8001d56:	4640      	mov	r0, r8
 8001d58:	4cd3      	ldr	r4, [pc, #844]	; (80020a8 <__aeabi_dsub+0x6d0>)
 8001d5a:	3001      	adds	r0, #1
 8001d5c:	4220      	tst	r0, r4
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x38a>
 8001d60:	e0a2      	b.n	8001ea8 <__aeabi_dsub+0x4d0>
 8001d62:	4640      	mov	r0, r8
 8001d64:	2800      	cmp	r0, #0
 8001d66:	d000      	beq.n	8001d6a <__aeabi_dsub+0x392>
 8001d68:	e101      	b.n	8001f6e <__aeabi_dsub+0x596>
 8001d6a:	4660      	mov	r0, ip
 8001d6c:	4318      	orrs	r0, r3
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x39a>
 8001d70:	e15e      	b.n	8002030 <__aeabi_dsub+0x658>
 8001d72:	0008      	movs	r0, r1
 8001d74:	4338      	orrs	r0, r7
 8001d76:	d000      	beq.n	8001d7a <__aeabi_dsub+0x3a2>
 8001d78:	e15f      	b.n	800203a <__aeabi_dsub+0x662>
 8001d7a:	4661      	mov	r1, ip
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	0749      	lsls	r1, r1, #29
 8001d80:	430b      	orrs	r3, r1
 8001d82:	4661      	mov	r1, ip
 8001d84:	08cc      	lsrs	r4, r1, #3
 8001d86:	e7a2      	b.n	8001cce <__aeabi_dsub+0x2f6>
 8001d88:	4dc8      	ldr	r5, [pc, #800]	; (80020ac <__aeabi_dsub+0x6d4>)
 8001d8a:	42a8      	cmp	r0, r5
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dsub+0x3b8>
 8001d8e:	e0cf      	b.n	8001f30 <__aeabi_dsub+0x558>
 8001d90:	2580      	movs	r5, #128	; 0x80
 8001d92:	4664      	mov	r4, ip
 8001d94:	042d      	lsls	r5, r5, #16
 8001d96:	432c      	orrs	r4, r5
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	2a38      	cmp	r2, #56	; 0x38
 8001d9c:	dc56      	bgt.n	8001e4c <__aeabi_dsub+0x474>
 8001d9e:	2a1f      	cmp	r2, #31
 8001da0:	dd00      	ble.n	8001da4 <__aeabi_dsub+0x3cc>
 8001da2:	e0d1      	b.n	8001f48 <__aeabi_dsub+0x570>
 8001da4:	2520      	movs	r5, #32
 8001da6:	001e      	movs	r6, r3
 8001da8:	1aad      	subs	r5, r5, r2
 8001daa:	4664      	mov	r4, ip
 8001dac:	40ab      	lsls	r3, r5
 8001dae:	40ac      	lsls	r4, r5
 8001db0:	40d6      	lsrs	r6, r2
 8001db2:	1e5d      	subs	r5, r3, #1
 8001db4:	41ab      	sbcs	r3, r5
 8001db6:	4334      	orrs	r4, r6
 8001db8:	4323      	orrs	r3, r4
 8001dba:	4664      	mov	r4, ip
 8001dbc:	40d4      	lsrs	r4, r2
 8001dbe:	1b09      	subs	r1, r1, r4
 8001dc0:	e049      	b.n	8001e56 <__aeabi_dsub+0x47e>
 8001dc2:	4660      	mov	r0, ip
 8001dc4:	1bdc      	subs	r4, r3, r7
 8001dc6:	1a46      	subs	r6, r0, r1
 8001dc8:	42a3      	cmp	r3, r4
 8001dca:	4180      	sbcs	r0, r0
 8001dcc:	4240      	negs	r0, r0
 8001dce:	4681      	mov	r9, r0
 8001dd0:	0030      	movs	r0, r6
 8001dd2:	464e      	mov	r6, r9
 8001dd4:	1b80      	subs	r0, r0, r6
 8001dd6:	4681      	mov	r9, r0
 8001dd8:	0200      	lsls	r0, r0, #8
 8001dda:	d476      	bmi.n	8001eca <__aeabi_dsub+0x4f2>
 8001ddc:	464b      	mov	r3, r9
 8001dde:	4323      	orrs	r3, r4
 8001de0:	d000      	beq.n	8001de4 <__aeabi_dsub+0x40c>
 8001de2:	e652      	b.n	8001a8a <__aeabi_dsub+0xb2>
 8001de4:	2400      	movs	r4, #0
 8001de6:	2500      	movs	r5, #0
 8001de8:	e771      	b.n	8001cce <__aeabi_dsub+0x2f6>
 8001dea:	4339      	orrs	r1, r7
 8001dec:	000c      	movs	r4, r1
 8001dee:	1e62      	subs	r2, r4, #1
 8001df0:	4194      	sbcs	r4, r2
 8001df2:	18e4      	adds	r4, r4, r3
 8001df4:	429c      	cmp	r4, r3
 8001df6:	419b      	sbcs	r3, r3
 8001df8:	425b      	negs	r3, r3
 8001dfa:	4463      	add	r3, ip
 8001dfc:	4699      	mov	r9, r3
 8001dfe:	464b      	mov	r3, r9
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	d400      	bmi.n	8001e06 <__aeabi_dsub+0x42e>
 8001e04:	e756      	b.n	8001cb4 <__aeabi_dsub+0x2dc>
 8001e06:	2301      	movs	r3, #1
 8001e08:	469c      	mov	ip, r3
 8001e0a:	4ba8      	ldr	r3, [pc, #672]	; (80020ac <__aeabi_dsub+0x6d4>)
 8001e0c:	44e0      	add	r8, ip
 8001e0e:	4598      	cmp	r8, r3
 8001e10:	d038      	beq.n	8001e84 <__aeabi_dsub+0x4ac>
 8001e12:	464b      	mov	r3, r9
 8001e14:	48a6      	ldr	r0, [pc, #664]	; (80020b0 <__aeabi_dsub+0x6d8>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	4003      	ands	r3, r0
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	0863      	lsrs	r3, r4, #1
 8001e1e:	4014      	ands	r4, r2
 8001e20:	431c      	orrs	r4, r3
 8001e22:	07c3      	lsls	r3, r0, #31
 8001e24:	431c      	orrs	r4, r3
 8001e26:	0843      	lsrs	r3, r0, #1
 8001e28:	4699      	mov	r9, r3
 8001e2a:	e657      	b.n	8001adc <__aeabi_dsub+0x104>
 8001e2c:	0010      	movs	r0, r2
 8001e2e:	000e      	movs	r6, r1
 8001e30:	3820      	subs	r0, #32
 8001e32:	40c6      	lsrs	r6, r0
 8001e34:	2a20      	cmp	r2, #32
 8001e36:	d004      	beq.n	8001e42 <__aeabi_dsub+0x46a>
 8001e38:	2040      	movs	r0, #64	; 0x40
 8001e3a:	1a82      	subs	r2, r0, r2
 8001e3c:	4091      	lsls	r1, r2
 8001e3e:	430f      	orrs	r7, r1
 8001e40:	46b9      	mov	r9, r7
 8001e42:	464f      	mov	r7, r9
 8001e44:	1e7a      	subs	r2, r7, #1
 8001e46:	4197      	sbcs	r7, r2
 8001e48:	4337      	orrs	r7, r6
 8001e4a:	e60f      	b.n	8001a6c <__aeabi_dsub+0x94>
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	4193      	sbcs	r3, r2
 8001e56:	1afc      	subs	r4, r7, r3
 8001e58:	42a7      	cmp	r7, r4
 8001e5a:	41bf      	sbcs	r7, r7
 8001e5c:	427f      	negs	r7, r7
 8001e5e:	1bcb      	subs	r3, r1, r7
 8001e60:	4699      	mov	r9, r3
 8001e62:	465d      	mov	r5, fp
 8001e64:	4680      	mov	r8, r0
 8001e66:	e608      	b.n	8001a7a <__aeabi_dsub+0xa2>
 8001e68:	4666      	mov	r6, ip
 8001e6a:	431e      	orrs	r6, r3
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x498>
 8001e6e:	e0be      	b.n	8001fee <__aeabi_dsub+0x616>
 8001e70:	1e56      	subs	r6, r2, #1
 8001e72:	2a01      	cmp	r2, #1
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x4a0>
 8001e76:	e109      	b.n	800208c <__aeabi_dsub+0x6b4>
 8001e78:	4c8c      	ldr	r4, [pc, #560]	; (80020ac <__aeabi_dsub+0x6d4>)
 8001e7a:	42a2      	cmp	r2, r4
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_dsub+0x4a8>
 8001e7e:	e119      	b.n	80020b4 <__aeabi_dsub+0x6dc>
 8001e80:	0032      	movs	r2, r6
 8001e82:	e6c1      	b.n	8001c08 <__aeabi_dsub+0x230>
 8001e84:	4642      	mov	r2, r8
 8001e86:	2400      	movs	r4, #0
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e648      	b.n	8001b1e <__aeabi_dsub+0x146>
 8001e8c:	2020      	movs	r0, #32
 8001e8e:	000c      	movs	r4, r1
 8001e90:	1a80      	subs	r0, r0, r2
 8001e92:	003e      	movs	r6, r7
 8001e94:	4087      	lsls	r7, r0
 8001e96:	4084      	lsls	r4, r0
 8001e98:	40d6      	lsrs	r6, r2
 8001e9a:	1e78      	subs	r0, r7, #1
 8001e9c:	4187      	sbcs	r7, r0
 8001e9e:	40d1      	lsrs	r1, r2
 8001ea0:	4334      	orrs	r4, r6
 8001ea2:	433c      	orrs	r4, r7
 8001ea4:	448c      	add	ip, r1
 8001ea6:	e7a4      	b.n	8001df2 <__aeabi_dsub+0x41a>
 8001ea8:	4a80      	ldr	r2, [pc, #512]	; (80020ac <__aeabi_dsub+0x6d4>)
 8001eaa:	4290      	cmp	r0, r2
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x4d8>
 8001eae:	e0e9      	b.n	8002084 <__aeabi_dsub+0x6ac>
 8001eb0:	19df      	adds	r7, r3, r7
 8001eb2:	429f      	cmp	r7, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	4461      	add	r1, ip
 8001eb8:	425b      	negs	r3, r3
 8001eba:	18c9      	adds	r1, r1, r3
 8001ebc:	07cc      	lsls	r4, r1, #31
 8001ebe:	087f      	lsrs	r7, r7, #1
 8001ec0:	084b      	lsrs	r3, r1, #1
 8001ec2:	4699      	mov	r9, r3
 8001ec4:	4680      	mov	r8, r0
 8001ec6:	433c      	orrs	r4, r7
 8001ec8:	e6f4      	b.n	8001cb4 <__aeabi_dsub+0x2dc>
 8001eca:	1afc      	subs	r4, r7, r3
 8001ecc:	42a7      	cmp	r7, r4
 8001ece:	41bf      	sbcs	r7, r7
 8001ed0:	4663      	mov	r3, ip
 8001ed2:	427f      	negs	r7, r7
 8001ed4:	1ac9      	subs	r1, r1, r3
 8001ed6:	1bcb      	subs	r3, r1, r7
 8001ed8:	4699      	mov	r9, r3
 8001eda:	465d      	mov	r5, fp
 8001edc:	e5d5      	b.n	8001a8a <__aeabi_dsub+0xb2>
 8001ede:	08ff      	lsrs	r7, r7, #3
 8001ee0:	074b      	lsls	r3, r1, #29
 8001ee2:	465d      	mov	r5, fp
 8001ee4:	433b      	orrs	r3, r7
 8001ee6:	08cc      	lsrs	r4, r1, #3
 8001ee8:	e6ee      	b.n	8001cc8 <__aeabi_dsub+0x2f0>
 8001eea:	4662      	mov	r2, ip
 8001eec:	431a      	orrs	r2, r3
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x51a>
 8001ef0:	e082      	b.n	8001ff8 <__aeabi_dsub+0x620>
 8001ef2:	000b      	movs	r3, r1
 8001ef4:	433b      	orrs	r3, r7
 8001ef6:	d11b      	bne.n	8001f30 <__aeabi_dsub+0x558>
 8001ef8:	2480      	movs	r4, #128	; 0x80
 8001efa:	2500      	movs	r5, #0
 8001efc:	0324      	lsls	r4, r4, #12
 8001efe:	e6f9      	b.n	8001cf4 <__aeabi_dsub+0x31c>
 8001f00:	19dc      	adds	r4, r3, r7
 8001f02:	429c      	cmp	r4, r3
 8001f04:	419b      	sbcs	r3, r3
 8001f06:	4461      	add	r1, ip
 8001f08:	4689      	mov	r9, r1
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	4499      	add	r9, r3
 8001f0e:	464b      	mov	r3, r9
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	d444      	bmi.n	8001f9e <__aeabi_dsub+0x5c6>
 8001f14:	2301      	movs	r3, #1
 8001f16:	4698      	mov	r8, r3
 8001f18:	e6cc      	b.n	8001cb4 <__aeabi_dsub+0x2dc>
 8001f1a:	1bdc      	subs	r4, r3, r7
 8001f1c:	4662      	mov	r2, ip
 8001f1e:	42a3      	cmp	r3, r4
 8001f20:	419b      	sbcs	r3, r3
 8001f22:	1a51      	subs	r1, r2, r1
 8001f24:	425b      	negs	r3, r3
 8001f26:	1acb      	subs	r3, r1, r3
 8001f28:	4699      	mov	r9, r3
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	e5a4      	b.n	8001a7a <__aeabi_dsub+0xa2>
 8001f30:	08ff      	lsrs	r7, r7, #3
 8001f32:	074b      	lsls	r3, r1, #29
 8001f34:	465d      	mov	r5, fp
 8001f36:	433b      	orrs	r3, r7
 8001f38:	08cc      	lsrs	r4, r1, #3
 8001f3a:	e6d7      	b.n	8001cec <__aeabi_dsub+0x314>
 8001f3c:	4662      	mov	r2, ip
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	0014      	movs	r4, r2
 8001f42:	1e63      	subs	r3, r4, #1
 8001f44:	419c      	sbcs	r4, r3
 8001f46:	e679      	b.n	8001c3c <__aeabi_dsub+0x264>
 8001f48:	0015      	movs	r5, r2
 8001f4a:	4664      	mov	r4, ip
 8001f4c:	3d20      	subs	r5, #32
 8001f4e:	40ec      	lsrs	r4, r5
 8001f50:	46a0      	mov	r8, r4
 8001f52:	2a20      	cmp	r2, #32
 8001f54:	d005      	beq.n	8001f62 <__aeabi_dsub+0x58a>
 8001f56:	2540      	movs	r5, #64	; 0x40
 8001f58:	4664      	mov	r4, ip
 8001f5a:	1aaa      	subs	r2, r5, r2
 8001f5c:	4094      	lsls	r4, r2
 8001f5e:	4323      	orrs	r3, r4
 8001f60:	469a      	mov	sl, r3
 8001f62:	4654      	mov	r4, sl
 8001f64:	1e63      	subs	r3, r4, #1
 8001f66:	419c      	sbcs	r4, r3
 8001f68:	4643      	mov	r3, r8
 8001f6a:	4323      	orrs	r3, r4
 8001f6c:	e773      	b.n	8001e56 <__aeabi_dsub+0x47e>
 8001f6e:	4662      	mov	r2, ip
 8001f70:	431a      	orrs	r2, r3
 8001f72:	d023      	beq.n	8001fbc <__aeabi_dsub+0x5e4>
 8001f74:	000a      	movs	r2, r1
 8001f76:	433a      	orrs	r2, r7
 8001f78:	d000      	beq.n	8001f7c <__aeabi_dsub+0x5a4>
 8001f7a:	e0a0      	b.n	80020be <__aeabi_dsub+0x6e6>
 8001f7c:	4662      	mov	r2, ip
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	0752      	lsls	r2, r2, #29
 8001f82:	4313      	orrs	r3, r2
 8001f84:	4662      	mov	r2, ip
 8001f86:	08d4      	lsrs	r4, r2, #3
 8001f88:	e6b0      	b.n	8001cec <__aeabi_dsub+0x314>
 8001f8a:	000b      	movs	r3, r1
 8001f8c:	433b      	orrs	r3, r7
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dsub+0x5ba>
 8001f90:	e728      	b.n	8001de4 <__aeabi_dsub+0x40c>
 8001f92:	08ff      	lsrs	r7, r7, #3
 8001f94:	074b      	lsls	r3, r1, #29
 8001f96:	465d      	mov	r5, fp
 8001f98:	433b      	orrs	r3, r7
 8001f9a:	08cc      	lsrs	r4, r1, #3
 8001f9c:	e697      	b.n	8001cce <__aeabi_dsub+0x2f6>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	e736      	b.n	8001e12 <__aeabi_dsub+0x43a>
 8001fa4:	1afc      	subs	r4, r7, r3
 8001fa6:	42a7      	cmp	r7, r4
 8001fa8:	41bf      	sbcs	r7, r7
 8001faa:	4663      	mov	r3, ip
 8001fac:	427f      	negs	r7, r7
 8001fae:	1ac9      	subs	r1, r1, r3
 8001fb0:	1bcb      	subs	r3, r1, r7
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	465d      	mov	r5, fp
 8001fb8:	4698      	mov	r8, r3
 8001fba:	e55e      	b.n	8001a7a <__aeabi_dsub+0xa2>
 8001fbc:	074b      	lsls	r3, r1, #29
 8001fbe:	08ff      	lsrs	r7, r7, #3
 8001fc0:	433b      	orrs	r3, r7
 8001fc2:	08cc      	lsrs	r4, r1, #3
 8001fc4:	e692      	b.n	8001cec <__aeabi_dsub+0x314>
 8001fc6:	1bdc      	subs	r4, r3, r7
 8001fc8:	4660      	mov	r0, ip
 8001fca:	42a3      	cmp	r3, r4
 8001fcc:	41b6      	sbcs	r6, r6
 8001fce:	1a40      	subs	r0, r0, r1
 8001fd0:	4276      	negs	r6, r6
 8001fd2:	1b80      	subs	r0, r0, r6
 8001fd4:	4681      	mov	r9, r0
 8001fd6:	0200      	lsls	r0, r0, #8
 8001fd8:	d560      	bpl.n	800209c <__aeabi_dsub+0x6c4>
 8001fda:	1afc      	subs	r4, r7, r3
 8001fdc:	42a7      	cmp	r7, r4
 8001fde:	41bf      	sbcs	r7, r7
 8001fe0:	4663      	mov	r3, ip
 8001fe2:	427f      	negs	r7, r7
 8001fe4:	1ac9      	subs	r1, r1, r3
 8001fe6:	1bcb      	subs	r3, r1, r7
 8001fe8:	4699      	mov	r9, r3
 8001fea:	465d      	mov	r5, fp
 8001fec:	e576      	b.n	8001adc <__aeabi_dsub+0x104>
 8001fee:	08ff      	lsrs	r7, r7, #3
 8001ff0:	074b      	lsls	r3, r1, #29
 8001ff2:	433b      	orrs	r3, r7
 8001ff4:	08cc      	lsrs	r4, r1, #3
 8001ff6:	e667      	b.n	8001cc8 <__aeabi_dsub+0x2f0>
 8001ff8:	000a      	movs	r2, r1
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	433a      	orrs	r2, r7
 8001ffe:	d100      	bne.n	8002002 <__aeabi_dsub+0x62a>
 8002000:	e66f      	b.n	8001ce2 <__aeabi_dsub+0x30a>
 8002002:	4662      	mov	r2, ip
 8002004:	0752      	lsls	r2, r2, #29
 8002006:	4313      	orrs	r3, r2
 8002008:	4662      	mov	r2, ip
 800200a:	08d4      	lsrs	r4, r2, #3
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	0312      	lsls	r2, r2, #12
 8002010:	4214      	tst	r4, r2
 8002012:	d007      	beq.n	8002024 <__aeabi_dsub+0x64c>
 8002014:	08c8      	lsrs	r0, r1, #3
 8002016:	4210      	tst	r0, r2
 8002018:	d104      	bne.n	8002024 <__aeabi_dsub+0x64c>
 800201a:	465d      	mov	r5, fp
 800201c:	0004      	movs	r4, r0
 800201e:	08fb      	lsrs	r3, r7, #3
 8002020:	0749      	lsls	r1, r1, #29
 8002022:	430b      	orrs	r3, r1
 8002024:	0f5a      	lsrs	r2, r3, #29
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	0752      	lsls	r2, r2, #29
 800202c:	4313      	orrs	r3, r2
 800202e:	e65d      	b.n	8001cec <__aeabi_dsub+0x314>
 8002030:	074b      	lsls	r3, r1, #29
 8002032:	08ff      	lsrs	r7, r7, #3
 8002034:	433b      	orrs	r3, r7
 8002036:	08cc      	lsrs	r4, r1, #3
 8002038:	e649      	b.n	8001cce <__aeabi_dsub+0x2f6>
 800203a:	19dc      	adds	r4, r3, r7
 800203c:	429c      	cmp	r4, r3
 800203e:	419b      	sbcs	r3, r3
 8002040:	4461      	add	r1, ip
 8002042:	4689      	mov	r9, r1
 8002044:	425b      	negs	r3, r3
 8002046:	4499      	add	r9, r3
 8002048:	464b      	mov	r3, r9
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	d400      	bmi.n	8002050 <__aeabi_dsub+0x678>
 800204e:	e631      	b.n	8001cb4 <__aeabi_dsub+0x2dc>
 8002050:	464a      	mov	r2, r9
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <__aeabi_dsub+0x6d8>)
 8002054:	401a      	ands	r2, r3
 8002056:	2301      	movs	r3, #1
 8002058:	4691      	mov	r9, r2
 800205a:	4698      	mov	r8, r3
 800205c:	e62a      	b.n	8001cb4 <__aeabi_dsub+0x2dc>
 800205e:	0016      	movs	r6, r2
 8002060:	4664      	mov	r4, ip
 8002062:	3e20      	subs	r6, #32
 8002064:	40f4      	lsrs	r4, r6
 8002066:	46a0      	mov	r8, r4
 8002068:	2a20      	cmp	r2, #32
 800206a:	d005      	beq.n	8002078 <__aeabi_dsub+0x6a0>
 800206c:	2640      	movs	r6, #64	; 0x40
 800206e:	4664      	mov	r4, ip
 8002070:	1ab2      	subs	r2, r6, r2
 8002072:	4094      	lsls	r4, r2
 8002074:	4323      	orrs	r3, r4
 8002076:	469a      	mov	sl, r3
 8002078:	4654      	mov	r4, sl
 800207a:	1e63      	subs	r3, r4, #1
 800207c:	419c      	sbcs	r4, r3
 800207e:	4643      	mov	r3, r8
 8002080:	431c      	orrs	r4, r3
 8002082:	e5db      	b.n	8001c3c <__aeabi_dsub+0x264>
 8002084:	0002      	movs	r2, r0
 8002086:	2400      	movs	r4, #0
 8002088:	2300      	movs	r3, #0
 800208a:	e548      	b.n	8001b1e <__aeabi_dsub+0x146>
 800208c:	19dc      	adds	r4, r3, r7
 800208e:	42bc      	cmp	r4, r7
 8002090:	41bf      	sbcs	r7, r7
 8002092:	4461      	add	r1, ip
 8002094:	4689      	mov	r9, r1
 8002096:	427f      	negs	r7, r7
 8002098:	44b9      	add	r9, r7
 800209a:	e738      	b.n	8001f0e <__aeabi_dsub+0x536>
 800209c:	464b      	mov	r3, r9
 800209e:	4323      	orrs	r3, r4
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x6cc>
 80020a2:	e69f      	b.n	8001de4 <__aeabi_dsub+0x40c>
 80020a4:	e606      	b.n	8001cb4 <__aeabi_dsub+0x2dc>
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	000007fe 	.word	0x000007fe
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	ff7fffff 	.word	0xff7fffff
 80020b4:	08ff      	lsrs	r7, r7, #3
 80020b6:	074b      	lsls	r3, r1, #29
 80020b8:	433b      	orrs	r3, r7
 80020ba:	08cc      	lsrs	r4, r1, #3
 80020bc:	e616      	b.n	8001cec <__aeabi_dsub+0x314>
 80020be:	4662      	mov	r2, ip
 80020c0:	08db      	lsrs	r3, r3, #3
 80020c2:	0752      	lsls	r2, r2, #29
 80020c4:	4313      	orrs	r3, r2
 80020c6:	4662      	mov	r2, ip
 80020c8:	08d4      	lsrs	r4, r2, #3
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	0312      	lsls	r2, r2, #12
 80020ce:	4214      	tst	r4, r2
 80020d0:	d007      	beq.n	80020e2 <__aeabi_dsub+0x70a>
 80020d2:	08c8      	lsrs	r0, r1, #3
 80020d4:	4210      	tst	r0, r2
 80020d6:	d104      	bne.n	80020e2 <__aeabi_dsub+0x70a>
 80020d8:	465d      	mov	r5, fp
 80020da:	0004      	movs	r4, r0
 80020dc:	08fb      	lsrs	r3, r7, #3
 80020de:	0749      	lsls	r1, r1, #29
 80020e0:	430b      	orrs	r3, r1
 80020e2:	0f5a      	lsrs	r2, r3, #29
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	0752      	lsls	r2, r2, #29
 80020e8:	08db      	lsrs	r3, r3, #3
 80020ea:	4313      	orrs	r3, r2
 80020ec:	e5fe      	b.n	8001cec <__aeabi_dsub+0x314>
 80020ee:	2300      	movs	r3, #0
 80020f0:	4a01      	ldr	r2, [pc, #4]	; (80020f8 <__aeabi_dsub+0x720>)
 80020f2:	001c      	movs	r4, r3
 80020f4:	e513      	b.n	8001b1e <__aeabi_dsub+0x146>
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	000007ff 	.word	0x000007ff

080020fc <__aeabi_d2iz>:
 80020fc:	000a      	movs	r2, r1
 80020fe:	b530      	push	{r4, r5, lr}
 8002100:	4c13      	ldr	r4, [pc, #76]	; (8002150 <__aeabi_d2iz+0x54>)
 8002102:	0053      	lsls	r3, r2, #1
 8002104:	0309      	lsls	r1, r1, #12
 8002106:	0005      	movs	r5, r0
 8002108:	0b09      	lsrs	r1, r1, #12
 800210a:	2000      	movs	r0, #0
 800210c:	0d5b      	lsrs	r3, r3, #21
 800210e:	0fd2      	lsrs	r2, r2, #31
 8002110:	42a3      	cmp	r3, r4
 8002112:	dd04      	ble.n	800211e <__aeabi_d2iz+0x22>
 8002114:	480f      	ldr	r0, [pc, #60]	; (8002154 <__aeabi_d2iz+0x58>)
 8002116:	4283      	cmp	r3, r0
 8002118:	dd02      	ble.n	8002120 <__aeabi_d2iz+0x24>
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <__aeabi_d2iz+0x5c>)
 800211c:	18d0      	adds	r0, r2, r3
 800211e:	bd30      	pop	{r4, r5, pc}
 8002120:	2080      	movs	r0, #128	; 0x80
 8002122:	0340      	lsls	r0, r0, #13
 8002124:	4301      	orrs	r1, r0
 8002126:	480d      	ldr	r0, [pc, #52]	; (800215c <__aeabi_d2iz+0x60>)
 8002128:	1ac0      	subs	r0, r0, r3
 800212a:	281f      	cmp	r0, #31
 800212c:	dd08      	ble.n	8002140 <__aeabi_d2iz+0x44>
 800212e:	480c      	ldr	r0, [pc, #48]	; (8002160 <__aeabi_d2iz+0x64>)
 8002130:	1ac3      	subs	r3, r0, r3
 8002132:	40d9      	lsrs	r1, r3
 8002134:	000b      	movs	r3, r1
 8002136:	4258      	negs	r0, r3
 8002138:	2a00      	cmp	r2, #0
 800213a:	d1f0      	bne.n	800211e <__aeabi_d2iz+0x22>
 800213c:	0018      	movs	r0, r3
 800213e:	e7ee      	b.n	800211e <__aeabi_d2iz+0x22>
 8002140:	4c08      	ldr	r4, [pc, #32]	; (8002164 <__aeabi_d2iz+0x68>)
 8002142:	40c5      	lsrs	r5, r0
 8002144:	46a4      	mov	ip, r4
 8002146:	4463      	add	r3, ip
 8002148:	4099      	lsls	r1, r3
 800214a:	000b      	movs	r3, r1
 800214c:	432b      	orrs	r3, r5
 800214e:	e7f2      	b.n	8002136 <__aeabi_d2iz+0x3a>
 8002150:	000003fe 	.word	0x000003fe
 8002154:	0000041d 	.word	0x0000041d
 8002158:	7fffffff 	.word	0x7fffffff
 800215c:	00000433 	.word	0x00000433
 8002160:	00000413 	.word	0x00000413
 8002164:	fffffbed 	.word	0xfffffbed

08002168 <__aeabi_i2d>:
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	2800      	cmp	r0, #0
 800216c:	d016      	beq.n	800219c <__aeabi_i2d+0x34>
 800216e:	17c3      	asrs	r3, r0, #31
 8002170:	18c5      	adds	r5, r0, r3
 8002172:	405d      	eors	r5, r3
 8002174:	0fc4      	lsrs	r4, r0, #31
 8002176:	0028      	movs	r0, r5
 8002178:	f000 f84c 	bl	8002214 <__clzsi2>
 800217c:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <__aeabi_i2d+0x5c>)
 800217e:	1a12      	subs	r2, r2, r0
 8002180:	280a      	cmp	r0, #10
 8002182:	dc16      	bgt.n	80021b2 <__aeabi_i2d+0x4a>
 8002184:	0003      	movs	r3, r0
 8002186:	002e      	movs	r6, r5
 8002188:	3315      	adds	r3, #21
 800218a:	409e      	lsls	r6, r3
 800218c:	230b      	movs	r3, #11
 800218e:	1a18      	subs	r0, r3, r0
 8002190:	40c5      	lsrs	r5, r0
 8002192:	0552      	lsls	r2, r2, #21
 8002194:	032d      	lsls	r5, r5, #12
 8002196:	0b2d      	lsrs	r5, r5, #12
 8002198:	0d53      	lsrs	r3, r2, #21
 800219a:	e003      	b.n	80021a4 <__aeabi_i2d+0x3c>
 800219c:	2400      	movs	r4, #0
 800219e:	2300      	movs	r3, #0
 80021a0:	2500      	movs	r5, #0
 80021a2:	2600      	movs	r6, #0
 80021a4:	051b      	lsls	r3, r3, #20
 80021a6:	432b      	orrs	r3, r5
 80021a8:	07e4      	lsls	r4, r4, #31
 80021aa:	4323      	orrs	r3, r4
 80021ac:	0030      	movs	r0, r6
 80021ae:	0019      	movs	r1, r3
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	380b      	subs	r0, #11
 80021b4:	4085      	lsls	r5, r0
 80021b6:	0552      	lsls	r2, r2, #21
 80021b8:	032d      	lsls	r5, r5, #12
 80021ba:	2600      	movs	r6, #0
 80021bc:	0b2d      	lsrs	r5, r5, #12
 80021be:	0d53      	lsrs	r3, r2, #21
 80021c0:	e7f0      	b.n	80021a4 <__aeabi_i2d+0x3c>
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	0000041e 	.word	0x0000041e

080021c8 <__aeabi_ui2d>:
 80021c8:	b510      	push	{r4, lr}
 80021ca:	1e04      	subs	r4, r0, #0
 80021cc:	d010      	beq.n	80021f0 <__aeabi_ui2d+0x28>
 80021ce:	f000 f821 	bl	8002214 <__clzsi2>
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <__aeabi_ui2d+0x48>)
 80021d4:	1a1b      	subs	r3, r3, r0
 80021d6:	280a      	cmp	r0, #10
 80021d8:	dc11      	bgt.n	80021fe <__aeabi_ui2d+0x36>
 80021da:	220b      	movs	r2, #11
 80021dc:	0021      	movs	r1, r4
 80021de:	1a12      	subs	r2, r2, r0
 80021e0:	40d1      	lsrs	r1, r2
 80021e2:	3015      	adds	r0, #21
 80021e4:	030a      	lsls	r2, r1, #12
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	4084      	lsls	r4, r0
 80021ea:	0b12      	lsrs	r2, r2, #12
 80021ec:	0d5b      	lsrs	r3, r3, #21
 80021ee:	e001      	b.n	80021f4 <__aeabi_ui2d+0x2c>
 80021f0:	2300      	movs	r3, #0
 80021f2:	2200      	movs	r2, #0
 80021f4:	051b      	lsls	r3, r3, #20
 80021f6:	4313      	orrs	r3, r2
 80021f8:	0020      	movs	r0, r4
 80021fa:	0019      	movs	r1, r3
 80021fc:	bd10      	pop	{r4, pc}
 80021fe:	0022      	movs	r2, r4
 8002200:	380b      	subs	r0, #11
 8002202:	4082      	lsls	r2, r0
 8002204:	055b      	lsls	r3, r3, #21
 8002206:	0312      	lsls	r2, r2, #12
 8002208:	2400      	movs	r4, #0
 800220a:	0b12      	lsrs	r2, r2, #12
 800220c:	0d5b      	lsrs	r3, r3, #21
 800220e:	e7f1      	b.n	80021f4 <__aeabi_ui2d+0x2c>
 8002210:	0000041e 	.word	0x0000041e

08002214 <__clzsi2>:
 8002214:	211c      	movs	r1, #28
 8002216:	2301      	movs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	4298      	cmp	r0, r3
 800221c:	d301      	bcc.n	8002222 <__clzsi2+0xe>
 800221e:	0c00      	lsrs	r0, r0, #16
 8002220:	3910      	subs	r1, #16
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	4298      	cmp	r0, r3
 8002226:	d301      	bcc.n	800222c <__clzsi2+0x18>
 8002228:	0a00      	lsrs	r0, r0, #8
 800222a:	3908      	subs	r1, #8
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	4298      	cmp	r0, r3
 8002230:	d301      	bcc.n	8002236 <__clzsi2+0x22>
 8002232:	0900      	lsrs	r0, r0, #4
 8002234:	3904      	subs	r1, #4
 8002236:	a202      	add	r2, pc, #8	; (adr r2, 8002240 <__clzsi2+0x2c>)
 8002238:	5c10      	ldrb	r0, [r2, r0]
 800223a:	1840      	adds	r0, r0, r1
 800223c:	4770      	bx	lr
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	02020304 	.word	0x02020304
 8002244:	01010101 	.word	0x01010101
	...

08002250 <__clzdi2>:
 8002250:	b510      	push	{r4, lr}
 8002252:	2900      	cmp	r1, #0
 8002254:	d103      	bne.n	800225e <__clzdi2+0xe>
 8002256:	f7ff ffdd 	bl	8002214 <__clzsi2>
 800225a:	3020      	adds	r0, #32
 800225c:	e002      	b.n	8002264 <__clzdi2+0x14>
 800225e:	0008      	movs	r0, r1
 8002260:	f7ff ffd8 	bl	8002214 <__clzsi2>
 8002264:	bd10      	pop	{r4, pc}
 8002266:	46c0      	nop			; (mov r8, r8)

08002268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800226c:	f001 fdd2 	bl	8003e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002270:	f000 f816 	bl	80022a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002274:	f000 f8a4 	bl	80023c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002278:	f000 f872 	bl	8002360 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World!\n");
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <main+0x30>)
 800227e:	0018      	movs	r0, r3
 8002280:	f001 fcc6 	bl	8003c10 <printf_>
	  HAL_Delay(200);
 8002284:	20c8      	movs	r0, #200	; 0xc8
 8002286:	f001 fe29 	bl	8003edc <HAL_Delay>
	  HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <main+0x34>)
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0018      	movs	r0, r3
 8002290:	f002 f881 	bl	8004396 <HAL_GPIO_TogglePin>
	  printf("Hello World!\n");
 8002294:	e7f2      	b.n	800227c <main+0x14>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	080058b8 	.word	0x080058b8
 800229c:	48000400 	.word	0x48000400

080022a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b099      	sub	sp, #100	; 0x64
 80022a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a6:	242c      	movs	r4, #44	; 0x2c
 80022a8:	193b      	adds	r3, r7, r4
 80022aa:	0018      	movs	r0, r3
 80022ac:	2334      	movs	r3, #52	; 0x34
 80022ae:	001a      	movs	r2, r3
 80022b0:	2100      	movs	r1, #0
 80022b2:	f003 faed 	bl	8005890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b6:	231c      	movs	r3, #28
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	0018      	movs	r0, r3
 80022bc:	2310      	movs	r3, #16
 80022be:	001a      	movs	r2, r3
 80022c0:	2100      	movs	r1, #0
 80022c2:	f003 fae5 	bl	8005890 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	0018      	movs	r0, r3
 80022ca:	2318      	movs	r3, #24
 80022cc:	001a      	movs	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f003 fade 	bl	8005890 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022d4:	0021      	movs	r1, r4
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	2201      	movs	r2, #1
 80022e0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e2:	187b      	adds	r3, r7, r1
 80022e4:	2202      	movs	r2, #2
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	2280      	movs	r2, #128	; 0x80
 80022ec:	0252      	lsls	r2, r2, #9
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	0352      	lsls	r2, r2, #13
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022fe:	187b      	adds	r3, r7, r1
 8002300:	0018      	movs	r0, r3
 8002302:	f002 f863 	bl	80043cc <HAL_RCC_OscConfig>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d001      	beq.n	800230e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800230a:	f000 f8b5 	bl	8002478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800230e:	211c      	movs	r1, #28
 8002310:	187b      	adds	r3, r7, r1
 8002312:	2207      	movs	r2, #7
 8002314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002316:	187b      	adds	r3, r7, r1
 8002318:	2202      	movs	r2, #2
 800231a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231c:	187b      	adds	r3, r7, r1
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002322:	187b      	adds	r3, r7, r1
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2101      	movs	r1, #1
 800232c:	0018      	movs	r0, r3
 800232e:	f002 fbd3 	bl	8004ad8 <HAL_RCC_ClockConfig>
 8002332:	1e03      	subs	r3, r0, #0
 8002334:	d001      	beq.n	800233a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002336:	f000 f89f 	bl	8002478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	0018      	movs	r0, r3
 800234a:	f002 fd31 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 800234e:	1e03      	subs	r3, r0, #0
 8002350:	d001      	beq.n	8002356 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002352:	f000 f891 	bl	8002478 <Error_Handler>
  }
}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b019      	add	sp, #100	; 0x64
 800235c:	bd90      	pop	{r4, r7, pc}
	...

08002360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <MX_USART1_UART_Init+0x5c>)
 8002368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 800236c:	22e1      	movs	r2, #225	; 0xe1
 800236e:	0252      	lsls	r2, r2, #9
 8002370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 80023a4:	0018      	movs	r0, r3
 80023a6:	f002 fdf1 	bl	8004f8c <HAL_UART_Init>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023ae:	f000 f863 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000028 	.word	0x20000028
 80023bc:	40013800 	.word	0x40013800

080023c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c6:	240c      	movs	r4, #12
 80023c8:	193b      	adds	r3, r7, r4
 80023ca:	0018      	movs	r0, r3
 80023cc:	2314      	movs	r3, #20
 80023ce:	001a      	movs	r2, r3
 80023d0:	2100      	movs	r1, #0
 80023d2:	f003 fa5d 	bl	8005890 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <MX_GPIO_Init+0xb0>)
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <MX_GPIO_Init+0xb0>)
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	03c9      	lsls	r1, r1, #15
 80023e0:	430a      	orrs	r2, r1
 80023e2:	615a      	str	r2, [r3, #20]
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <MX_GPIO_Init+0xb0>)
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	03db      	lsls	r3, r3, #15
 80023ec:	4013      	ands	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <MX_GPIO_Init+0xb0>)
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <MX_GPIO_Init+0xb0>)
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	0289      	lsls	r1, r1, #10
 80023fc:	430a      	orrs	r2, r1
 80023fe:	615a      	str	r2, [r3, #20]
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <MX_GPIO_Init+0xb0>)
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	029b      	lsls	r3, r3, #10
 8002408:	4013      	ands	r3, r2
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <MX_GPIO_Init+0xb0>)
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <MX_GPIO_Init+0xb0>)
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	02c9      	lsls	r1, r1, #11
 8002418:	430a      	orrs	r2, r1
 800241a:	615a      	str	r2, [r3, #20]
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <MX_GPIO_Init+0xb0>)
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	02db      	lsls	r3, r3, #11
 8002424:	4013      	ands	r3, r2
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <MX_GPIO_Init+0xb4>)
 800242c:	2201      	movs	r2, #1
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	0018      	movs	r0, r3
 8002432:	f001 ff93 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_GPIO_Init+0xb4>)
 8002438:	2200      	movs	r2, #0
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	0018      	movs	r0, r3
 800243e:	f001 ff8d 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_Pin GREEN_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin;
 8002442:	0021      	movs	r1, r4
 8002444:	187b      	adds	r3, r7, r1
 8002446:	22c0      	movs	r2, #192	; 0xc0
 8002448:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	187b      	adds	r3, r7, r1
 800244c:	2201      	movs	r2, #1
 800244e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	187b      	adds	r3, r7, r1
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	187b      	adds	r3, r7, r1
 8002458:	2200      	movs	r2, #0
 800245a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245c:	187b      	adds	r3, r7, r1
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <MX_GPIO_Init+0xb4>)
 8002460:	0019      	movs	r1, r3
 8002462:	0010      	movs	r0, r2
 8002464:	f001 fe12 	bl	800408c <HAL_GPIO_Init>

}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b009      	add	sp, #36	; 0x24
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	48000400 	.word	0x48000400

08002478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800247c:	b672      	cpsid	i
}
 800247e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002480:	e7fe      	b.n	8002480 <Error_Handler+0x8>

08002482 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	230f      	movs	r3, #15
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	1c02      	adds	r2, r0, #0
 8002494:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b004      	add	sp, #16
 800249c:	bd80      	pop	{r7, pc}

0800249e <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	210f      	movs	r1, #15
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	1c02      	adds	r2, r0, #0
 80024b0:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80024b2:	000a      	movs	r2, r1
 80024b4:	18bb      	adds	r3, r7, r2
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <_out_char+0x28>
	put_char(character);
 80024bc:	18bb      	adds	r3, r7, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f001 fc51 	bl	8003d68 <put_char>
  }
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e002      	b.n	80024e4 <_strnlen_s+0x16>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3301      	adds	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <_strnlen_s+0x28>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	603a      	str	r2, [r7, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f3      	bne.n	80024de <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1ad3      	subs	r3, r2, r3
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}

08002504 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	0002      	movs	r2, r0
 800250c:	1dfb      	adds	r3, r7, #7
 800250e:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b2f      	cmp	r3, #47	; 0x2f
 8002516:	d905      	bls.n	8002524 <_is_digit+0x20>
 8002518:	1dfb      	adds	r3, r7, #7
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b39      	cmp	r3, #57	; 0x39
 800251e:	d801      	bhi.n	8002524 <_is_digit+0x20>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <_is_digit+0x22>
 8002524:	2300      	movs	r3, #0
 8002526:	1c1a      	adds	r2, r3, #0
 8002528:	2301      	movs	r3, #1
 800252a:	4013      	ands	r3, r2
 800252c:	b2db      	uxtb	r3, r3
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}

08002536 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002542:	e00e      	b.n	8002562 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	0013      	movs	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	189b      	adds	r3, r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	0018      	movs	r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	1c59      	adds	r1, r3, #1
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6011      	str	r1, [r2, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	18c3      	adds	r3, r0, r3
 800255e:	3b30      	subs	r3, #48	; 0x30
 8002560:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff ffcb 	bl	8002504 <_is_digit>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d1e8      	bne.n	8002544 <_atoi+0xe>
  }
  return i;
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b004      	add	sp, #16
 800257a:	bd80      	pop	{r7, pc}

0800257c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	2202      	movs	r2, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d124      	bne.n	80025e0 <_out_rev+0x64>
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002598:	2201      	movs	r2, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d120      	bne.n	80025e0 <_out_rev+0x64>
    for (size_t i = len; i < width; i++) {
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e00a      	b.n	80025ba <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	1c53      	adds	r3, r2, #1
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	68fc      	ldr	r4, [r7, #12]
 80025b0:	2020      	movs	r0, #32
 80025b2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	429a      	cmp	r2, r3
 80025c0:	d3f0      	bcc.n	80025a4 <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 80025c2:	e00d      	b.n	80025e0 <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	3b01      	subs	r3, #1
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	18d3      	adds	r3, r2, r3
 80025d0:	7818      	ldrb	r0, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	1c53      	adds	r3, r2, #1
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	68fc      	ldr	r4, [r7, #12]
 80025de:	47a0      	blx	r4
  while (len) {
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1ee      	bne.n	80025c4 <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	2202      	movs	r2, #2
 80025ea:	4013      	ands	r3, r2
 80025ec:	d00e      	beq.n	800260c <_out_rev+0x90>
    while (idx - start_idx < width) {
 80025ee:	e007      	b.n	8002600 <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	1c53      	adds	r3, r2, #1
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68fc      	ldr	r4, [r7, #12]
 80025fc:	2020      	movs	r0, #32
 80025fe:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002608:	429a      	cmp	r2, r3
 800260a:	d8f1      	bhi.n	80025f0 <_out_rev+0x74>
    }
  }

  return idx;
 800260c:	687b      	ldr	r3, [r7, #4]
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b007      	add	sp, #28
 8002614:	bd90      	pop	{r4, r7, pc}

08002616 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002616:	b590      	push	{r4, r7, lr}
 8002618:	b089      	sub	sp, #36	; 0x24
 800261a:	af04      	add	r7, sp, #16
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d134      	bne.n	8002696 <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	2b00      	cmp	r3, #0
 8002630:	d017      	beq.n	8002662 <_ntoa_format+0x4c>
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	2201      	movs	r2, #1
 8002636:	4013      	ands	r3, r2
 8002638:	d013      	beq.n	8002662 <_ntoa_format+0x4c>
 800263a:	2328      	movs	r3, #40	; 0x28
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d103      	bne.n	800264c <_ntoa_format+0x36>
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	220c      	movs	r2, #12
 8002648:	4013      	ands	r3, r2
 800264a:	d00a      	beq.n	8002662 <_ntoa_format+0x4c>
      width--;
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	3b01      	subs	r3, #1
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002652:	e006      	b.n	8002662 <_ntoa_format+0x4c>
      buf[len++] = '0';
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	627a      	str	r2, [r7, #36]	; 0x24
 800265a:	6a3a      	ldr	r2, [r7, #32]
 800265c:	18d3      	adds	r3, r2, r3
 800265e:	2230      	movs	r2, #48	; 0x30
 8002660:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	429a      	cmp	r2, r3
 8002668:	d20a      	bcs.n	8002680 <_ntoa_format+0x6a>
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	2b1f      	cmp	r3, #31
 800266e:	d9f1      	bls.n	8002654 <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002670:	e006      	b.n	8002680 <_ntoa_format+0x6a>
      buf[len++] = '0';
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	627a      	str	r2, [r7, #36]	; 0x24
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	18d3      	adds	r3, r2, r3
 800267c:	2230      	movs	r2, #48	; 0x30
 800267e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	2201      	movs	r2, #1
 8002684:	4013      	ands	r3, r2
 8002686:	d006      	beq.n	8002696 <_ntoa_format+0x80>
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	429a      	cmp	r2, r3
 800268e:	d202      	bcs.n	8002696 <_ntoa_format+0x80>
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	2b1f      	cmp	r3, #31
 8002694:	d9ed      	bls.n	8002672 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	2210      	movs	r2, #16
 800269a:	4013      	ands	r3, r2
 800269c:	d056      	beq.n	800274c <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800269e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4013      	ands	r3, r2
 80026a6:	d116      	bne.n	80026d6 <_ntoa_format+0xc0>
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d013      	beq.n	80026d6 <_ntoa_format+0xc0>
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d003      	beq.n	80026be <_ntoa_format+0xa8>
 80026b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d10b      	bne.n	80026d6 <_ntoa_format+0xc0>
      len--;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	3b01      	subs	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
      if (len && (base == 16U)) {
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <_ntoa_format+0xc0>
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d102      	bne.n	80026d6 <_ntoa_format+0xc0>
        len--;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	3b01      	subs	r3, #1
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d10e      	bne.n	80026fa <_ntoa_format+0xe4>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	2220      	movs	r2, #32
 80026e0:	4013      	ands	r3, r2
 80026e2:	d10a      	bne.n	80026fa <_ntoa_format+0xe4>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	2b1f      	cmp	r3, #31
 80026e8:	d807      	bhi.n	80026fa <_ntoa_format+0xe4>
      buf[len++] = 'x';
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	627a      	str	r2, [r7, #36]	; 0x24
 80026f0:	6a3a      	ldr	r2, [r7, #32]
 80026f2:	18d3      	adds	r3, r2, r3
 80026f4:	2278      	movs	r2, #120	; 0x78
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e01e      	b.n	8002738 <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d10e      	bne.n	800271e <_ntoa_format+0x108>
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	2220      	movs	r2, #32
 8002704:	4013      	ands	r3, r2
 8002706:	d00a      	beq.n	800271e <_ntoa_format+0x108>
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	2b1f      	cmp	r3, #31
 800270c:	d807      	bhi.n	800271e <_ntoa_format+0x108>
      buf[len++] = 'X';
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	627a      	str	r2, [r7, #36]	; 0x24
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	18d3      	adds	r3, r2, r3
 8002718:	2258      	movs	r2, #88	; 0x58
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e00c      	b.n	8002738 <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	2b02      	cmp	r3, #2
 8002722:	d109      	bne.n	8002738 <_ntoa_format+0x122>
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	2b1f      	cmp	r3, #31
 8002728:	d806      	bhi.n	8002738 <_ntoa_format+0x122>
      buf[len++] = 'b';
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	627a      	str	r2, [r7, #36]	; 0x24
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	18d3      	adds	r3, r2, r3
 8002734:	2262      	movs	r2, #98	; 0x62
 8002736:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	2b1f      	cmp	r3, #31
 800273c:	d806      	bhi.n	800274c <_ntoa_format+0x136>
      buf[len++] = '0';
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	627a      	str	r2, [r7, #36]	; 0x24
 8002744:	6a3a      	ldr	r2, [r7, #32]
 8002746:	18d3      	adds	r3, r2, r3
 8002748:	2230      	movs	r2, #48	; 0x30
 800274a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	2b1f      	cmp	r3, #31
 8002750:	d823      	bhi.n	800279a <_ntoa_format+0x184>
    if (negative) {
 8002752:	2328      	movs	r3, #40	; 0x28
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <_ntoa_format+0x156>
      buf[len++] = '-';
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	627a      	str	r2, [r7, #36]	; 0x24
 8002762:	6a3a      	ldr	r2, [r7, #32]
 8002764:	18d3      	adds	r3, r2, r3
 8002766:	222d      	movs	r2, #45	; 0x2d
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e016      	b.n	800279a <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	2204      	movs	r2, #4
 8002770:	4013      	ands	r3, r2
 8002772:	d007      	beq.n	8002784 <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	627a      	str	r2, [r7, #36]	; 0x24
 800277a:	6a3a      	ldr	r2, [r7, #32]
 800277c:	18d3      	adds	r3, r2, r3
 800277e:	222b      	movs	r2, #43	; 0x2b
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e00a      	b.n	800279a <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	2208      	movs	r2, #8
 8002788:	4013      	ands	r3, r2
 800278a:	d006      	beq.n	800279a <_ntoa_format+0x184>
      buf[len++] = ' ';
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	627a      	str	r2, [r7, #36]	; 0x24
 8002792:	6a3a      	ldr	r2, [r7, #32]
 8002794:	18d3      	adds	r3, r2, r3
 8002796:	2220      	movs	r2, #32
 8002798:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800279a:	683c      	ldr	r4, [r7, #0]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	9303      	str	r3, [sp, #12]
 80027a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	0023      	movs	r3, r4
 80027b4:	f7ff fee2 	bl	800257c <_out_rev>
 80027b8:	0003      	movs	r3, r0
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b005      	add	sp, #20
 80027c0:	bd90      	pop	{r4, r7, pc}

080027c2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80027c2:	b590      	push	{r4, r7, lr}
 80027c4:	b097      	sub	sp, #92	; 0x5c
 80027c6:	af08      	add	r7, sp, #32
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80027d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80027da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027dc:	2210      	movs	r2, #16
 80027de:	4393      	bics	r3, r2
 80027e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80027e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4013      	ands	r3, r2
 80027ea:	d002      	beq.n	80027f2 <_ntoa_long+0x30>
 80027ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d033      	beq.n	800285a <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80027f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7fd fd0c 	bl	8000214 <__aeabi_uidivmod>
 80027fc:	000b      	movs	r3, r1
 80027fe:	001a      	movs	r2, r3
 8002800:	2133      	movs	r1, #51	; 0x33
 8002802:	187b      	adds	r3, r7, r1
 8002804:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002806:	000a      	movs	r2, r1
 8002808:	18bb      	adds	r3, r7, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b09      	cmp	r3, #9
 800280e:	d804      	bhi.n	800281a <_ntoa_long+0x58>
 8002810:	18bb      	adds	r3, r7, r2
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3330      	adds	r3, #48	; 0x30
 8002816:	b2da      	uxtb	r2, r3
 8002818:	e00d      	b.n	8002836 <_ntoa_long+0x74>
 800281a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281c:	2220      	movs	r2, #32
 800281e:	4013      	ands	r3, r2
 8002820:	d001      	beq.n	8002826 <_ntoa_long+0x64>
 8002822:	2341      	movs	r3, #65	; 0x41
 8002824:	e000      	b.n	8002828 <_ntoa_long+0x66>
 8002826:	2361      	movs	r3, #97	; 0x61
 8002828:	2233      	movs	r2, #51	; 0x33
 800282a:	18ba      	adds	r2, r7, r2
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	189b      	adds	r3, r3, r2
 8002830:	b2db      	uxtb	r3, r3
 8002832:	3b0a      	subs	r3, #10
 8002834:	b2da      	uxtb	r2, r3
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	1c59      	adds	r1, r3, #1
 800283a:	6379      	str	r1, [r7, #52]	; 0x34
 800283c:	2110      	movs	r1, #16
 800283e:	1879      	adds	r1, r7, r1
 8002840:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8002842:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002844:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002846:	f7fd fc5f 	bl	8000108 <__udivsi3>
 800284a:	0003      	movs	r3, r0
 800284c:	64bb      	str	r3, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800284e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <_ntoa_long+0x98>
 8002854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002856:	2b1f      	cmp	r3, #31
 8002858:	d9cb      	bls.n	80027f2 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800285a:	683c      	ldr	r4, [r7, #0]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002864:	9306      	str	r3, [sp, #24]
 8002866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002868:	9305      	str	r3, [sp, #20]
 800286a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286c:	9304      	str	r3, [sp, #16]
 800286e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002870:	9303      	str	r3, [sp, #12]
 8002872:	234c      	movs	r3, #76	; 0x4c
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	9302      	str	r3, [sp, #8]
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	2310      	movs	r3, #16
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	0023      	movs	r3, r4
 8002886:	f7ff fec6 	bl	8002616 <_ntoa_format>
 800288a:	0003      	movs	r3, r0
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b00f      	add	sp, #60	; 0x3c
 8002892:	bd90      	pop	{r4, r7, pc}

08002894 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b096      	sub	sp, #88	; 0x58
 8002898:	af08      	add	r7, sp, #32
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80028a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028aa:	4313      	orrs	r3, r2
 80028ac:	d103      	bne.n	80028b6 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80028ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b0:	2210      	movs	r2, #16
 80028b2:	4393      	bics	r3, r2
 80028b4:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80028b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4013      	ands	r3, r2
 80028be:	d003      	beq.n	80028c8 <_ntoa_long_long+0x34>
 80028c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c4:	4313      	orrs	r3, r2
 80028c6:	d03a      	beq.n	800293e <_ntoa_long_long+0xaa>
    do {
      const char digit = (char)(value % base);
 80028c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80028cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d0:	f7fd fdce 	bl	8000470 <__aeabi_uldivmod>
 80028d4:	0010      	movs	r0, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	2433      	movs	r4, #51	; 0x33
 80028da:	193b      	adds	r3, r7, r4
 80028dc:	1c02      	adds	r2, r0, #0
 80028de:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80028e0:	0022      	movs	r2, r4
 80028e2:	18bb      	adds	r3, r7, r2
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b09      	cmp	r3, #9
 80028e8:	d804      	bhi.n	80028f4 <_ntoa_long_long+0x60>
 80028ea:	18bb      	adds	r3, r7, r2
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	3330      	adds	r3, #48	; 0x30
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	e00d      	b.n	8002910 <_ntoa_long_long+0x7c>
 80028f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f6:	2220      	movs	r2, #32
 80028f8:	4013      	ands	r3, r2
 80028fa:	d001      	beq.n	8002900 <_ntoa_long_long+0x6c>
 80028fc:	2341      	movs	r3, #65	; 0x41
 80028fe:	e000      	b.n	8002902 <_ntoa_long_long+0x6e>
 8002900:	2361      	movs	r3, #97	; 0x61
 8002902:	2233      	movs	r2, #51	; 0x33
 8002904:	18ba      	adds	r2, r7, r2
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	189b      	adds	r3, r3, r2
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3b0a      	subs	r3, #10
 800290e:	b2da      	uxtb	r2, r3
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	1c59      	adds	r1, r3, #1
 8002914:	6379      	str	r1, [r7, #52]	; 0x34
 8002916:	2110      	movs	r1, #16
 8002918:	1879      	adds	r1, r7, r1
 800291a:	54ca      	strb	r2, [r1, r3]
      value /= base;
 800291c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800291e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002920:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002922:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002924:	f7fd fda4 	bl	8000470 <__aeabi_uldivmod>
 8002928:	0002      	movs	r2, r0
 800292a:	000b      	movs	r3, r1
 800292c:	64ba      	str	r2, [r7, #72]	; 0x48
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002932:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002934:	4313      	orrs	r3, r2
 8002936:	d002      	beq.n	800293e <_ntoa_long_long+0xaa>
 8002938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293a:	2b1f      	cmp	r3, #31
 800293c:	d9c4      	bls.n	80028c8 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800293e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002940:	683d      	ldr	r5, [r7, #0]
 8002942:	687c      	ldr	r4, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800294a:	9206      	str	r2, [sp, #24]
 800294c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800294e:	9205      	str	r2, [sp, #20]
 8002950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002952:	9204      	str	r2, [sp, #16]
 8002954:	9303      	str	r3, [sp, #12]
 8002956:	2350      	movs	r3, #80	; 0x50
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2310      	movs	r3, #16
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	002b      	movs	r3, r5
 800296a:	0022      	movs	r2, r4
 800296c:	f7ff fe53 	bl	8002616 <_ntoa_format>
 8002970:	0003      	movs	r3, r0
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b00e      	add	sp, #56	; 0x38
 8002978:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800297c <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297e:	b09d      	sub	sp, #116	; 0x74
 8002980:	af06      	add	r7, sp, #24
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 800298e:	2200      	movs	r2, #0
 8002990:	2300      	movs	r3, #0
 8002992:	63ba      	str	r2, [r7, #56]	; 0x38
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002996:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800299c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800299e:	f7fd fd39 	bl	8000414 <__aeabi_dcmpeq>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d112      	bne.n	80029cc <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80029a6:	683c      	ldr	r4, [r7, #0]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	9303      	str	r3, [sp, #12]
 80029b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029b8:	9302      	str	r3, [sp, #8]
 80029ba:	2303      	movs	r3, #3
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	4bbf      	ldr	r3, [pc, #764]	; (8002cbc <_ftoa+0x340>)
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	0023      	movs	r3, r4
 80029c4:	f7ff fdda 	bl	800257c <_out_rev>
 80029c8:	0003      	movs	r3, r0
 80029ca:	e211      	b.n	8002df0 <_ftoa+0x474>
  if (value < -DBL_MAX)
 80029cc:	2201      	movs	r2, #1
 80029ce:	4252      	negs	r2, r2
 80029d0:	4bbb      	ldr	r3, [pc, #748]	; (8002cc0 <_ftoa+0x344>)
 80029d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80029d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80029d6:	f7fd fd23 	bl	8000420 <__aeabi_dcmplt>
 80029da:	1e03      	subs	r3, r0, #0
 80029dc:	d012      	beq.n	8002a04 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80029de:	683c      	ldr	r4, [r7, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	9303      	str	r3, [sp, #12]
 80029ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	2304      	movs	r3, #4
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	4bb3      	ldr	r3, [pc, #716]	; (8002cc4 <_ftoa+0x348>)
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	0023      	movs	r3, r4
 80029fc:	f7ff fdbe 	bl	800257c <_out_rev>
 8002a00:	0003      	movs	r3, r0
 8002a02:	e1f5      	b.n	8002df0 <_ftoa+0x474>
  if (value > DBL_MAX)
 8002a04:	2201      	movs	r2, #1
 8002a06:	4252      	negs	r2, r2
 8002a08:	4baf      	ldr	r3, [pc, #700]	; (8002cc8 <_ftoa+0x34c>)
 8002a0a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002a0c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a0e:	f7fd fd1b 	bl	8000448 <__aeabi_dcmpgt>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d024      	beq.n	8002a60 <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d001      	beq.n	8002a26 <_ftoa+0xaa>
 8002a22:	4baa      	ldr	r3, [pc, #680]	; (8002ccc <_ftoa+0x350>)
 8002a24:	e000      	b.n	8002a28 <_ftoa+0xac>
 8002a26:	4baa      	ldr	r3, [pc, #680]	; (8002cd0 <_ftoa+0x354>)
 8002a28:	2280      	movs	r2, #128	; 0x80
 8002a2a:	18ba      	adds	r2, r7, r2
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	2104      	movs	r1, #4
 8002a30:	400a      	ands	r2, r1
 8002a32:	d001      	beq.n	8002a38 <_ftoa+0xbc>
 8002a34:	2204      	movs	r2, #4
 8002a36:	e000      	b.n	8002a3a <_ftoa+0xbe>
 8002a38:	2203      	movs	r2, #3
 8002a3a:	683e      	ldr	r6, [r7, #0]
 8002a3c:	687d      	ldr	r5, [r7, #4]
 8002a3e:	68bc      	ldr	r4, [r7, #8]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	1879      	adds	r1, r7, r1
 8002a46:	6809      	ldr	r1, [r1, #0]
 8002a48:	9103      	str	r1, [sp, #12]
 8002a4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a4c:	9102      	str	r1, [sp, #8]
 8002a4e:	9201      	str	r2, [sp, #4]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	0033      	movs	r3, r6
 8002a54:	002a      	movs	r2, r5
 8002a56:	0021      	movs	r1, r4
 8002a58:	f7ff fd90 	bl	800257c <_out_rev>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	e1c7      	b.n	8002df0 <_ftoa+0x474>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002a60:	2200      	movs	r2, #0
 8002a62:	4b9c      	ldr	r3, [pc, #624]	; (8002cd4 <_ftoa+0x358>)
 8002a64:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002a66:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a68:	f7fd fcee 	bl	8000448 <__aeabi_dcmpgt>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	d107      	bne.n	8002a80 <_ftoa+0x104>
 8002a70:	2200      	movs	r2, #0
 8002a72:	4b99      	ldr	r3, [pc, #612]	; (8002cd8 <_ftoa+0x35c>)
 8002a74:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002a76:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a78:	f7fd fcd2 	bl	8000420 <__aeabi_dcmplt>
 8002a7c:	1e03      	subs	r3, r0, #0
 8002a7e:	d015      	beq.n	8002aac <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002a80:	683d      	ldr	r5, [r7, #0]
 8002a82:	687c      	ldr	r4, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	9304      	str	r3, [sp, #16]
 8002a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a92:	9303      	str	r3, [sp, #12]
 8002a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9c:	9200      	str	r2, [sp, #0]
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	002b      	movs	r3, r5
 8002aa2:	0022      	movs	r2, r4
 8002aa4:	f000 f9a8 	bl	8002df8 <_etoa>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	e1a1      	b.n	8002df0 <_ftoa+0x474>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002aac:	2453      	movs	r4, #83	; 0x53
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002aba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002abc:	f7fd fcb0 	bl	8000420 <__aeabi_dcmplt>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d00c      	beq.n	8002ade <_ftoa+0x162>
    negative = true;
 8002ac4:	193b      	adds	r3, r7, r4
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 8002aca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ace:	2000      	movs	r0, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f7fe ff81 	bl	80019d8 <__aeabi_dsub>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	000b      	movs	r3, r1
 8002ada:	673a      	str	r2, [r7, #112]	; 0x70
 8002adc:	677b      	str	r3, [r7, #116]	; 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d10c      	bne.n	8002b06 <_ftoa+0x18a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002aec:	2306      	movs	r3, #6
 8002aee:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002af0:	e009      	b.n	8002b06 <_ftoa+0x18a>
    buf[len++] = '0';
 8002af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	657a      	str	r2, [r7, #84]	; 0x54
 8002af8:	2210      	movs	r2, #16
 8002afa:	18ba      	adds	r2, r7, r2
 8002afc:	2130      	movs	r1, #48	; 0x30
 8002afe:	54d1      	strb	r1, [r2, r3]
    prec--;
 8002b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b02:	3b01      	subs	r3, #1
 8002b04:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b08:	2b1f      	cmp	r3, #31
 8002b0a:	d802      	bhi.n	8002b12 <_ftoa+0x196>
 8002b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b0e:	2b09      	cmp	r3, #9
 8002b10:	d8ef      	bhi.n	8002af2 <_ftoa+0x176>
  }

  int whole = (int)value;
 8002b12:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002b14:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002b16:	f7ff faf1 	bl	80020fc <__aeabi_d2iz>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8002b1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b20:	f7ff fb22 	bl	8002168 <__aeabi_i2d>
 8002b24:	0002      	movs	r2, r0
 8002b26:	000b      	movs	r3, r1
 8002b28:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002b2a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002b2c:	f7fe ff54 	bl	80019d8 <__aeabi_dsub>
 8002b30:	0002      	movs	r2, r0
 8002b32:	000b      	movs	r3, r1
 8002b34:	0010      	movs	r0, r2
 8002b36:	0019      	movs	r1, r3
 8002b38:	4a68      	ldr	r2, [pc, #416]	; (8002cdc <_ftoa+0x360>)
 8002b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	18d3      	adds	r3, r2, r3
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f7fe fcdc 	bl	8001500 <__aeabi_dmul>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	000b      	movs	r3, r1
 8002b4c:	633a      	str	r2, [r7, #48]	; 0x30
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
  unsigned long frac = (unsigned long)tmp;
 8002b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b54:	f7fd fcac 	bl	80004b0 <__aeabi_d2uiz>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8002b5c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b5e:	f7ff fb33 	bl	80021c8 <__aeabi_ui2d>
 8002b62:	0002      	movs	r2, r0
 8002b64:	000b      	movs	r3, r1
 8002b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b6a:	f7fe ff35 	bl	80019d8 <__aeabi_dsub>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	000b      	movs	r3, r1
 8002b72:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b74:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (diff > 0.5) {
 8002b76:	2200      	movs	r2, #0
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <_ftoa+0x364>)
 8002b7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b7e:	f7fd fc63 	bl	8000448 <__aeabi_dcmpgt>
 8002b82:	1e03      	subs	r3, r0, #0
 8002b84:	d015      	beq.n	8002bb2 <_ftoa+0x236>
    ++frac;
 8002b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b88:	3301      	adds	r3, #1
 8002b8a:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002b8c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b8e:	f7ff fb1b 	bl	80021c8 <__aeabi_ui2d>
 8002b92:	4a52      	ldr	r2, [pc, #328]	; (8002cdc <_ftoa+0x360>)
 8002b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	18d3      	adds	r3, r2, r3
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f7fd fc5d 	bl	800045c <__aeabi_dcmpge>
 8002ba2:	1e03      	subs	r3, r0, #0
 8002ba4:	d017      	beq.n	8002bd6 <_ftoa+0x25a>
      frac = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 8002baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bac:	3301      	adds	r3, #1
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb0:	e011      	b.n	8002bd6 <_ftoa+0x25a>
    }
  }
  else if (diff < 0.5) {
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <_ftoa+0x364>)
 8002bb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bba:	f7fd fc31 	bl	8000420 <__aeabi_dcmplt>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d109      	bne.n	8002bd6 <_ftoa+0x25a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <_ftoa+0x254>
 8002bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d002      	beq.n	8002bd6 <_ftoa+0x25a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8002bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d12f      	bne.n	8002c3c <_ftoa+0x2c0>
    diff = value - (double)whole;
 8002bdc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002bde:	f7ff fac3 	bl	8002168 <__aeabi_i2d>
 8002be2:	0002      	movs	r2, r0
 8002be4:	000b      	movs	r3, r1
 8002be6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002be8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002bea:	f7fe fef5 	bl	80019d8 <__aeabi_dsub>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	000b      	movs	r3, r1
 8002bf2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	1c1c      	adds	r4, r3, #0
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <_ftoa+0x364>)
 8002bfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c02:	f7fd fc0d 	bl	8000420 <__aeabi_dcmplt>
 8002c06:	1e03      	subs	r3, r0, #0
 8002c08:	d101      	bne.n	8002c0e <_ftoa+0x292>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	1c1c      	adds	r4, r3, #0
 8002c0e:	b2e3      	uxtb	r3, r4
 8002c10:	2201      	movs	r2, #1
 8002c12:	4053      	eors	r3, r2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d107      	bne.n	8002c2a <_ftoa+0x2ae>
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <_ftoa+0x364>)
 8002c1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c22:	f7fd fc11 	bl	8000448 <__aeabi_dcmpgt>
 8002c26:	1e03      	subs	r3, r0, #0
 8002c28:	d046      	beq.n	8002cb8 <_ftoa+0x33c>
 8002c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d100      	bne.n	8002c34 <_ftoa+0x2b8>
 8002c32:	e070      	b.n	8002d16 <_ftoa+0x39a>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c36:	3301      	adds	r3, #1
 8002c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c3a:	e06c      	b.n	8002d16 <_ftoa+0x39a>
    }
  }
  else {
    unsigned int count = prec;
 8002c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c3e:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002c40:	e01b      	b.n	8002c7a <_ftoa+0x2fe>
      --count;
 8002c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c44:	3b01      	subs	r3, #1
 8002c46:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8002c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4a:	210a      	movs	r1, #10
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fd fae1 	bl	8000214 <__aeabi_uidivmod>
 8002c52:	000b      	movs	r3, r1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	1c59      	adds	r1, r3, #1
 8002c5a:	6579      	str	r1, [r7, #84]	; 0x54
 8002c5c:	3230      	adds	r2, #48	; 0x30
 8002c5e:	b2d1      	uxtb	r1, r2
 8002c60:	2210      	movs	r2, #16
 8002c62:	18ba      	adds	r2, r7, r2
 8002c64:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 8002c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c68:	210a      	movs	r1, #10
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7fd fa4c 	bl	8000108 <__udivsi3>
 8002c70:	0003      	movs	r3, r0
 8002c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <_ftoa+0x306>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7c:	2b1f      	cmp	r3, #31
 8002c7e:	d9e0      	bls.n	8002c42 <_ftoa+0x2c6>
 8002c80:	e008      	b.n	8002c94 <_ftoa+0x318>
        break;
 8002c82:	46c0      	nop			; (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002c84:	e006      	b.n	8002c94 <_ftoa+0x318>
      buf[len++] = '0';
 8002c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	657a      	str	r2, [r7, #84]	; 0x54
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	18ba      	adds	r2, r7, r2
 8002c90:	2130      	movs	r1, #48	; 0x30
 8002c92:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c96:	2b1f      	cmp	r3, #31
 8002c98:	d804      	bhi.n	8002ca4 <_ftoa+0x328>
 8002c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	647a      	str	r2, [r7, #68]	; 0x44
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <_ftoa+0x30a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca6:	2b1f      	cmp	r3, #31
 8002ca8:	d835      	bhi.n	8002d16 <_ftoa+0x39a>
      // add decimal
      buf[len++] = '.';
 8002caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	657a      	str	r2, [r7, #84]	; 0x54
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	18ba      	adds	r2, r7, r2
 8002cb4:	212e      	movs	r1, #46	; 0x2e
 8002cb6:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002cb8:	e02d      	b.n	8002d16 <_ftoa+0x39a>
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	080058c8 	.word	0x080058c8
 8002cc0:	ffefffff 	.word	0xffefffff
 8002cc4:	080058cc 	.word	0x080058cc
 8002cc8:	7fefffff 	.word	0x7fefffff
 8002ccc:	080058d4 	.word	0x080058d4
 8002cd0:	080058dc 	.word	0x080058dc
 8002cd4:	41cdcd65 	.word	0x41cdcd65
 8002cd8:	c1cdcd65 	.word	0xc1cdcd65
 8002cdc:	08005b40 	.word	0x08005b40
 8002ce0:	3fe00000 	.word	0x3fe00000
    buf[len++] = (char)(48 + (whole % 10));
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce6:	210a      	movs	r1, #10
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7fd fb7d 	bl	80003e8 <__aeabi_idivmod>
 8002cee:	000b      	movs	r3, r1
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf4:	1c59      	adds	r1, r3, #1
 8002cf6:	6579      	str	r1, [r7, #84]	; 0x54
 8002cf8:	3230      	adds	r2, #48	; 0x30
 8002cfa:	b2d1      	uxtb	r1, r2
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	18ba      	adds	r2, r7, r2
 8002d00:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	210a      	movs	r1, #10
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7fd fa88 	bl	800021c <__divsi3>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <_ftoa+0x3a2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d18:	2b1f      	cmp	r3, #31
 8002d1a:	d9e3      	bls.n	8002ce4 <_ftoa+0x368>
 8002d1c:	e000      	b.n	8002d20 <_ftoa+0x3a4>
      break;
 8002d1e:	46c0      	nop			; (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002d20:	2180      	movs	r1, #128	; 0x80
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2202      	movs	r2, #2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d123      	bne.n	8002d74 <_ftoa+0x3f8>
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2201      	movs	r2, #1
 8002d32:	4013      	ands	r3, r2
 8002d34:	d01e      	beq.n	8002d74 <_ftoa+0x3f8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d014      	beq.n	8002d66 <_ftoa+0x3ea>
 8002d3c:	2353      	movs	r3, #83	; 0x53
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <_ftoa+0x3d4>
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d00a      	beq.n	8002d66 <_ftoa+0x3ea>
      width--;
 8002d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d52:	3b01      	subs	r3, #1
 8002d54:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002d56:	e006      	b.n	8002d66 <_ftoa+0x3ea>
      buf[len++] = '0';
 8002d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	657a      	str	r2, [r7, #84]	; 0x54
 8002d5e:	2210      	movs	r2, #16
 8002d60:	18ba      	adds	r2, r7, r2
 8002d62:	2130      	movs	r1, #48	; 0x30
 8002d64:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002d66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d202      	bcs.n	8002d74 <_ftoa+0x3f8>
 8002d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d70:	2b1f      	cmp	r3, #31
 8002d72:	d9f1      	bls.n	8002d58 <_ftoa+0x3dc>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d76:	2b1f      	cmp	r3, #31
 8002d78:	d827      	bhi.n	8002dca <_ftoa+0x44e>
    if (negative) {
 8002d7a:	2353      	movs	r3, #83	; 0x53
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <_ftoa+0x418>
      buf[len++] = '-';
 8002d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	657a      	str	r2, [r7, #84]	; 0x54
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	18ba      	adds	r2, r7, r2
 8002d8e:	212d      	movs	r1, #45	; 0x2d
 8002d90:	54d1      	strb	r1, [r2, r3]
 8002d92:	e01a      	b.n	8002dca <_ftoa+0x44e>
    }
    else if (flags & FLAGS_PLUS) {
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d007      	beq.n	8002db0 <_ftoa+0x434>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	657a      	str	r2, [r7, #84]	; 0x54
 8002da6:	2210      	movs	r2, #16
 8002da8:	18ba      	adds	r2, r7, r2
 8002daa:	212b      	movs	r1, #43	; 0x2b
 8002dac:	54d1      	strb	r1, [r2, r3]
 8002dae:	e00c      	b.n	8002dca <_ftoa+0x44e>
    }
    else if (flags & FLAGS_SPACE) {
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2208      	movs	r2, #8
 8002db8:	4013      	ands	r3, r2
 8002dba:	d006      	beq.n	8002dca <_ftoa+0x44e>
      buf[len++] = ' ';
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	657a      	str	r2, [r7, #84]	; 0x54
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	18ba      	adds	r2, r7, r2
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002dca:	683c      	ldr	r4, [r7, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	9303      	str	r3, [sp, #12]
 8002dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	2310      	movs	r3, #16
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	0023      	movs	r3, r4
 8002dea:	f7ff fbc7 	bl	800257c <_out_rev>
 8002dee:	0003      	movs	r3, r0
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b017      	add	sp, #92	; 0x5c
 8002df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002df8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfa:	b0a7      	sub	sp, #156	; 0x9c
 8002dfc:	af06      	add	r7, sp, #24
 8002dfe:	6478      	str	r0, [r7, #68]	; 0x44
 8002e00:	6439      	str	r1, [r7, #64]	; 0x40
 8002e02:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002e06:	2698      	movs	r6, #152	; 0x98
 8002e08:	19bb      	adds	r3, r7, r6
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	19b9      	adds	r1, r7, r6
 8002e10:	6808      	ldr	r0, [r1, #0]
 8002e12:	6849      	ldr	r1, [r1, #4]
 8002e14:	f7fd fafe 	bl	8000414 <__aeabi_dcmpeq>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d013      	beq.n	8002e44 <_etoa+0x4c>
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4252      	negs	r2, r2
 8002e20:	4bda      	ldr	r3, [pc, #872]	; (800318c <_etoa+0x394>)
 8002e22:	19b9      	adds	r1, r7, r6
 8002e24:	6808      	ldr	r0, [r1, #0]
 8002e26:	6849      	ldr	r1, [r1, #4]
 8002e28:	f7fd fb0e 	bl	8000448 <__aeabi_dcmpgt>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d109      	bne.n	8002e44 <_etoa+0x4c>
 8002e30:	2201      	movs	r2, #1
 8002e32:	4252      	negs	r2, r2
 8002e34:	4bd6      	ldr	r3, [pc, #856]	; (8003190 <_etoa+0x398>)
 8002e36:	19b9      	adds	r1, r7, r6
 8002e38:	6808      	ldr	r0, [r1, #0]
 8002e3a:	6849      	ldr	r1, [r1, #4]
 8002e3c:	f7fd faf0 	bl	8000420 <__aeabi_dcmplt>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d01b      	beq.n	8002e7c <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e44:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8002e46:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002e48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e4c:	23a8      	movs	r3, #168	; 0xa8
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	9304      	str	r3, [sp, #16]
 8002e54:	23a4      	movs	r3, #164	; 0xa4
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	9303      	str	r3, [sp, #12]
 8002e5c:	23a0      	movs	r3, #160	; 0xa0
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	9302      	str	r3, [sp, #8]
 8002e64:	2398      	movs	r3, #152	; 0x98
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	9200      	str	r2, [sp, #0]
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	002b      	movs	r3, r5
 8002e72:	0022      	movs	r2, r4
 8002e74:	f7ff fd82 	bl	800297c <_ftoa>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	e272      	b.n	8003362 <_etoa+0x56a>
  }

  // determine the sign
  const bool negative = value < 0;
 8002e7c:	233b      	movs	r3, #59	; 0x3b
 8002e7e:	2238      	movs	r2, #56	; 0x38
 8002e80:	189b      	adds	r3, r3, r2
 8002e82:	19de      	adds	r6, r3, r7
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2198      	movs	r1, #152	; 0x98
 8002e8e:	1879      	adds	r1, r7, r1
 8002e90:	6808      	ldr	r0, [r1, #0]
 8002e92:	6849      	ldr	r1, [r1, #4]
 8002e94:	f7fd fac4 	bl	8000420 <__aeabi_dcmplt>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d101      	bne.n	8002ea0 <_etoa+0xa8>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	7033      	strb	r3, [r6, #0]
  if (negative) {
 8002ea4:	233b      	movs	r3, #59	; 0x3b
 8002ea6:	2238      	movs	r2, #56	; 0x38
 8002ea8:	189b      	adds	r3, r3, r2
 8002eaa:	19db      	adds	r3, r3, r7
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00f      	beq.n	8002ed2 <_etoa+0xda>
    value = -value;
 8002eb2:	2198      	movs	r1, #152	; 0x98
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	239c      	movs	r3, #156	; 0x9c
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	4053      	eors	r3, r2
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	1879      	adds	r1, r7, r1
 8002ece:	600a      	str	r2, [r1, #0]
 8002ed0:	604b      	str	r3, [r1, #4]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002ed2:	23a8      	movs	r3, #168	; 0xa8
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4013      	ands	r3, r2
 8002ede:	d103      	bne.n	8002ee8 <_etoa+0xf0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002ee0:	2306      	movs	r3, #6
 8002ee2:	22a0      	movs	r2, #160	; 0xa0
 8002ee4:	18ba      	adds	r2, r7, r2
 8002ee6:	6013      	str	r3, [r2, #0]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002ee8:	2698      	movs	r6, #152	; 0x98
 8002eea:	19bb      	adds	r3, r7, r6
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef8:	0d1b      	lsrs	r3, r3, #20
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	055b      	lsls	r3, r3, #21
 8002f04:	0d5b      	lsrs	r3, r3, #21
 8002f06:	4aa3      	ldr	r2, [pc, #652]	; (8003194 <_etoa+0x39c>)
 8002f08:	4694      	mov	ip, r2
 8002f0a:	4463      	add	r3, ip
 8002f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f12:	2100      	movs	r1, #0
 8002f14:	0010      	movs	r0, r2
 8002f16:	4388      	bics	r0, r1
 8002f18:	0004      	movs	r4, r0
 8002f1a:	031b      	lsls	r3, r3, #12
 8002f1c:	0b1d      	lsrs	r5, r3, #12
 8002f1e:	2300      	movs	r3, #0
 8002f20:	4323      	orrs	r3, r4
 8002f22:	623b      	str	r3, [r7, #32]
 8002f24:	4b9c      	ldr	r3, [pc, #624]	; (8003198 <_etoa+0x3a0>)
 8002f26:	432b      	orrs	r3, r5
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f30:	64fc      	str	r4, [r7, #76]	; 0x4c
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002f32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002f34:	f7ff f918 	bl	8002168 <__aeabi_i2d>
 8002f38:	4a98      	ldr	r2, [pc, #608]	; (800319c <_etoa+0x3a4>)
 8002f3a:	4b99      	ldr	r3, [pc, #612]	; (80031a0 <_etoa+0x3a8>)
 8002f3c:	f7fe fae0 	bl	8001500 <__aeabi_dmul>
 8002f40:	0002      	movs	r2, r0
 8002f42:	000b      	movs	r3, r1
 8002f44:	0010      	movs	r0, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	4a96      	ldr	r2, [pc, #600]	; (80031a4 <_etoa+0x3ac>)
 8002f4a:	4b97      	ldr	r3, [pc, #604]	; (80031a8 <_etoa+0x3b0>)
 8002f4c:	f7fd fb9a 	bl	8000684 <__aeabi_dadd>
 8002f50:	0002      	movs	r2, r0
 8002f52:	000b      	movs	r3, r1
 8002f54:	0014      	movs	r4, r2
 8002f56:	001d      	movs	r5, r3
 8002f58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4b93      	ldr	r3, [pc, #588]	; (80031ac <_etoa+0x3b4>)
 8002f60:	f7fe fd3a 	bl	80019d8 <__aeabi_dsub>
 8002f64:	0002      	movs	r2, r0
 8002f66:	000b      	movs	r3, r1
 8002f68:	0010      	movs	r0, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	4a90      	ldr	r2, [pc, #576]	; (80031b0 <_etoa+0x3b8>)
 8002f6e:	4b91      	ldr	r3, [pc, #580]	; (80031b4 <_etoa+0x3bc>)
 8002f70:	f7fe fac6 	bl	8001500 <__aeabi_dmul>
 8002f74:	0002      	movs	r2, r0
 8002f76:	000b      	movs	r3, r1
 8002f78:	0020      	movs	r0, r4
 8002f7a:	0029      	movs	r1, r5
 8002f7c:	f7fd fb82 	bl	8000684 <__aeabi_dadd>
 8002f80:	0002      	movs	r2, r0
 8002f82:	000b      	movs	r3, r1
 8002f84:	0010      	movs	r0, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	f7ff f8b8 	bl	80020fc <__aeabi_d2iz>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002f90:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002f92:	f7ff f8e9 	bl	8002168 <__aeabi_i2d>
 8002f96:	4a88      	ldr	r2, [pc, #544]	; (80031b8 <_etoa+0x3c0>)
 8002f98:	4b88      	ldr	r3, [pc, #544]	; (80031bc <_etoa+0x3c4>)
 8002f9a:	f7fe fab1 	bl	8001500 <__aeabi_dmul>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	000b      	movs	r3, r1
 8002fa2:	0010      	movs	r0, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4b85      	ldr	r3, [pc, #532]	; (80031c0 <_etoa+0x3c8>)
 8002faa:	f7fd fb6b 	bl	8000684 <__aeabi_dadd>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	000b      	movs	r3, r1
 8002fb2:	0010      	movs	r0, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	f7ff f8a1 	bl	80020fc <__aeabi_d2iz>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002fbe:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002fc0:	f7ff f8d2 	bl	8002168 <__aeabi_i2d>
 8002fc4:	4a7f      	ldr	r2, [pc, #508]	; (80031c4 <_etoa+0x3cc>)
 8002fc6:	4b80      	ldr	r3, [pc, #512]	; (80031c8 <_etoa+0x3d0>)
 8002fc8:	f7fe fa9a 	bl	8001500 <__aeabi_dmul>
 8002fcc:	0002      	movs	r2, r0
 8002fce:	000b      	movs	r3, r1
 8002fd0:	0014      	movs	r4, r2
 8002fd2:	001d      	movs	r5, r3
 8002fd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002fd6:	f7ff f8c7 	bl	8002168 <__aeabi_i2d>
 8002fda:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <_etoa+0x3d4>)
 8002fdc:	4b7c      	ldr	r3, [pc, #496]	; (80031d0 <_etoa+0x3d8>)
 8002fde:	f7fe fa8f 	bl	8001500 <__aeabi_dmul>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	000b      	movs	r3, r1
 8002fe6:	0020      	movs	r0, r4
 8002fe8:	0029      	movs	r1, r5
 8002fea:	f7fe fcf5 	bl	80019d8 <__aeabi_dsub>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	000b      	movs	r3, r1
 8002ff2:	663a      	str	r2, [r7, #96]	; 0x60
 8002ff4:	667b      	str	r3, [r7, #100]	; 0x64
  const double z2 = z * z;
 8002ff6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ffa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002ffc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002ffe:	f7fe fa7f 	bl	8001500 <__aeabi_dmul>
 8003002:	0002      	movs	r2, r0
 8003004:	000b      	movs	r3, r1
 8003006:	65ba      	str	r2, [r7, #88]	; 0x58
 8003008:	65fb      	str	r3, [r7, #92]	; 0x5c
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800300a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300c:	4a71      	ldr	r2, [pc, #452]	; (80031d4 <_etoa+0x3dc>)
 800300e:	4694      	mov	ip, r2
 8003010:	4463      	add	r3, ip
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	17db      	asrs	r3, r3, #31
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	051b      	lsls	r3, r3, #20
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	697c      	ldr	r4, [r7, #20]
 8003026:	64bb      	str	r3, [r7, #72]	; 0x48
 8003028:	64fc      	str	r4, [r7, #76]	; 0x4c
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800302a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800302c:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800302e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003030:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003032:	0002      	movs	r2, r0
 8003034:	000b      	movs	r3, r1
 8003036:	f7fd fb25 	bl	8000684 <__aeabi_dadd>
 800303a:	0002      	movs	r2, r0
 800303c:	000b      	movs	r3, r1
 800303e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003046:	2000      	movs	r0, #0
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	05c9      	lsls	r1, r1, #23
 800304c:	f7fe fcc4 	bl	80019d8 <__aeabi_dsub>
 8003050:	0002      	movs	r2, r0
 8003052:	000b      	movs	r3, r1
 8003054:	623a      	str	r2, [r7, #32]
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	2200      	movs	r2, #0
 800305a:	4b5f      	ldr	r3, [pc, #380]	; (80031d8 <_etoa+0x3e0>)
 800305c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800305e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003060:	f7fd fe4c 	bl	8000cfc <__aeabi_ddiv>
 8003064:	0002      	movs	r2, r0
 8003066:	000b      	movs	r3, r1
 8003068:	0010      	movs	r0, r2
 800306a:	0019      	movs	r1, r3
 800306c:	2200      	movs	r2, #0
 800306e:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <_etoa+0x3e4>)
 8003070:	f7fd fb08 	bl	8000684 <__aeabi_dadd>
 8003074:	0002      	movs	r2, r0
 8003076:	000b      	movs	r3, r1
 8003078:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800307a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800307c:	f7fd fe3e 	bl	8000cfc <__aeabi_ddiv>
 8003080:	0002      	movs	r2, r0
 8003082:	000b      	movs	r3, r1
 8003084:	0010      	movs	r0, r2
 8003086:	0019      	movs	r1, r3
 8003088:	2200      	movs	r2, #0
 800308a:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <_etoa+0x3e8>)
 800308c:	f7fd fafa 	bl	8000684 <__aeabi_dadd>
 8003090:	0002      	movs	r2, r0
 8003092:	000b      	movs	r3, r1
 8003094:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003096:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003098:	f7fd fe30 	bl	8000cfc <__aeabi_ddiv>
 800309c:	0002      	movs	r2, r0
 800309e:	000b      	movs	r3, r1
 80030a0:	6a38      	ldr	r0, [r7, #32]
 80030a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a4:	f7fd faee 	bl	8000684 <__aeabi_dadd>
 80030a8:	0002      	movs	r2, r0
 80030aa:	000b      	movs	r3, r1
 80030ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030b0:	f7fd fe24 	bl	8000cfc <__aeabi_ddiv>
 80030b4:	0002      	movs	r2, r0
 80030b6:	000b      	movs	r3, r1
 80030b8:	0010      	movs	r0, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	2200      	movs	r2, #0
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <_etoa+0x3a0>)
 80030c0:	f7fd fae0 	bl	8000684 <__aeabi_dadd>
 80030c4:	0002      	movs	r2, r0
 80030c6:	000b      	movs	r3, r1
 80030c8:	0020      	movs	r0, r4
 80030ca:	0029      	movs	r1, r5
 80030cc:	f7fe fa18 	bl	8001500 <__aeabi_dmul>
 80030d0:	0002      	movs	r2, r0
 80030d2:	000b      	movs	r3, r1
 80030d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  // correct for rounding errors
  if (value < conv.F) {
 80030d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030dc:	19b9      	adds	r1, r7, r6
 80030de:	6808      	ldr	r0, [r1, #0]
 80030e0:	6849      	ldr	r1, [r1, #4]
 80030e2:	f7fd f99d 	bl	8000420 <__aeabi_dcmplt>
 80030e6:	1e03      	subs	r3, r0, #0
 80030e8:	d00c      	beq.n	8003104 <_etoa+0x30c>
    expval--;
 80030ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030ec:	3b01      	subs	r3, #1
 80030ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    conv.F /= 10;
 80030f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80030f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030f4:	2200      	movs	r2, #0
 80030f6:	4b39      	ldr	r3, [pc, #228]	; (80031dc <_etoa+0x3e4>)
 80030f8:	f7fd fe00 	bl	8000cfc <__aeabi_ddiv>
 80030fc:	0002      	movs	r2, r0
 80030fe:	000b      	movs	r3, r1
 8003100:	64ba      	str	r2, [r7, #72]	; 0x48
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003104:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003106:	2b63      	cmp	r3, #99	; 0x63
 8003108:	dc04      	bgt.n	8003114 <_etoa+0x31c>
 800310a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800310c:	3363      	adds	r3, #99	; 0x63
 800310e:	db01      	blt.n	8003114 <_etoa+0x31c>
 8003110:	2304      	movs	r3, #4
 8003112:	e000      	b.n	8003116 <_etoa+0x31e>
 8003114:	2305      	movs	r3, #5
 8003116:	67bb      	str	r3, [r7, #120]	; 0x78

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003118:	23a8      	movs	r3, #168	; 0xa8
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	4013      	ands	r3, r2
 8003124:	d100      	bne.n	8003128 <_etoa+0x330>
 8003126:	e074      	b.n	8003212 <_etoa+0x41a>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003128:	4a2e      	ldr	r2, [pc, #184]	; (80031e4 <_etoa+0x3ec>)
 800312a:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <_etoa+0x3f0>)
 800312c:	2498      	movs	r4, #152	; 0x98
 800312e:	1939      	adds	r1, r7, r4
 8003130:	6808      	ldr	r0, [r1, #0]
 8003132:	6849      	ldr	r1, [r1, #4]
 8003134:	f7fd f992 	bl	800045c <__aeabi_dcmpge>
 8003138:	1e03      	subs	r3, r0, #0
 800313a:	d059      	beq.n	80031f0 <_etoa+0x3f8>
 800313c:	2200      	movs	r2, #0
 800313e:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <_etoa+0x3f4>)
 8003140:	1939      	adds	r1, r7, r4
 8003142:	6808      	ldr	r0, [r1, #0]
 8003144:	6849      	ldr	r1, [r1, #4]
 8003146:	f7fd f96b 	bl	8000420 <__aeabi_dcmplt>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d050      	beq.n	80031f0 <_etoa+0x3f8>
      if ((int)prec > expval) {
 800314e:	21a0      	movs	r1, #160	; 0xa0
 8003150:	187b      	adds	r3, r7, r1
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003156:	429a      	cmp	r2, r3
 8003158:	da07      	bge.n	800316a <_etoa+0x372>
        prec = (unsigned)((int)prec - expval - 1);
 800315a:	187b      	adds	r3, r7, r1
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	187a      	adds	r2, r7, r1
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e003      	b.n	8003172 <_etoa+0x37a>
      }
      else {
        prec = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	22a0      	movs	r2, #160	; 0xa0
 800316e:	18ba      	adds	r2, r7, r2
 8003170:	6013      	str	r3, [r2, #0]
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003172:	21a8      	movs	r1, #168	; 0xa8
 8003174:	187b      	adds	r3, r7, r1
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	00d2      	lsls	r2, r2, #3
 800317c:	4313      	orrs	r3, r2
 800317e:	187a      	adds	r2, r7, r1
 8003180:	6013      	str	r3, [r2, #0]
      // no characters in exponent
      minwidth = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	67bb      	str	r3, [r7, #120]	; 0x78
      expval   = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	67fb      	str	r3, [r7, #124]	; 0x7c
 800318a:	e042      	b.n	8003212 <_etoa+0x41a>
 800318c:	7fefffff 	.word	0x7fefffff
 8003190:	ffefffff 	.word	0xffefffff
 8003194:	fffffc01 	.word	0xfffffc01
 8003198:	3ff00000 	.word	0x3ff00000
 800319c:	509f79fb 	.word	0x509f79fb
 80031a0:	3fd34413 	.word	0x3fd34413
 80031a4:	8b60c8b3 	.word	0x8b60c8b3
 80031a8:	3fc68a28 	.word	0x3fc68a28
 80031ac:	3ff80000 	.word	0x3ff80000
 80031b0:	636f4361 	.word	0x636f4361
 80031b4:	3fd287a7 	.word	0x3fd287a7
 80031b8:	0979a371 	.word	0x0979a371
 80031bc:	400a934f 	.word	0x400a934f
 80031c0:	3fe00000 	.word	0x3fe00000
 80031c4:	bbb55516 	.word	0xbbb55516
 80031c8:	40026bb1 	.word	0x40026bb1
 80031cc:	fefa39ef 	.word	0xfefa39ef
 80031d0:	3fe62e42 	.word	0x3fe62e42
 80031d4:	000003ff 	.word	0x000003ff
 80031d8:	402c0000 	.word	0x402c0000
 80031dc:	40240000 	.word	0x40240000
 80031e0:	40180000 	.word	0x40180000
 80031e4:	eb1c432d 	.word	0xeb1c432d
 80031e8:	3f1a36e2 	.word	0x3f1a36e2
 80031ec:	412e8480 	.word	0x412e8480
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80031f0:	21a0      	movs	r1, #160	; 0xa0
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <_etoa+0x41a>
 80031fa:	23a8      	movs	r3, #168	; 0xa8
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4013      	ands	r3, r2
 8003206:	d004      	beq.n	8003212 <_etoa+0x41a>
        --prec;
 8003208:	187b      	adds	r3, r7, r1
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3b01      	subs	r3, #1
 800320e:	187a      	adds	r2, r7, r1
 8003210:	6013      	str	r3, [r2, #0]
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003212:	22a4      	movs	r2, #164	; 0xa4
 8003214:	18bb      	adds	r3, r7, r2
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	677b      	str	r3, [r7, #116]	; 0x74
  if (width > minwidth) {
 800321a:	18bb      	adds	r3, r7, r2
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003220:	429a      	cmp	r2, r3
 8003222:	d904      	bls.n	800322e <_etoa+0x436>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003224:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	677b      	str	r3, [r7, #116]	; 0x74
 800322c:	e001      	b.n	8003232 <_etoa+0x43a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	677b      	str	r3, [r7, #116]	; 0x74
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003232:	23a8      	movs	r3, #168	; 0xa8
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2202      	movs	r2, #2
 800323a:	4013      	ands	r3, r2
 800323c:	d004      	beq.n	8003248 <_etoa+0x450>
 800323e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <_etoa+0x450>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	677b      	str	r3, [r7, #116]	; 0x74
  }

  // rescale the float value
  if (expval) {
 8003248:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <_etoa+0x470>
    value /= conv.F;
 800324e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003252:	2498      	movs	r4, #152	; 0x98
 8003254:	1939      	adds	r1, r7, r4
 8003256:	6808      	ldr	r0, [r1, #0]
 8003258:	6849      	ldr	r1, [r1, #4]
 800325a:	f7fd fd4f 	bl	8000cfc <__aeabi_ddiv>
 800325e:	0002      	movs	r2, r0
 8003260:	000b      	movs	r3, r1
 8003262:	1939      	adds	r1, r7, r4
 8003264:	600a      	str	r2, [r1, #0]
 8003266:	604b      	str	r3, [r1, #4]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	657b      	str	r3, [r7, #84]	; 0x54
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800326c:	233b      	movs	r3, #59	; 0x3b
 800326e:	2238      	movs	r2, #56	; 0x38
 8003270:	189b      	adds	r3, r3, r2
 8003272:	19db      	adds	r3, r3, r7
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <_etoa+0x49a>
 800327a:	2398      	movs	r3, #152	; 0x98
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
 8003282:	239c      	movs	r3, #156	; 0x9c
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	0612      	lsls	r2, r2, #24
 800328c:	405a      	eors	r2, r3
 800328e:	637a      	str	r2, [r7, #52]	; 0x34
 8003290:	e005      	b.n	800329e <_etoa+0x4a6>
 8003292:	2398      	movs	r3, #152	; 0x98
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	685c      	ldr	r4, [r3, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
 800329c:	637c      	str	r4, [r7, #52]	; 0x34
 800329e:	23a8      	movs	r3, #168	; 0xa8
 80032a0:	18fa      	adds	r2, r7, r3
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	4a31      	ldr	r2, [pc, #196]	; (800336c <_etoa+0x574>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80032aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80032b0:	9304      	str	r3, [sp, #16]
 80032b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b4:	9303      	str	r3, [sp, #12]
 80032b6:	25a0      	movs	r5, #160	; 0xa0
 80032b8:	197d      	adds	r5, r7, r5
 80032ba:	682b      	ldr	r3, [r5, #0]
 80032bc:	9302      	str	r3, [sp, #8]
 80032be:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80032c0:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80032c2:	9500      	str	r5, [sp, #0]
 80032c4:	9601      	str	r6, [sp, #4]
 80032c6:	0023      	movs	r3, r4
 80032c8:	f7ff fb58 	bl	800297c <_ftoa>
 80032cc:	0003      	movs	r3, r0
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  // output the exponent part
  if (minwidth) {
 80032d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d044      	beq.n	8003360 <_etoa+0x568>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80032d6:	23a8      	movs	r3, #168	; 0xa8
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2220      	movs	r2, #32
 80032de:	4013      	ands	r3, r2
 80032e0:	d001      	beq.n	80032e6 <_etoa+0x4ee>
 80032e2:	2045      	movs	r0, #69	; 0x45
 80032e4:	e000      	b.n	80032e8 <_etoa+0x4f0>
 80032e6:	2065      	movs	r0, #101	; 0x65
 80032e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ea:	1c53      	adds	r3, r2, #1
 80032ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032f2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80032f4:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80032f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032f8:	17da      	asrs	r2, r3, #31
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	4053      	eors	r3, r2
 80032fe:	469c      	mov	ip, r3
 8003300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003302:	0fdb      	lsrs	r3, r3, #31
 8003304:	b2db      	uxtb	r3, r3
 8003306:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003308:	3a01      	subs	r2, #1
 800330a:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 800330c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800330e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003310:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003312:	2605      	movs	r6, #5
 8003314:	9605      	str	r6, [sp, #20]
 8003316:	9204      	str	r2, [sp, #16]
 8003318:	2200      	movs	r2, #0
 800331a:	9203      	str	r2, [sp, #12]
 800331c:	220a      	movs	r2, #10
 800331e:	9202      	str	r2, [sp, #8]
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	4663      	mov	r3, ip
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	002b      	movs	r3, r5
 8003328:	0022      	movs	r2, r4
 800332a:	f7ff fa4a 	bl	80027c2 <_ntoa_long>
 800332e:	0003      	movs	r3, r0
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003332:	23a8      	movs	r3, #168	; 0xa8
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2202      	movs	r2, #2
 800333a:	4013      	ands	r3, r2
 800333c:	d010      	beq.n	8003360 <_etoa+0x568>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800333e:	e007      	b.n	8003350 <_etoa+0x558>
 8003340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003342:	1c53      	adds	r3, r2, #1
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003348:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800334a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800334c:	2020      	movs	r0, #32
 800334e:	47a0      	blx	r4
 8003350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	22a4      	movs	r2, #164	; 0xa4
 8003358:	18ba      	adds	r2, r7, r2
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d8ef      	bhi.n	8003340 <_etoa+0x548>
    }
  }
  return idx;
 8003360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b021      	add	sp, #132	; 0x84
 8003368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	fffff7ff 	.word	0xfffff7ff

08003370 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003372:	46c6      	mov	lr, r8
 8003374:	b500      	push	{lr}
 8003376:	b0a6      	sub	sp, #152	; 0x98
 8003378:	af0a      	add	r7, sp, #40	; 0x28
 800337a:	6278      	str	r0, [r7, #36]	; 0x24
 800337c:	6239      	str	r1, [r7, #32]
 800337e:	61fa      	str	r2, [r7, #28]
 8003380:	61bb      	str	r3, [r7, #24]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (!buffer) {
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <_vsnprintf+0x20>
 800338c:	f000 fc26 	bl	8003bdc <_vsnprintf+0x86c>
    // use null output function
    out = _out_null;
 8003390:	4bd0      	ldr	r3, [pc, #832]	; (80036d4 <_vsnprintf+0x364>)
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
  }

  while (*format)
 8003394:	f000 fc22 	bl	8003bdc <_vsnprintf+0x86c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b25      	cmp	r3, #37	; 0x25
 800339e:	d00d      	beq.n	80033bc <_vsnprintf+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	7818      	ldrb	r0, [r3, #0]
 80033a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033a6:	1c53      	adds	r3, r2, #1
 80033a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80033b0:	47a0      	blx	r4
      format++;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61bb      	str	r3, [r7, #24]
      continue;
 80033b8:	f000 fc10 	bl	8003bdc <_vsnprintf+0x86c>
    }
    else {
      // yes, evaluate it
      format++;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	3301      	adds	r3, #1
 80033c0:	61bb      	str	r3, [r7, #24]
    }

    // evaluate flags
    flags = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    do {
      switch (*format) {
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	3b20      	subs	r3, #32
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d836      	bhi.n	800343e <_vsnprintf+0xce>
 80033d0:	009a      	lsls	r2, r3, #2
 80033d2:	4bc1      	ldr	r3, [pc, #772]	; (80036d8 <_vsnprintf+0x368>)
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80033da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033dc:	2201      	movs	r2, #1
 80033de:	4313      	orrs	r3, r2
 80033e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	3301      	adds	r3, #1
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	2301      	movs	r3, #1
 80033ea:	663b      	str	r3, [r7, #96]	; 0x60
 80033ec:	e02a      	b.n	8003444 <_vsnprintf+0xd4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	2202      	movs	r2, #2
 80033f2:	4313      	orrs	r3, r2
 80033f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	2301      	movs	r3, #1
 80033fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003400:	e020      	b.n	8003444 <_vsnprintf+0xd4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	2204      	movs	r2, #4
 8003406:	4313      	orrs	r3, r2
 8003408:	66fb      	str	r3, [r7, #108]	; 0x6c
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	3301      	adds	r3, #1
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	2301      	movs	r3, #1
 8003412:	663b      	str	r3, [r7, #96]	; 0x60
 8003414:	e016      	b.n	8003444 <_vsnprintf+0xd4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003418:	2208      	movs	r2, #8
 800341a:	4313      	orrs	r3, r2
 800341c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	3301      	adds	r3, #1
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	2301      	movs	r3, #1
 8003426:	663b      	str	r3, [r7, #96]	; 0x60
 8003428:	e00c      	b.n	8003444 <_vsnprintf+0xd4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800342a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342c:	2210      	movs	r2, #16
 800342e:	4313      	orrs	r3, r2
 8003430:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	3301      	adds	r3, #1
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	2301      	movs	r3, #1
 800343a:	663b      	str	r3, [r7, #96]	; 0x60
 800343c:	e002      	b.n	8003444 <_vsnprintf+0xd4>
        default :                                   n = 0U; break;
 800343e:	2300      	movs	r3, #0
 8003440:	663b      	str	r3, [r7, #96]	; 0x60
 8003442:	46c0      	nop			; (mov r8, r8)
      }
    } while (n);
 8003444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1bd      	bne.n	80033c6 <_vsnprintf+0x56>

    // evaluate width field
    width = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (_is_digit(*format)) {
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff f856 	bl	8002504 <_is_digit>
 8003458:	1e03      	subs	r3, r0, #0
 800345a:	d007      	beq.n	800346c <_vsnprintf+0xfc>
      width = _atoi(&format);
 800345c:	2318      	movs	r3, #24
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff f868 	bl	8002536 <_atoi>
 8003466:	0003      	movs	r3, r0
 8003468:	66bb      	str	r3, [r7, #104]	; 0x68
 800346a:	e01c      	b.n	80034a6 <_vsnprintf+0x136>
    }
    else if (*format == '*') {
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b2a      	cmp	r3, #42	; 0x2a
 8003472:	d118      	bne.n	80034a6 <_vsnprintf+0x136>
      const int w = va_arg(va, int);
 8003474:	2388      	movs	r3, #136	; 0x88
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1d1a      	adds	r2, r3, #4
 800347c:	2188      	movs	r1, #136	; 0x88
 800347e:	1879      	adds	r1, r7, r1
 8003480:	600a      	str	r2, [r1, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	64bb      	str	r3, [r7, #72]	; 0x48
      if (w < 0) {
 8003486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003488:	2b00      	cmp	r3, #0
 800348a:	da07      	bge.n	800349c <_vsnprintf+0x12c>
        flags |= FLAGS_LEFT;    // reverse padding
 800348c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348e:	2202      	movs	r2, #2
 8003490:	4313      	orrs	r3, r2
 8003492:	66fb      	str	r3, [r7, #108]	; 0x6c
        width = (unsigned int)-w;
 8003494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003496:	425b      	negs	r3, r3
 8003498:	66bb      	str	r3, [r7, #104]	; 0x68
 800349a:	e001      	b.n	80034a0 <_vsnprintf+0x130>
      }
      else {
        width = (unsigned int)w;
 800349c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349e:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      format++;
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	3301      	adds	r3, #1
 80034a4:	61bb      	str	r3, [r7, #24]
    }

    // evaluate precision field
    precision = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	667b      	str	r3, [r7, #100]	; 0x64
    if (*format == '.') {
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b2e      	cmp	r3, #46	; 0x2e
 80034b0:	d12b      	bne.n	800350a <_vsnprintf+0x19a>
      flags |= FLAGS_PRECISION;
 80034b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	00d2      	lsls	r2, r2, #3
 80034b8:	4313      	orrs	r3, r2
 80034ba:	66fb      	str	r3, [r7, #108]	; 0x6c
      format++;
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	3301      	adds	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
      if (_is_digit(*format)) {
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7ff f81c 	bl	8002504 <_is_digit>
 80034cc:	1e03      	subs	r3, r0, #0
 80034ce:	d007      	beq.n	80034e0 <_vsnprintf+0x170>
        precision = _atoi(&format);
 80034d0:	2318      	movs	r3, #24
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff f82e 	bl	8002536 <_atoi>
 80034da:	0003      	movs	r3, r0
 80034dc:	667b      	str	r3, [r7, #100]	; 0x64
 80034de:	e014      	b.n	800350a <_vsnprintf+0x19a>
      }
      else if (*format == '*') {
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b2a      	cmp	r3, #42	; 0x2a
 80034e6:	d110      	bne.n	800350a <_vsnprintf+0x19a>
        const int prec = (int)va_arg(va, int);
 80034e8:	2388      	movs	r3, #136	; 0x88
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1d1a      	adds	r2, r3, #4
 80034f0:	2188      	movs	r1, #136	; 0x88
 80034f2:	1879      	adds	r1, r7, r1
 80034f4:	600a      	str	r2, [r1, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	647b      	str	r3, [r7, #68]	; 0x44
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80034fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da00      	bge.n	8003502 <_vsnprintf+0x192>
 8003500:	2300      	movs	r3, #0
 8003502:	667b      	str	r3, [r7, #100]	; 0x64
        format++;
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	3301      	adds	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
      }
    }

    // evaluate length field
    switch (*format) {
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	3b68      	subs	r3, #104	; 0x68
 8003510:	2b12      	cmp	r3, #18
 8003512:	d847      	bhi.n	80035a4 <_vsnprintf+0x234>
 8003514:	009a      	lsls	r2, r3, #2
 8003516:	4b71      	ldr	r3, [pc, #452]	; (80036dc <_vsnprintf+0x36c>)
 8003518:	18d3      	adds	r3, r2, r3
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 800351e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	0052      	lsls	r2, r2, #1
 8003524:	4313      	orrs	r3, r2
 8003526:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	3301      	adds	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
        if (*format == 'l') {
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b6c      	cmp	r3, #108	; 0x6c
 8003534:	d138      	bne.n	80035a8 <_vsnprintf+0x238>
          flags |= FLAGS_LONG_LONG;
 8003536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	4313      	orrs	r3, r2
 800353e:	66fb      	str	r3, [r7, #108]	; 0x6c
          format++;
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	3301      	adds	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
        }
        break;
 8003546:	e02f      	b.n	80035a8 <_vsnprintf+0x238>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354a:	2280      	movs	r2, #128	; 0x80
 800354c:	4313      	orrs	r3, r2
 800354e:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	3301      	adds	r3, #1
 8003554:	61bb      	str	r3, [r7, #24]
        if (*format == 'h') {
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b68      	cmp	r3, #104	; 0x68
 800355c:	d126      	bne.n	80035ac <_vsnprintf+0x23c>
          flags |= FLAGS_CHAR;
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	2240      	movs	r2, #64	; 0x40
 8003562:	4313      	orrs	r3, r2
 8003564:	66fb      	str	r3, [r7, #108]	; 0x6c
          format++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3301      	adds	r3, #1
 800356a:	61bb      	str	r3, [r7, #24]
        }
        break;
 800356c:	e01e      	b.n	80035ac <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	0052      	lsls	r2, r2, #1
 8003574:	4313      	orrs	r3, r2
 8003576:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	3301      	adds	r3, #1
 800357c:	61bb      	str	r3, [r7, #24]
        break;
 800357e:	e016      	b.n	80035ae <_vsnprintf+0x23e>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	0092      	lsls	r2, r2, #2
 8003586:	4313      	orrs	r3, r2
 8003588:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	3301      	adds	r3, #1
 800358e:	61bb      	str	r3, [r7, #24]
        break;
 8003590:	e00d      	b.n	80035ae <_vsnprintf+0x23e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	0052      	lsls	r2, r2, #1
 8003598:	4313      	orrs	r3, r2
 800359a:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	3301      	adds	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
        break;
 80035a2:	e004      	b.n	80035ae <_vsnprintf+0x23e>
      default :
        break;
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	e002      	b.n	80035ae <_vsnprintf+0x23e>
        break;
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	e000      	b.n	80035ae <_vsnprintf+0x23e>
        break;
 80035ac:	46c0      	nop			; (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	3b25      	subs	r3, #37	; 0x25
 80035b4:	2b53      	cmp	r3, #83	; 0x53
 80035b6:	d900      	bls.n	80035ba <_vsnprintf+0x24a>
 80035b8:	e303      	b.n	8003bc2 <_vsnprintf+0x852>
 80035ba:	009a      	lsls	r2, r3, #2
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <_vsnprintf+0x370>)
 80035be:	18d3      	adds	r3, r2, r3
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	469f      	mov	pc, r3
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b78      	cmp	r3, #120	; 0x78
 80035ca:	d003      	beq.n	80035d4 <_vsnprintf+0x264>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b58      	cmp	r3, #88	; 0x58
 80035d2:	d102      	bne.n	80035da <_vsnprintf+0x26a>
          base = 16U;
 80035d4:	2310      	movs	r3, #16
 80035d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80035d8:	e013      	b.n	8003602 <_vsnprintf+0x292>
        }
        else if (*format == 'o') {
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b6f      	cmp	r3, #111	; 0x6f
 80035e0:	d102      	bne.n	80035e8 <_vsnprintf+0x278>
          base =  8U;
 80035e2:	2308      	movs	r3, #8
 80035e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80035e6:	e00c      	b.n	8003602 <_vsnprintf+0x292>
        }
        else if (*format == 'b') {
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b62      	cmp	r3, #98	; 0x62
 80035ee:	d102      	bne.n	80035f6 <_vsnprintf+0x286>
          base =  2U;
 80035f0:	2302      	movs	r3, #2
 80035f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80035f4:	e005      	b.n	8003602 <_vsnprintf+0x292>
        }
        else {
          base = 10U;
 80035f6:	230a      	movs	r3, #10
 80035f8:	65bb      	str	r3, [r7, #88]	; 0x58
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80035fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fc:	2210      	movs	r2, #16
 80035fe:	4393      	bics	r3, r2
 8003600:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
        // uppercase
        if (*format == 'X') {
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b58      	cmp	r3, #88	; 0x58
 8003608:	d103      	bne.n	8003612 <_vsnprintf+0x2a2>
          flags |= FLAGS_UPPERCASE;
 800360a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360c:	2220      	movs	r2, #32
 800360e:	4313      	orrs	r3, r2
 8003610:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b69      	cmp	r3, #105	; 0x69
 8003618:	d007      	beq.n	800362a <_vsnprintf+0x2ba>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d003      	beq.n	800362a <_vsnprintf+0x2ba>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003624:	220c      	movs	r2, #12
 8003626:	4393      	bics	r3, r2
 8003628:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800362a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4013      	ands	r3, r2
 8003632:	d003      	beq.n	800363c <_vsnprintf+0x2cc>
          flags &= ~FLAGS_ZEROPAD;
 8003634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003636:	2201      	movs	r2, #1
 8003638:	4393      	bics	r3, r2
 800363a:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b69      	cmp	r3, #105	; 0x69
 8003642:	d004      	beq.n	800364e <_vsnprintf+0x2de>
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b64      	cmp	r3, #100	; 0x64
 800364a:	d000      	beq.n	800364e <_vsnprintf+0x2de>
 800364c:	e0b7      	b.n	80037be <_vsnprintf+0x44e>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800364e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4013      	ands	r3, r2
 8003656:	d045      	beq.n	80036e4 <_vsnprintf+0x374>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003658:	2388      	movs	r3, #136	; 0x88
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3307      	adds	r3, #7
 8003660:	2207      	movs	r2, #7
 8003662:	4393      	bics	r3, r2
 8003664:	001a      	movs	r2, r3
 8003666:	3208      	adds	r2, #8
 8003668:	2188      	movs	r1, #136	; 0x88
 800366a:	1879      	adds	r1, r7, r1
 800366c:	600a      	str	r2, [r1, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	62ba      	str	r2, [r7, #40]	; 0x28
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	2b00      	cmp	r3, #0
 800367c:	da05      	bge.n	800368a <_vsnprintf+0x31a>
 800367e:	2000      	movs	r0, #0
 8003680:	2100      	movs	r1, #0
 8003682:	1a80      	subs	r0, r0, r2
 8003684:	4199      	sbcs	r1, r3
 8003686:	0002      	movs	r2, r0
 8003688:	000b      	movs	r3, r1
 800368a:	0010      	movs	r0, r2
 800368c:	0019      	movs	r1, r3
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	0fdb      	lsrs	r3, r3, #31
 8003692:	b2da      	uxtb	r2, r3
 8003694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	469c      	mov	ip, r3
 80036a0:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 80036a2:	6a3d      	ldr	r5, [r7, #32]
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	4698      	mov	r8, r3
 80036a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036aa:	9308      	str	r3, [sp, #32]
 80036ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ae:	9307      	str	r3, [sp, #28]
 80036b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036b2:	9306      	str	r3, [sp, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	697c      	ldr	r4, [r7, #20]
 80036b8:	9304      	str	r3, [sp, #16]
 80036ba:	9405      	str	r4, [sp, #20]
 80036bc:	9202      	str	r2, [sp, #8]
 80036be:	9000      	str	r0, [sp, #0]
 80036c0:	9101      	str	r1, [sp, #4]
 80036c2:	4663      	mov	r3, ip
 80036c4:	0032      	movs	r2, r6
 80036c6:	0029      	movs	r1, r5
 80036c8:	4640      	mov	r0, r8
 80036ca:	f7ff f8e3 	bl	8002894 <_ntoa_long_long>
 80036ce:	0003      	movs	r3, r0
 80036d0:	65fb      	str	r3, [r7, #92]	; 0x5c
          if (flags & FLAGS_LONG_LONG) {
 80036d2:	e102      	b.n	80038da <_vsnprintf+0x56a>
 80036d4:	08002483 	.word	0x08002483
 80036d8:	08005960 	.word	0x08005960
 80036dc:	080059a4 	.word	0x080059a4
 80036e0:	080059f0 	.word	0x080059f0
#endif
          }
          else if (flags & FLAGS_LONG) {
 80036e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4013      	ands	r3, r2
 80036ec:	d025      	beq.n	800373a <_vsnprintf+0x3ca>
            const long value = va_arg(va, long);
 80036ee:	2388      	movs	r3, #136	; 0x88
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	1d1a      	adds	r2, r3, #4
 80036f6:	2188      	movs	r1, #136	; 0x88
 80036f8:	1879      	adds	r1, r7, r1
 80036fa:	600a      	str	r2, [r1, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	17da      	asrs	r2, r3, #31
 8003704:	189b      	adds	r3, r3, r2
 8003706:	4053      	eors	r3, r2
 8003708:	001e      	movs	r6, r3
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	0fdb      	lsrs	r3, r3, #31
 800370e:	b2da      	uxtb	r2, r3
 8003710:	69fd      	ldr	r5, [r7, #28]
 8003712:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003714:	6a39      	ldr	r1, [r7, #32]
 8003716:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371a:	9305      	str	r3, [sp, #20]
 800371c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371e:	9304      	str	r3, [sp, #16]
 8003720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003722:	9303      	str	r3, [sp, #12]
 8003724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003726:	9302      	str	r3, [sp, #8]
 8003728:	9201      	str	r2, [sp, #4]
 800372a:	9600      	str	r6, [sp, #0]
 800372c:	002b      	movs	r3, r5
 800372e:	0022      	movs	r2, r4
 8003730:	f7ff f847 	bl	80027c2 <_ntoa_long>
 8003734:	0003      	movs	r3, r0
 8003736:	65fb      	str	r3, [r7, #92]	; 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8003738:	e0cf      	b.n	80038da <_vsnprintf+0x56a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800373a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	4013      	ands	r3, r2
 8003740:	d009      	beq.n	8003756 <_vsnprintf+0x3e6>
 8003742:	2388      	movs	r3, #136	; 0x88
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	2188      	movs	r1, #136	; 0x88
 800374c:	1879      	adds	r1, r7, r1
 800374e:	600a      	str	r2, [r1, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e015      	b.n	8003782 <_vsnprintf+0x412>
 8003756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	4013      	ands	r3, r2
 800375c:	d009      	beq.n	8003772 <_vsnprintf+0x402>
 800375e:	2388      	movs	r3, #136	; 0x88
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	1d1a      	adds	r2, r3, #4
 8003766:	2188      	movs	r1, #136	; 0x88
 8003768:	1879      	adds	r1, r7, r1
 800376a:	600a      	str	r2, [r1, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b21b      	sxth	r3, r3
 8003770:	e007      	b.n	8003782 <_vsnprintf+0x412>
 8003772:	2388      	movs	r3, #136	; 0x88
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	2188      	movs	r1, #136	; 0x88
 800377c:	1879      	adds	r1, r7, r1
 800377e:	600a      	str	r2, [r1, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	17da      	asrs	r2, r3, #31
 8003788:	189b      	adds	r3, r3, r2
 800378a:	4053      	eors	r3, r2
 800378c:	001e      	movs	r6, r3
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	0fdb      	lsrs	r3, r3, #31
 8003792:	b2da      	uxtb	r2, r3
 8003794:	69fd      	ldr	r5, [r7, #28]
 8003796:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003798:	6a39      	ldr	r1, [r7, #32]
 800379a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800379c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379e:	9305      	str	r3, [sp, #20]
 80037a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037a2:	9304      	str	r3, [sp, #16]
 80037a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037a6:	9303      	str	r3, [sp, #12]
 80037a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037aa:	9302      	str	r3, [sp, #8]
 80037ac:	9201      	str	r2, [sp, #4]
 80037ae:	9600      	str	r6, [sp, #0]
 80037b0:	002b      	movs	r3, r5
 80037b2:	0022      	movs	r2, r4
 80037b4:	f7ff f805 	bl	80027c2 <_ntoa_long>
 80037b8:	0003      	movs	r3, r0
 80037ba:	65fb      	str	r3, [r7, #92]	; 0x5c
          if (flags & FLAGS_LONG_LONG) {
 80037bc:	e08d      	b.n	80038da <_vsnprintf+0x56a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80037be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4013      	ands	r3, r2
 80037c6:	d02b      	beq.n	8003820 <_vsnprintf+0x4b0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80037c8:	2388      	movs	r3, #136	; 0x88
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3307      	adds	r3, #7
 80037d0:	2207      	movs	r2, #7
 80037d2:	4393      	bics	r3, r2
 80037d4:	001a      	movs	r2, r3
 80037d6:	3208      	adds	r2, #8
 80037d8:	2188      	movs	r1, #136	; 0x88
 80037da:	1879      	adds	r1, r7, r1
 80037dc:	600a      	str	r2, [r1, #0]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	69fe      	ldr	r6, [r7, #28]
 80037ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037ee:	6a3d      	ldr	r5, [r7, #32]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	469c      	mov	ip, r3
 80037f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f6:	9308      	str	r3, [sp, #32]
 80037f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037fa:	9307      	str	r3, [sp, #28]
 80037fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037fe:	9306      	str	r3, [sp, #24]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	68fc      	ldr	r4, [r7, #12]
 8003804:	9304      	str	r3, [sp, #16]
 8003806:	9405      	str	r4, [sp, #20]
 8003808:	2300      	movs	r3, #0
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	9000      	str	r0, [sp, #0]
 800380e:	9101      	str	r1, [sp, #4]
 8003810:	0033      	movs	r3, r6
 8003812:	0029      	movs	r1, r5
 8003814:	4660      	mov	r0, ip
 8003816:	f7ff f83d 	bl	8002894 <_ntoa_long_long>
 800381a:	0003      	movs	r3, r0
 800381c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800381e:	e05c      	b.n	80038da <_vsnprintf+0x56a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4013      	ands	r3, r2
 8003828:	d01d      	beq.n	8003866 <_vsnprintf+0x4f6>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800382a:	2388      	movs	r3, #136	; 0x88
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	1d1a      	adds	r2, r3, #4
 8003832:	2188      	movs	r1, #136	; 0x88
 8003834:	1879      	adds	r1, r7, r1
 8003836:	600a      	str	r2, [r1, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69fd      	ldr	r5, [r7, #28]
 800383c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800383e:	6a39      	ldr	r1, [r7, #32]
 8003840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003842:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003844:	9205      	str	r2, [sp, #20]
 8003846:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003848:	9204      	str	r2, [sp, #16]
 800384a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800384c:	9203      	str	r2, [sp, #12]
 800384e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003850:	9202      	str	r2, [sp, #8]
 8003852:	2200      	movs	r2, #0
 8003854:	9201      	str	r2, [sp, #4]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	002b      	movs	r3, r5
 800385a:	0022      	movs	r2, r4
 800385c:	f7fe ffb1 	bl	80027c2 <_ntoa_long>
 8003860:	0003      	movs	r3, r0
 8003862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003864:	e039      	b.n	80038da <_vsnprintf+0x56a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003868:	2240      	movs	r2, #64	; 0x40
 800386a:	4013      	ands	r3, r2
 800386c:	d009      	beq.n	8003882 <_vsnprintf+0x512>
 800386e:	2388      	movs	r3, #136	; 0x88
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1d1a      	adds	r2, r3, #4
 8003876:	2188      	movs	r1, #136	; 0x88
 8003878:	1879      	adds	r1, r7, r1
 800387a:	600a      	str	r2, [r1, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e015      	b.n	80038ae <_vsnprintf+0x53e>
 8003882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	4013      	ands	r3, r2
 8003888:	d009      	beq.n	800389e <_vsnprintf+0x52e>
 800388a:	2388      	movs	r3, #136	; 0x88
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	1d1a      	adds	r2, r3, #4
 8003892:	2188      	movs	r1, #136	; 0x88
 8003894:	1879      	adds	r1, r7, r1
 8003896:	600a      	str	r2, [r1, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	e007      	b.n	80038ae <_vsnprintf+0x53e>
 800389e:	2388      	movs	r3, #136	; 0x88
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	1d1a      	adds	r2, r3, #4
 80038a6:	2188      	movs	r1, #136	; 0x88
 80038a8:	1879      	adds	r1, r7, r1
 80038aa:	600a      	str	r2, [r1, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80038b0:	69fc      	ldr	r4, [r7, #28]
 80038b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038b4:	6a39      	ldr	r1, [r7, #32]
 80038b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ba:	9305      	str	r3, [sp, #20]
 80038bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038be:	9304      	str	r3, [sp, #16]
 80038c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038c2:	9303      	str	r3, [sp, #12]
 80038c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c6:	9302      	str	r3, [sp, #8]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	0023      	movs	r3, r4
 80038d2:	f7fe ff76 	bl	80027c2 <_ntoa_long>
 80038d6:	0003      	movs	r3, r0
 80038d8:	65fb      	str	r3, [r7, #92]	; 0x5c
          }
        }
        format++;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	3301      	adds	r3, #1
 80038de:	61bb      	str	r3, [r7, #24]
        break;
 80038e0:	e17c      	b.n	8003bdc <_vsnprintf+0x86c>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b46      	cmp	r3, #70	; 0x46
 80038e8:	d103      	bne.n	80038f2 <_vsnprintf+0x582>
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	2220      	movs	r2, #32
 80038ee:	4313      	orrs	r3, r2
 80038f0:	66fb      	str	r3, [r7, #108]	; 0x6c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80038f2:	2388      	movs	r3, #136	; 0x88
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3307      	adds	r3, #7
 80038fa:	2207      	movs	r2, #7
 80038fc:	4393      	bics	r3, r2
 80038fe:	001a      	movs	r2, r3
 8003900:	3208      	adds	r2, #8
 8003902:	2188      	movs	r1, #136	; 0x88
 8003904:	1879      	adds	r1, r7, r1
 8003906:	600a      	str	r2, [r1, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	69fe      	ldr	r6, [r7, #28]
 800390e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8003910:	6a3c      	ldr	r4, [r7, #32]
 8003912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003914:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003916:	9104      	str	r1, [sp, #16]
 8003918:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800391a:	9103      	str	r1, [sp, #12]
 800391c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800391e:	9102      	str	r1, [sp, #8]
 8003920:	9200      	str	r2, [sp, #0]
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	0033      	movs	r3, r6
 8003926:	002a      	movs	r2, r5
 8003928:	0021      	movs	r1, r4
 800392a:	f7ff f827 	bl	800297c <_ftoa>
 800392e:	0003      	movs	r3, r0
 8003930:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	3301      	adds	r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
        break;
 8003938:	e150      	b.n	8003bdc <_vsnprintf+0x86c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b67      	cmp	r3, #103	; 0x67
 8003940:	d003      	beq.n	800394a <_vsnprintf+0x5da>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b47      	cmp	r3, #71	; 0x47
 8003948:	d104      	bne.n	8003954 <_vsnprintf+0x5e4>
 800394a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	0112      	lsls	r2, r2, #4
 8003950:	4313      	orrs	r3, r2
 8003952:	66fb      	str	r3, [r7, #108]	; 0x6c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b45      	cmp	r3, #69	; 0x45
 800395a:	d003      	beq.n	8003964 <_vsnprintf+0x5f4>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b47      	cmp	r3, #71	; 0x47
 8003962:	d103      	bne.n	800396c <_vsnprintf+0x5fc>
 8003964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003966:	2220      	movs	r2, #32
 8003968:	4313      	orrs	r3, r2
 800396a:	66fb      	str	r3, [r7, #108]	; 0x6c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800396c:	2388      	movs	r3, #136	; 0x88
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3307      	adds	r3, #7
 8003974:	2207      	movs	r2, #7
 8003976:	4393      	bics	r3, r2
 8003978:	001a      	movs	r2, r3
 800397a:	3208      	adds	r2, #8
 800397c:	2188      	movs	r1, #136	; 0x88
 800397e:	1879      	adds	r1, r7, r1
 8003980:	600a      	str	r2, [r1, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	69fe      	ldr	r6, [r7, #28]
 8003988:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800398a:	6a3c      	ldr	r4, [r7, #32]
 800398c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800398e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003990:	9104      	str	r1, [sp, #16]
 8003992:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003994:	9103      	str	r1, [sp, #12]
 8003996:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003998:	9102      	str	r1, [sp, #8]
 800399a:	9200      	str	r2, [sp, #0]
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	0033      	movs	r3, r6
 80039a0:	002a      	movs	r2, r5
 80039a2:	0021      	movs	r1, r4
 80039a4:	f7ff fa28 	bl	8002df8 <_etoa>
 80039a8:	0003      	movs	r3, r0
 80039aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61bb      	str	r3, [r7, #24]
        break;
 80039b2:	e113      	b.n	8003bdc <_vsnprintf+0x86c>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80039b4:	2301      	movs	r3, #1
 80039b6:	657b      	str	r3, [r7, #84]	; 0x54
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80039b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d10e      	bne.n	80039de <_vsnprintf+0x66e>
          while (l++ < width) {
 80039c0:	e007      	b.n	80039d2 <_vsnprintf+0x662>
            out(' ', buffer, idx++, maxlen);
 80039c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039c4:	1c53      	adds	r3, r2, #1
 80039c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	6a39      	ldr	r1, [r7, #32]
 80039cc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80039ce:	2020      	movs	r0, #32
 80039d0:	47a0      	blx	r4
          while (l++ < width) {
 80039d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	657a      	str	r2, [r7, #84]	; 0x54
 80039d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039da:	429a      	cmp	r2, r3
 80039dc:	d8f1      	bhi.n	80039c2 <_vsnprintf+0x652>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80039de:	2388      	movs	r3, #136	; 0x88
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	2188      	movs	r1, #136	; 0x88
 80039e8:	1879      	adds	r1, r7, r1
 80039ea:	600a      	str	r2, [r1, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b2d8      	uxtb	r0, r3
 80039f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039f2:	1c53      	adds	r3, r2, #1
 80039f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	6a39      	ldr	r1, [r7, #32]
 80039fa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80039fc:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80039fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a00:	2202      	movs	r2, #2
 8003a02:	4013      	ands	r3, r2
 8003a04:	d00e      	beq.n	8003a24 <_vsnprintf+0x6b4>
          while (l++ < width) {
 8003a06:	e007      	b.n	8003a18 <_vsnprintf+0x6a8>
            out(' ', buffer, idx++, maxlen);
 8003a08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a0a:	1c53      	adds	r3, r2, #1
 8003a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	6a39      	ldr	r1, [r7, #32]
 8003a12:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003a14:	2020      	movs	r0, #32
 8003a16:	47a0      	blx	r4
          while (l++ < width) {
 8003a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	657a      	str	r2, [r7, #84]	; 0x54
 8003a1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d8f1      	bhi.n	8003a08 <_vsnprintf+0x698>
          }
        }
        format++;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61bb      	str	r3, [r7, #24]
        break;
 8003a2a:	e0d7      	b.n	8003bdc <_vsnprintf+0x86c>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003a2c:	2388      	movs	r3, #136	; 0x88
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	2188      	movs	r1, #136	; 0x88
 8003a36:	1879      	adds	r1, r7, r1
 8003a38:	600a      	str	r2, [r1, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	653b      	str	r3, [r7, #80]	; 0x50
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <_vsnprintf+0x6d8>
 8003a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a46:	e001      	b.n	8003a4c <_vsnprintf+0x6dc>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	425b      	negs	r3, r3
 8003a4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a4e:	0019      	movs	r1, r3
 8003a50:	0010      	movs	r0, r2
 8003a52:	f7fe fd3c 	bl	80024ce <_strnlen_s>
 8003a56:	0003      	movs	r3, r0
 8003a58:	64fb      	str	r3, [r7, #76]	; 0x4c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003a5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4013      	ands	r3, r2
 8003a62:	d005      	beq.n	8003a70 <_vsnprintf+0x700>
          l = (l < precision ? l : precision);
 8003a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d900      	bls.n	8003a6e <_vsnprintf+0x6fe>
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a72:	2202      	movs	r2, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	d11a      	bne.n	8003aae <_vsnprintf+0x73e>
          while (l++ < width) {
 8003a78:	e007      	b.n	8003a8a <_vsnprintf+0x71a>
            out(' ', buffer, idx++, maxlen);
 8003a7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a7c:	1c53      	adds	r3, r2, #1
 8003a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	6a39      	ldr	r1, [r7, #32]
 8003a84:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003a86:	2020      	movs	r0, #32
 8003a88:	47a0      	blx	r4
          while (l++ < width) {
 8003a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d8f1      	bhi.n	8003a7a <_vsnprintf+0x70a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003a96:	e00a      	b.n	8003aae <_vsnprintf+0x73e>
          out(*(p++), buffer, idx++, maxlen);
 8003a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	653a      	str	r2, [r7, #80]	; 0x50
 8003a9e:	7818      	ldrb	r0, [r3, #0]
 8003aa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003aa2:	1c53      	adds	r3, r2, #1
 8003aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	6a39      	ldr	r1, [r7, #32]
 8003aaa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003aac:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <_vsnprintf+0x75a>
 8003ab6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4013      	ands	r3, r2
 8003abe:	d0eb      	beq.n	8003a98 <_vsnprintf+0x728>
 8003ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac2:	1e5a      	subs	r2, r3, #1
 8003ac4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e6      	bne.n	8003a98 <_vsnprintf+0x728>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003acc:	2202      	movs	r2, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d00e      	beq.n	8003af0 <_vsnprintf+0x780>
          while (l++ < width) {
 8003ad2:	e007      	b.n	8003ae4 <_vsnprintf+0x774>
            out(' ', buffer, idx++, maxlen);
 8003ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ad6:	1c53      	adds	r3, r2, #1
 8003ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	6a39      	ldr	r1, [r7, #32]
 8003ade:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003ae0:	2020      	movs	r0, #32
 8003ae2:	47a0      	blx	r4
          while (l++ < width) {
 8003ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003aea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d8f1      	bhi.n	8003ad4 <_vsnprintf+0x764>
          }
        }
        format++;
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	3301      	adds	r3, #1
 8003af4:	61bb      	str	r3, [r7, #24]
        break;
 8003af6:	e071      	b.n	8003bdc <_vsnprintf+0x86c>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003af8:	2308      	movs	r3, #8
 8003afa:	66bb      	str	r3, [r7, #104]	; 0x68
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afe:	2221      	movs	r2, #33	; 0x21
 8003b00:	4313      	orrs	r3, r2
 8003b02:	66fb      	str	r3, [r7, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003b04:	212b      	movs	r1, #43	; 0x2b
 8003b06:	2318      	movs	r3, #24
 8003b08:	18cb      	adds	r3, r1, r3
 8003b0a:	19db      	adds	r3, r3, r7
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
        if (is_ll) {
 8003b10:	2318      	movs	r3, #24
 8003b12:	18cb      	adds	r3, r1, r3
 8003b14:	19db      	adds	r3, r3, r7
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d025      	beq.n	8003b68 <_vsnprintf+0x7f8>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003b1c:	2388      	movs	r3, #136	; 0x88
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1d1a      	adds	r2, r3, #4
 8003b24:	2188      	movs	r1, #136	; 0x88
 8003b26:	1879      	adds	r1, r7, r1
 8003b28:	600a      	str	r2, [r1, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	69fd      	ldr	r5, [r7, #28]
 8003b34:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003b36:	6a39      	ldr	r1, [r7, #32]
 8003b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3c:	9308      	str	r3, [sp, #32]
 8003b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b40:	9307      	str	r3, [sp, #28]
 8003b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b44:	9306      	str	r3, [sp, #24]
 8003b46:	2210      	movs	r2, #16
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9204      	str	r2, [sp, #16]
 8003b4c:	9305      	str	r3, [sp, #20]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	9200      	str	r2, [sp, #0]
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	002b      	movs	r3, r5
 8003b5c:	0022      	movs	r2, r4
 8003b5e:	f7fe fe99 	bl	8002894 <_ntoa_long_long>
 8003b62:	0003      	movs	r3, r0
 8003b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b66:	e01c      	b.n	8003ba2 <_vsnprintf+0x832>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003b68:	2388      	movs	r3, #136	; 0x88
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	2188      	movs	r1, #136	; 0x88
 8003b72:	1879      	adds	r1, r7, r1
 8003b74:	600a      	str	r2, [r1, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	001d      	movs	r5, r3
 8003b7a:	69fc      	ldr	r4, [r7, #28]
 8003b7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b7e:	6a39      	ldr	r1, [r7, #32]
 8003b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b84:	9305      	str	r3, [sp, #20]
 8003b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b8c:	9303      	str	r3, [sp, #12]
 8003b8e:	2310      	movs	r3, #16
 8003b90:	9302      	str	r3, [sp, #8]
 8003b92:	2300      	movs	r3, #0
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	9500      	str	r5, [sp, #0]
 8003b98:	0023      	movs	r3, r4
 8003b9a:	f7fe fe12 	bl	80027c2 <_ntoa_long>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	61bb      	str	r3, [r7, #24]
        break;
 8003ba8:	e018      	b.n	8003bdc <_vsnprintf+0x86c>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003baa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bac:	1c53      	adds	r3, r2, #1
 8003bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	6a39      	ldr	r1, [r7, #32]
 8003bb4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003bb6:	2025      	movs	r0, #37	; 0x25
 8003bb8:	47a0      	blx	r4
        format++;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	61bb      	str	r3, [r7, #24]
        break;
 8003bc0:	e00c      	b.n	8003bdc <_vsnprintf+0x86c>

      default :
        out(*format, buffer, idx++, maxlen);
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	7818      	ldrb	r0, [r3, #0]
 8003bc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bc8:	1c53      	adds	r3, r2, #1
 8003bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	6a39      	ldr	r1, [r7, #32]
 8003bd0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003bd2:	47a0      	blx	r4
        format++;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	61bb      	str	r3, [r7, #24]
        break;
 8003bda:	46c0      	nop			; (mov r8, r8)
  while (*format)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <_vsnprintf+0x878>
 8003be4:	f7ff fbd8 	bl	8003398 <_vsnprintf+0x28>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003be8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d302      	bcc.n	8003bf6 <_vsnprintf+0x886>
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	1e5a      	subs	r2, r3, #1
 8003bf4:	e000      	b.n	8003bf8 <_vsnprintf+0x888>
 8003bf6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	6a39      	ldr	r1, [r7, #32]
 8003bfc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003bfe:	2000      	movs	r0, #0
 8003c00:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b01c      	add	sp, #112	; 0x70
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	46b8      	mov	r8, r7
 8003c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c10 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003c10:	b40f      	push	{r0, r1, r2, r3}
 8003c12:	b590      	push	{r4, r7, lr}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003c18:	2324      	movs	r3, #36	; 0x24
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003c1e:	6a3c      	ldr	r4, [r7, #32]
 8003c20:	2301      	movs	r3, #1
 8003c22:	425a      	negs	r2, r3
 8003c24:	1d39      	adds	r1, r7, #4
 8003c26:	4808      	ldr	r0, [pc, #32]	; (8003c48 <printf_+0x38>)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	0023      	movs	r3, r4
 8003c2e:	f7ff fb9f 	bl	8003370 <_vsnprintf>
 8003c32:	0003      	movs	r3, r0
 8003c34:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 8003c36:	68fb      	ldr	r3, [r7, #12]
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b005      	add	sp, #20
 8003c3e:	bc90      	pop	{r4, r7}
 8003c40:	bc08      	pop	{r3}
 8003c42:	b004      	add	sp, #16
 8003c44:	4718      	bx	r3
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	0800249f 	.word	0x0800249f

08003c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_MspInit+0x44>)
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <HAL_MspInit+0x44>)
 8003c58:	2101      	movs	r1, #1
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	619a      	str	r2, [r3, #24]
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_MspInit+0x44>)
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2201      	movs	r2, #1
 8003c64:	4013      	ands	r3, r2
 8003c66:	607b      	str	r3, [r7, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_MspInit+0x44>)
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_MspInit+0x44>)
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	0549      	lsls	r1, r1, #21
 8003c74:	430a      	orrs	r2, r1
 8003c76:	61da      	str	r2, [r3, #28]
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_MspInit+0x44>)
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	055b      	lsls	r3, r3, #21
 8003c80:	4013      	ands	r3, r2
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	40021000 	.word	0x40021000

08003c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b08b      	sub	sp, #44	; 0x2c
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	2414      	movs	r4, #20
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	2314      	movs	r3, #20
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f001 fdf2 	bl	8005890 <memset>
  if(huart->Instance==USART1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <HAL_UART_MspInit+0x94>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d133      	bne.n	8003d1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_UART_MspInit+0x98>)
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <HAL_UART_MspInit+0x98>)
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	01c9      	lsls	r1, r1, #7
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	619a      	str	r2, [r3, #24]
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_UART_MspInit+0x98>)
 8003cc6:	699a      	ldr	r2, [r3, #24]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	01db      	lsls	r3, r3, #7
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_UART_MspInit+0x98>)
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_UART_MspInit+0x98>)
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	0289      	lsls	r1, r1, #10
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	615a      	str	r2, [r3, #20]
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_UART_MspInit+0x98>)
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	029b      	lsls	r3, r3, #10
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cee:	193b      	adds	r3, r7, r4
 8003cf0:	22c0      	movs	r2, #192	; 0xc0
 8003cf2:	00d2      	lsls	r2, r2, #3
 8003cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	0021      	movs	r1, r4
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2200      	movs	r2, #0
 8003d02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	2203      	movs	r2, #3
 8003d08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d10:	187a      	adds	r2, r7, r1
 8003d12:	2390      	movs	r3, #144	; 0x90
 8003d14:	05db      	lsls	r3, r3, #23
 8003d16:	0011      	movs	r1, r2
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 f9b7 	bl	800408c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b00b      	add	sp, #44	; 0x2c
 8003d24:	bd90      	pop	{r4, r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	40013800 	.word	0x40013800
 8003d2c:	40021000 	.word	0x40021000

08003d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d34:	e7fe      	b.n	8003d34 <NMI_Handler+0x4>

08003d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d3a:	e7fe      	b.n	8003d3a <HardFault_Handler+0x4>

08003d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d54:	f000 f8a6 	bl	8003ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d58:	46c0      	nop			; (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <put_char>:
 */

#include "main.h"

void put_char(char character)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	0002      	movs	r2, r0
 8003d70:	1dfb      	adds	r3, r7, #7
 8003d72:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)&character, 1, HAL_MAX_DELAY);
 8003d74:	2301      	movs	r3, #1
 8003d76:	425b      	negs	r3, r3
 8003d78:	1df9      	adds	r1, r7, #7
 8003d7a:	4804      	ldr	r0, [pc, #16]	; (8003d8c <put_char+0x24>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f001 f959 	bl	8005034 <HAL_UART_Transmit>
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b002      	add	sp, #8
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	20000028 	.word	0x20000028

08003d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d90:	4813      	ldr	r0, [pc, #76]	; (8003de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d94:	f7ff ffe3 	bl	8003d5e <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8003d98:	4812      	ldr	r0, [pc, #72]	; (8003de4 <LoopForever+0x6>)
    LDR R1, [R0]
 8003d9a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003d9c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <LoopForever+0xa>)
    CMP R1, R2
 8003da0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003da2:	d105      	bne.n	8003db0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8003da4:	4811      	ldr	r0, [pc, #68]	; (8003dec <LoopForever+0xe>)
    LDR R1,=0x00000001
 8003da6:	4912      	ldr	r1, [pc, #72]	; (8003df0 <LoopForever+0x12>)
    STR R1, [R0]
 8003da8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003daa:	4812      	ldr	r0, [pc, #72]	; (8003df4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003dac:	4912      	ldr	r1, [pc, #72]	; (8003df8 <LoopForever+0x1a>)
    STR R1, [R0]
 8003dae:	6001      	str	r1, [r0, #0]

08003db0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003db0:	4812      	ldr	r0, [pc, #72]	; (8003dfc <LoopForever+0x1e>)
  ldr r1, =_edata
 8003db2:	4913      	ldr	r1, [pc, #76]	; (8003e00 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003db4:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <LoopForever+0x26>)
  movs r3, #0
 8003db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003db8:	e002      	b.n	8003dc0 <LoopCopyDataInit>

08003dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dbe:	3304      	adds	r3, #4

08003dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dc4:	d3f9      	bcc.n	8003dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dc6:	4a10      	ldr	r2, [pc, #64]	; (8003e08 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003dc8:	4c10      	ldr	r4, [pc, #64]	; (8003e0c <LoopForever+0x2e>)
  movs r3, #0
 8003dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dcc:	e001      	b.n	8003dd2 <LoopFillZerobss>

08003dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dd0:	3204      	adds	r2, #4

08003dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dd4:	d3fb      	bcc.n	8003dce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003dd6:	f001 fd37 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dda:	f7fe fa45 	bl	8002268 <main>

08003dde <LoopForever>:

LoopForever:
    b LoopForever
 8003dde:	e7fe      	b.n	8003dde <LoopForever>
  ldr   r0, =_estack
 8003de0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8003de4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003de8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8003dec:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8003df0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003df4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003df8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003e04:	08005bd8 	.word	0x08005bd8
  ldr r2, =_sbss
 8003e08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003e0c:	200000b4 	.word	0x200000b4

08003e10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e10:	e7fe      	b.n	8003e10 <ADC1_IRQHandler>
	...

08003e14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <HAL_Init+0x24>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_Init+0x24>)
 8003e1e:	2110      	movs	r1, #16
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003e24:	2003      	movs	r0, #3
 8003e26:	f000 f809 	bl	8003e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e2a:	f7ff ff0f 	bl	8003c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	40022000 	.word	0x40022000

08003e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e3c:	b590      	push	{r4, r7, lr}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e44:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <HAL_InitTick+0x5c>)
 8003e46:	681c      	ldr	r4, [r3, #0]
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_InitTick+0x60>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	23fa      	movs	r3, #250	; 0xfa
 8003e50:	0098      	lsls	r0, r3, #2
 8003e52:	f7fc f959 	bl	8000108 <__udivsi3>
 8003e56:	0003      	movs	r3, r0
 8003e58:	0019      	movs	r1, r3
 8003e5a:	0020      	movs	r0, r4
 8003e5c:	f7fc f954 	bl	8000108 <__udivsi3>
 8003e60:	0003      	movs	r3, r0
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 f905 	bl	8004072 <HAL_SYSTICK_Config>
 8003e68:	1e03      	subs	r3, r0, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e00f      	b.n	8003e90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d80b      	bhi.n	8003e8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	2301      	movs	r3, #1
 8003e7a:	425b      	negs	r3, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f000 f8e2 	bl	8004048 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_InitTick+0x64>)
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b003      	add	sp, #12
 8003e96:	bd90      	pop	{r4, r7, pc}
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	20000008 	.word	0x20000008
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_IncTick+0x1c>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	001a      	movs	r2, r3
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_IncTick+0x20>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	18d2      	adds	r2, r2, r3
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_IncTick+0x20>)
 8003eb6:	601a      	str	r2, [r3, #0]
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	20000008 	.word	0x20000008
 8003ec4:	200000b0 	.word	0x200000b0

08003ec8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  return uwTick;
 8003ecc:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <HAL_GetTick+0x10>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	200000b0 	.word	0x200000b0

08003edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee4:	f7ff fff0 	bl	8003ec8 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	d005      	beq.n	8003f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_Delay+0x44>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	001a      	movs	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	f7ff ffe0 	bl	8003ec8 <HAL_GetTick>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d8f7      	bhi.n	8003f04 <HAL_Delay+0x28>
  {
  }
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b004      	add	sp, #16
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	20000008 	.word	0x20000008

08003f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	1dfb      	adds	r3, r7, #7
 8003f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f32:	1dfb      	adds	r3, r7, #7
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b7f      	cmp	r3, #127	; 0x7f
 8003f38:	d828      	bhi.n	8003f8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f3a:	4a2f      	ldr	r2, [pc, #188]	; (8003ff8 <__NVIC_SetPriority+0xd4>)
 8003f3c:	1dfb      	adds	r3, r7, #7
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b25b      	sxtb	r3, r3
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	33c0      	adds	r3, #192	; 0xc0
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	589b      	ldr	r3, [r3, r2]
 8003f4a:	1dfa      	adds	r2, r7, #7
 8003f4c:	7812      	ldrb	r2, [r2, #0]
 8003f4e:	0011      	movs	r1, r2
 8003f50:	2203      	movs	r2, #3
 8003f52:	400a      	ands	r2, r1
 8003f54:	00d2      	lsls	r2, r2, #3
 8003f56:	21ff      	movs	r1, #255	; 0xff
 8003f58:	4091      	lsls	r1, r2
 8003f5a:	000a      	movs	r2, r1
 8003f5c:	43d2      	mvns	r2, r2
 8003f5e:	401a      	ands	r2, r3
 8003f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	22ff      	movs	r2, #255	; 0xff
 8003f68:	401a      	ands	r2, r3
 8003f6a:	1dfb      	adds	r3, r7, #7
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	2303      	movs	r3, #3
 8003f72:	4003      	ands	r3, r0
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f78:	481f      	ldr	r0, [pc, #124]	; (8003ff8 <__NVIC_SetPriority+0xd4>)
 8003f7a:	1dfb      	adds	r3, r7, #7
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	430a      	orrs	r2, r1
 8003f84:	33c0      	adds	r3, #192	; 0xc0
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f8a:	e031      	b.n	8003ff0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f8c:	4a1b      	ldr	r2, [pc, #108]	; (8003ffc <__NVIC_SetPriority+0xd8>)
 8003f8e:	1dfb      	adds	r3, r7, #7
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	0019      	movs	r1, r3
 8003f94:	230f      	movs	r3, #15
 8003f96:	400b      	ands	r3, r1
 8003f98:	3b08      	subs	r3, #8
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	3306      	adds	r3, #6
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	18d3      	adds	r3, r2, r3
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	1dfa      	adds	r2, r7, #7
 8003fa8:	7812      	ldrb	r2, [r2, #0]
 8003faa:	0011      	movs	r1, r2
 8003fac:	2203      	movs	r2, #3
 8003fae:	400a      	ands	r2, r1
 8003fb0:	00d2      	lsls	r2, r2, #3
 8003fb2:	21ff      	movs	r1, #255	; 0xff
 8003fb4:	4091      	lsls	r1, r2
 8003fb6:	000a      	movs	r2, r1
 8003fb8:	43d2      	mvns	r2, r2
 8003fba:	401a      	ands	r2, r3
 8003fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	22ff      	movs	r2, #255	; 0xff
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	1dfb      	adds	r3, r7, #7
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	2303      	movs	r3, #3
 8003fce:	4003      	ands	r3, r0
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fd4:	4809      	ldr	r0, [pc, #36]	; (8003ffc <__NVIC_SetPriority+0xd8>)
 8003fd6:	1dfb      	adds	r3, r7, #7
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	001c      	movs	r4, r3
 8003fdc:	230f      	movs	r3, #15
 8003fde:	4023      	ands	r3, r4
 8003fe0:	3b08      	subs	r3, #8
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	3306      	adds	r3, #6
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	18c3      	adds	r3, r0, r3
 8003fec:	3304      	adds	r3, #4
 8003fee:	601a      	str	r2, [r3, #0]
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b003      	add	sp, #12
 8003ff6:	bd90      	pop	{r4, r7, pc}
 8003ff8:	e000e100 	.word	0xe000e100
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1e5a      	subs	r2, r3, #1
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	045b      	lsls	r3, r3, #17
 8004010:	429a      	cmp	r2, r3
 8004012:	d301      	bcc.n	8004018 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004014:	2301      	movs	r3, #1
 8004016:	e010      	b.n	800403a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <SysTick_Config+0x44>)
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	3a01      	subs	r2, #1
 800401e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004020:	2301      	movs	r3, #1
 8004022:	425b      	negs	r3, r3
 8004024:	2103      	movs	r1, #3
 8004026:	0018      	movs	r0, r3
 8004028:	f7ff ff7c 	bl	8003f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <SysTick_Config+0x44>)
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <SysTick_Config+0x44>)
 8004034:	2207      	movs	r2, #7
 8004036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004038:	2300      	movs	r3, #0
}
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	e000e010 	.word	0xe000e010

08004048 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	210f      	movs	r1, #15
 8004054:	187b      	adds	r3, r7, r1
 8004056:	1c02      	adds	r2, r0, #0
 8004058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	187b      	adds	r3, r7, r1
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b25b      	sxtb	r3, r3
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f7ff ff5d 	bl	8003f24 <__NVIC_SetPriority>
}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b004      	add	sp, #16
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	0018      	movs	r0, r3
 800407e:	f7ff ffbf 	bl	8004000 <SysTick_Config>
 8004082:	0003      	movs	r3, r0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800409a:	e149      	b.n	8004330 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2101      	movs	r1, #1
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4091      	lsls	r1, r2
 80040a6:	000a      	movs	r2, r1
 80040a8:	4013      	ands	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d100      	bne.n	80040b4 <HAL_GPIO_Init+0x28>
 80040b2:	e13a      	b.n	800432a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2203      	movs	r2, #3
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d005      	beq.n	80040cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2203      	movs	r2, #3
 80040c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d130      	bne.n	800412e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	409a      	lsls	r2, r3
 80040da:	0013      	movs	r3, r2
 80040dc:	43da      	mvns	r2, r3
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	409a      	lsls	r2, r3
 80040ee:	0013      	movs	r3, r2
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004102:	2201      	movs	r2, #1
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	409a      	lsls	r2, r3
 8004108:	0013      	movs	r3, r2
 800410a:	43da      	mvns	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	2201      	movs	r2, #1
 800411a:	401a      	ands	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	409a      	lsls	r2, r3
 8004120:	0013      	movs	r3, r2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2203      	movs	r2, #3
 8004134:	4013      	ands	r3, r2
 8004136:	2b03      	cmp	r3, #3
 8004138:	d017      	beq.n	800416a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	2203      	movs	r2, #3
 8004146:	409a      	lsls	r2, r3
 8004148:	0013      	movs	r3, r2
 800414a:	43da      	mvns	r2, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	0013      	movs	r3, r2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2203      	movs	r2, #3
 8004170:	4013      	ands	r3, r2
 8004172:	2b02      	cmp	r3, #2
 8004174:	d123      	bne.n	80041be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	08da      	lsrs	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3208      	adds	r2, #8
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	58d3      	ldr	r3, [r2, r3]
 8004182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2207      	movs	r2, #7
 8004188:	4013      	ands	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	220f      	movs	r2, #15
 800418e:	409a      	lsls	r2, r3
 8004190:	0013      	movs	r3, r2
 8004192:	43da      	mvns	r2, r3
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4013      	ands	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2107      	movs	r1, #7
 80041a2:	400b      	ands	r3, r1
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	409a      	lsls	r2, r3
 80041a8:	0013      	movs	r3, r2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	08da      	lsrs	r2, r3, #3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3208      	adds	r2, #8
 80041b8:	0092      	lsls	r2, r2, #2
 80041ba:	6939      	ldr	r1, [r7, #16]
 80041bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	2203      	movs	r2, #3
 80041ca:	409a      	lsls	r2, r3
 80041cc:	0013      	movs	r3, r2
 80041ce:	43da      	mvns	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2203      	movs	r2, #3
 80041dc:	401a      	ands	r2, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	409a      	lsls	r2, r3
 80041e4:	0013      	movs	r3, r2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	23c0      	movs	r3, #192	; 0xc0
 80041f8:	029b      	lsls	r3, r3, #10
 80041fa:	4013      	ands	r3, r2
 80041fc:	d100      	bne.n	8004200 <HAL_GPIO_Init+0x174>
 80041fe:	e094      	b.n	800432a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004200:	4b51      	ldr	r3, [pc, #324]	; (8004348 <HAL_GPIO_Init+0x2bc>)
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	4b50      	ldr	r3, [pc, #320]	; (8004348 <HAL_GPIO_Init+0x2bc>)
 8004206:	2101      	movs	r1, #1
 8004208:	430a      	orrs	r2, r1
 800420a:	619a      	str	r2, [r3, #24]
 800420c:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <HAL_GPIO_Init+0x2bc>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2201      	movs	r2, #1
 8004212:	4013      	ands	r3, r2
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004218:	4a4c      	ldr	r2, [pc, #304]	; (800434c <HAL_GPIO_Init+0x2c0>)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	3302      	adds	r3, #2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	589b      	ldr	r3, [r3, r2]
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2203      	movs	r2, #3
 800422a:	4013      	ands	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	220f      	movs	r2, #15
 8004230:	409a      	lsls	r2, r3
 8004232:	0013      	movs	r3, r2
 8004234:	43da      	mvns	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	2390      	movs	r3, #144	; 0x90
 8004240:	05db      	lsls	r3, r3, #23
 8004242:	429a      	cmp	r2, r3
 8004244:	d00d      	beq.n	8004262 <HAL_GPIO_Init+0x1d6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a41      	ldr	r2, [pc, #260]	; (8004350 <HAL_GPIO_Init+0x2c4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <HAL_GPIO_Init+0x1d2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a40      	ldr	r2, [pc, #256]	; (8004354 <HAL_GPIO_Init+0x2c8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_GPIO_Init+0x1ce>
 8004256:	2302      	movs	r3, #2
 8004258:	e004      	b.n	8004264 <HAL_GPIO_Init+0x1d8>
 800425a:	2305      	movs	r3, #5
 800425c:	e002      	b.n	8004264 <HAL_GPIO_Init+0x1d8>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HAL_GPIO_Init+0x1d8>
 8004262:	2300      	movs	r3, #0
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	2103      	movs	r1, #3
 8004268:	400a      	ands	r2, r1
 800426a:	0092      	lsls	r2, r2, #2
 800426c:	4093      	lsls	r3, r2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004274:	4935      	ldr	r1, [pc, #212]	; (800434c <HAL_GPIO_Init+0x2c0>)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	3302      	adds	r3, #2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004282:	4b35      	ldr	r3, [pc, #212]	; (8004358 <HAL_GPIO_Init+0x2cc>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	43da      	mvns	r2, r3
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	035b      	lsls	r3, r3, #13
 800429a:	4013      	ands	r3, r2
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042a6:	4b2c      	ldr	r3, [pc, #176]	; (8004358 <HAL_GPIO_Init+0x2cc>)
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <HAL_GPIO_Init+0x2cc>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	43da      	mvns	r2, r3
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	039b      	lsls	r3, r3, #14
 80042c4:	4013      	ands	r3, r2
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80042d0:	4b21      	ldr	r3, [pc, #132]	; (8004358 <HAL_GPIO_Init+0x2cc>)
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80042d6:	4b20      	ldr	r3, [pc, #128]	; (8004358 <HAL_GPIO_Init+0x2cc>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	43da      	mvns	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	4013      	ands	r3, r2
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042fa:	4b17      	ldr	r3, [pc, #92]	; (8004358 <HAL_GPIO_Init+0x2cc>)
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004300:	4b15      	ldr	r3, [pc, #84]	; (8004358 <HAL_GPIO_Init+0x2cc>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	43da      	mvns	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	025b      	lsls	r3, r3, #9
 8004318:	4013      	ands	r3, r2
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_GPIO_Init+0x2cc>)
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	40da      	lsrs	r2, r3
 8004338:	1e13      	subs	r3, r2, #0
 800433a:	d000      	beq.n	800433e <HAL_GPIO_Init+0x2b2>
 800433c:	e6ae      	b.n	800409c <HAL_GPIO_Init+0x10>
  } 
}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	b006      	add	sp, #24
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	40010000 	.word	0x40010000
 8004350:	48000400 	.word	0x48000400
 8004354:	48000800 	.word	0x48000800
 8004358:	40010400 	.word	0x40010400

0800435c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	0008      	movs	r0, r1
 8004366:	0011      	movs	r1, r2
 8004368:	1cbb      	adds	r3, r7, #2
 800436a:	1c02      	adds	r2, r0, #0
 800436c:	801a      	strh	r2, [r3, #0]
 800436e:	1c7b      	adds	r3, r7, #1
 8004370:	1c0a      	adds	r2, r1, #0
 8004372:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004374:	1c7b      	adds	r3, r7, #1
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800437c:	1cbb      	adds	r3, r7, #2
 800437e:	881a      	ldrh	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004384:	e003      	b.n	800438e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004386:	1cbb      	adds	r3, r7, #2
 8004388:	881a      	ldrh	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	46bd      	mov	sp, r7
 8004392:	b002      	add	sp, #8
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	000a      	movs	r2, r1
 80043a0:	1cbb      	adds	r3, r7, #2
 80043a2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043aa:	1cbb      	adds	r3, r7, #2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4013      	ands	r3, r2
 80043b2:	041a      	lsls	r2, r3, #16
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	1cb9      	adds	r1, r7, #2
 80043ba:	8809      	ldrh	r1, [r1, #0]
 80043bc:	400b      	ands	r3, r1
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b004      	add	sp, #16
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f000 fb76 	bl	8004acc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2201      	movs	r2, #1
 80043e6:	4013      	ands	r3, r2
 80043e8:	d100      	bne.n	80043ec <HAL_RCC_OscConfig+0x20>
 80043ea:	e08e      	b.n	800450a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043ec:	4bc5      	ldr	r3, [pc, #788]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	220c      	movs	r2, #12
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d00e      	beq.n	8004416 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043f8:	4bc2      	ldr	r3, [pc, #776]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	220c      	movs	r2, #12
 80043fe:	4013      	ands	r3, r2
 8004400:	2b08      	cmp	r3, #8
 8004402:	d117      	bne.n	8004434 <HAL_RCC_OscConfig+0x68>
 8004404:	4bbf      	ldr	r3, [pc, #764]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	23c0      	movs	r3, #192	; 0xc0
 800440a:	025b      	lsls	r3, r3, #9
 800440c:	401a      	ands	r2, r3
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	429a      	cmp	r2, r3
 8004414:	d10e      	bne.n	8004434 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004416:	4bbb      	ldr	r3, [pc, #748]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	2380      	movs	r3, #128	; 0x80
 800441c:	029b      	lsls	r3, r3, #10
 800441e:	4013      	ands	r3, r2
 8004420:	d100      	bne.n	8004424 <HAL_RCC_OscConfig+0x58>
 8004422:	e071      	b.n	8004508 <HAL_RCC_OscConfig+0x13c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d000      	beq.n	800442e <HAL_RCC_OscConfig+0x62>
 800442c:	e06c      	b.n	8004508 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f000 fb4c 	bl	8004acc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x80>
 800443c:	4bb1      	ldr	r3, [pc, #708]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4bb0      	ldr	r3, [pc, #704]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	0249      	lsls	r1, r1, #9
 8004446:	430a      	orrs	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	e02f      	b.n	80044ac <HAL_RCC_OscConfig+0xe0>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10c      	bne.n	800446e <HAL_RCC_OscConfig+0xa2>
 8004454:	4bab      	ldr	r3, [pc, #684]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4baa      	ldr	r3, [pc, #680]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800445a:	49ab      	ldr	r1, [pc, #684]	; (8004708 <HAL_RCC_OscConfig+0x33c>)
 800445c:	400a      	ands	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	4ba8      	ldr	r3, [pc, #672]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4ba7      	ldr	r3, [pc, #668]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004466:	49a9      	ldr	r1, [pc, #676]	; (800470c <HAL_RCC_OscConfig+0x340>)
 8004468:	400a      	ands	r2, r1
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e01e      	b.n	80044ac <HAL_RCC_OscConfig+0xe0>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b05      	cmp	r3, #5
 8004474:	d10e      	bne.n	8004494 <HAL_RCC_OscConfig+0xc8>
 8004476:	4ba3      	ldr	r3, [pc, #652]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4ba2      	ldr	r3, [pc, #648]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800447c:	2180      	movs	r1, #128	; 0x80
 800447e:	02c9      	lsls	r1, r1, #11
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	4b9f      	ldr	r3, [pc, #636]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b9e      	ldr	r3, [pc, #632]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	0249      	lsls	r1, r1, #9
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0xe0>
 8004494:	4b9b      	ldr	r3, [pc, #620]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b9a      	ldr	r3, [pc, #616]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800449a:	499b      	ldr	r1, [pc, #620]	; (8004708 <HAL_RCC_OscConfig+0x33c>)
 800449c:	400a      	ands	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	4b98      	ldr	r3, [pc, #608]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b97      	ldr	r3, [pc, #604]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80044a6:	4999      	ldr	r1, [pc, #612]	; (800470c <HAL_RCC_OscConfig+0x340>)
 80044a8:	400a      	ands	r2, r1
 80044aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d014      	beq.n	80044de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7ff fd08 	bl	8003ec8 <HAL_GetTick>
 80044b8:	0003      	movs	r3, r0
 80044ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044be:	f7ff fd03 	bl	8003ec8 <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	; 0x64
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e2fd      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d0:	4b8c      	ldr	r3, [pc, #560]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	029b      	lsls	r3, r3, #10
 80044d8:	4013      	ands	r3, r2
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0xf2>
 80044dc:	e015      	b.n	800450a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7ff fcf3 	bl	8003ec8 <HAL_GetTick>
 80044e2:	0003      	movs	r3, r0
 80044e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e8:	f7ff fcee 	bl	8003ec8 <HAL_GetTick>
 80044ec:	0002      	movs	r2, r0
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e2e8      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	4b82      	ldr	r3, [pc, #520]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	029b      	lsls	r3, r3, #10
 8004502:	4013      	ands	r3, r2
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x11c>
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	d100      	bne.n	8004516 <HAL_RCC_OscConfig+0x14a>
 8004514:	e06c      	b.n	80045f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004516:	4b7b      	ldr	r3, [pc, #492]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	220c      	movs	r2, #12
 800451c:	4013      	ands	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004520:	4b78      	ldr	r3, [pc, #480]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	220c      	movs	r2, #12
 8004526:	4013      	ands	r3, r2
 8004528:	2b08      	cmp	r3, #8
 800452a:	d11f      	bne.n	800456c <HAL_RCC_OscConfig+0x1a0>
 800452c:	4b75      	ldr	r3, [pc, #468]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	23c0      	movs	r3, #192	; 0xc0
 8004532:	025b      	lsls	r3, r3, #9
 8004534:	401a      	ands	r2, r3
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	429a      	cmp	r2, r3
 800453c:	d116      	bne.n	800456c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453e:	4b71      	ldr	r3, [pc, #452]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	d005      	beq.n	8004554 <HAL_RCC_OscConfig+0x188>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d001      	beq.n	8004554 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e2bb      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004554:	4b6b      	ldr	r3, [pc, #428]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	22f8      	movs	r2, #248	; 0xf8
 800455a:	4393      	bics	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00da      	lsls	r2, r3, #3
 8004564:	4b67      	ldr	r3, [pc, #412]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004566:	430a      	orrs	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	e041      	b.n	80045f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d024      	beq.n	80045be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004574:	4b63      	ldr	r3, [pc, #396]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b62      	ldr	r3, [pc, #392]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800457a:	2101      	movs	r1, #1
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7ff fca2 	bl	8003ec8 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458a:	f7ff fc9d 	bl	8003ec8 <HAL_GetTick>
 800458e:	0002      	movs	r2, r0
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e297      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459c:	4b59      	ldr	r3, [pc, #356]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2202      	movs	r2, #2
 80045a2:	4013      	ands	r3, r2
 80045a4:	d0f1      	beq.n	800458a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a6:	4b57      	ldr	r3, [pc, #348]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	22f8      	movs	r2, #248	; 0xf8
 80045ac:	4393      	bics	r3, r2
 80045ae:	0019      	movs	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	00da      	lsls	r2, r3, #3
 80045b6:	4b53      	ldr	r3, [pc, #332]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e018      	b.n	80045f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045be:	4b51      	ldr	r3, [pc, #324]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b50      	ldr	r3, [pc, #320]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80045c4:	2101      	movs	r1, #1
 80045c6:	438a      	bics	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7ff fc7d 	bl	8003ec8 <HAL_GetTick>
 80045ce:	0003      	movs	r3, r0
 80045d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d4:	f7ff fc78 	bl	8003ec8 <HAL_GetTick>
 80045d8:	0002      	movs	r2, r0
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e272      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e6:	4b47      	ldr	r3, [pc, #284]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2202      	movs	r2, #2
 80045ec:	4013      	ands	r3, r2
 80045ee:	d1f1      	bne.n	80045d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2208      	movs	r2, #8
 80045f6:	4013      	ands	r3, r2
 80045f8:	d036      	beq.n	8004668 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d019      	beq.n	8004636 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004602:	4b40      	ldr	r3, [pc, #256]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004606:	4b3f      	ldr	r3, [pc, #252]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004608:	2101      	movs	r1, #1
 800460a:	430a      	orrs	r2, r1
 800460c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7ff fc5b 	bl	8003ec8 <HAL_GetTick>
 8004612:	0003      	movs	r3, r0
 8004614:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004618:	f7ff fc56 	bl	8003ec8 <HAL_GetTick>
 800461c:	0002      	movs	r2, r0
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e250      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	4b36      	ldr	r3, [pc, #216]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	d0f1      	beq.n	8004618 <HAL_RCC_OscConfig+0x24c>
 8004634:	e018      	b.n	8004668 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004636:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800463a:	4b32      	ldr	r3, [pc, #200]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800463c:	2101      	movs	r1, #1
 800463e:	438a      	bics	r2, r1
 8004640:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004642:	f7ff fc41 	bl	8003ec8 <HAL_GetTick>
 8004646:	0003      	movs	r3, r0
 8004648:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464c:	f7ff fc3c 	bl	8003ec8 <HAL_GetTick>
 8004650:	0002      	movs	r2, r0
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e236      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465e:	4b29      	ldr	r3, [pc, #164]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	2202      	movs	r2, #2
 8004664:	4013      	ands	r3, r2
 8004666:	d1f1      	bne.n	800464c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2204      	movs	r2, #4
 800466e:	4013      	ands	r3, r2
 8004670:	d100      	bne.n	8004674 <HAL_RCC_OscConfig+0x2a8>
 8004672:	e0b5      	b.n	80047e0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004674:	201f      	movs	r0, #31
 8004676:	183b      	adds	r3, r7, r0
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467c:	4b21      	ldr	r3, [pc, #132]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	055b      	lsls	r3, r3, #21
 8004684:	4013      	ands	r3, r2
 8004686:	d110      	bne.n	80046aa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 800468e:	2180      	movs	r1, #128	; 0x80
 8004690:	0549      	lsls	r1, r1, #21
 8004692:	430a      	orrs	r2, r1
 8004694:	61da      	str	r2, [r3, #28]
 8004696:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	055b      	lsls	r3, r3, #21
 800469e:	4013      	ands	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046a4:	183b      	adds	r3, r7, r0
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046aa:	4b19      	ldr	r3, [pc, #100]	; (8004710 <HAL_RCC_OscConfig+0x344>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	4013      	ands	r3, r2
 80046b4:	d11a      	bne.n	80046ec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <HAL_RCC_OscConfig+0x344>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_RCC_OscConfig+0x344>)
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	0049      	lsls	r1, r1, #1
 80046c0:	430a      	orrs	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c4:	f7ff fc00 	bl	8003ec8 <HAL_GetTick>
 80046c8:	0003      	movs	r3, r0
 80046ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ce:	f7ff fbfb 	bl	8003ec8 <HAL_GetTick>
 80046d2:	0002      	movs	r2, r0
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b64      	cmp	r3, #100	; 0x64
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e1f5      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCC_OscConfig+0x344>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4013      	ands	r3, r2
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10f      	bne.n	8004714 <HAL_RCC_OscConfig+0x348>
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	4b02      	ldr	r3, [pc, #8]	; (8004704 <HAL_RCC_OscConfig+0x338>)
 80046fa:	2101      	movs	r1, #1
 80046fc:	430a      	orrs	r2, r1
 80046fe:	621a      	str	r2, [r3, #32]
 8004700:	e036      	b.n	8004770 <HAL_RCC_OscConfig+0x3a4>
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	40021000 	.word	0x40021000
 8004708:	fffeffff 	.word	0xfffeffff
 800470c:	fffbffff 	.word	0xfffbffff
 8004710:	40007000 	.word	0x40007000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10c      	bne.n	8004736 <HAL_RCC_OscConfig+0x36a>
 800471c:	4bca      	ldr	r3, [pc, #808]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800471e:	6a1a      	ldr	r2, [r3, #32]
 8004720:	4bc9      	ldr	r3, [pc, #804]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004722:	2101      	movs	r1, #1
 8004724:	438a      	bics	r2, r1
 8004726:	621a      	str	r2, [r3, #32]
 8004728:	4bc7      	ldr	r3, [pc, #796]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800472a:	6a1a      	ldr	r2, [r3, #32]
 800472c:	4bc6      	ldr	r3, [pc, #792]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800472e:	2104      	movs	r1, #4
 8004730:	438a      	bics	r2, r1
 8004732:	621a      	str	r2, [r3, #32]
 8004734:	e01c      	b.n	8004770 <HAL_RCC_OscConfig+0x3a4>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x38c>
 800473e:	4bc2      	ldr	r3, [pc, #776]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004740:	6a1a      	ldr	r2, [r3, #32]
 8004742:	4bc1      	ldr	r3, [pc, #772]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004744:	2104      	movs	r1, #4
 8004746:	430a      	orrs	r2, r1
 8004748:	621a      	str	r2, [r3, #32]
 800474a:	4bbf      	ldr	r3, [pc, #764]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800474c:	6a1a      	ldr	r2, [r3, #32]
 800474e:	4bbe      	ldr	r3, [pc, #760]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004750:	2101      	movs	r1, #1
 8004752:	430a      	orrs	r2, r1
 8004754:	621a      	str	r2, [r3, #32]
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0x3a4>
 8004758:	4bbb      	ldr	r3, [pc, #748]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	4bba      	ldr	r3, [pc, #744]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800475e:	2101      	movs	r1, #1
 8004760:	438a      	bics	r2, r1
 8004762:	621a      	str	r2, [r3, #32]
 8004764:	4bb8      	ldr	r3, [pc, #736]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004766:	6a1a      	ldr	r2, [r3, #32]
 8004768:	4bb7      	ldr	r3, [pc, #732]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800476a:	2104      	movs	r1, #4
 800476c:	438a      	bics	r2, r1
 800476e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d014      	beq.n	80047a2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004778:	f7ff fba6 	bl	8003ec8 <HAL_GetTick>
 800477c:	0003      	movs	r3, r0
 800477e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004780:	e009      	b.n	8004796 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7ff fba1 	bl	8003ec8 <HAL_GetTick>
 8004786:	0002      	movs	r2, r0
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	4aaf      	ldr	r2, [pc, #700]	; (8004a4c <HAL_RCC_OscConfig+0x680>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e19a      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004796:	4bac      	ldr	r3, [pc, #688]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	2202      	movs	r2, #2
 800479c:	4013      	ands	r3, r2
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x3b6>
 80047a0:	e013      	b.n	80047ca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a2:	f7ff fb91 	bl	8003ec8 <HAL_GetTick>
 80047a6:	0003      	movs	r3, r0
 80047a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047aa:	e009      	b.n	80047c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7ff fb8c 	bl	8003ec8 <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	4aa5      	ldr	r2, [pc, #660]	; (8004a4c <HAL_RCC_OscConfig+0x680>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e185      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c0:	4ba1      	ldr	r3, [pc, #644]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	2202      	movs	r2, #2
 80047c6:	4013      	ands	r3, r2
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047ca:	231f      	movs	r3, #31
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d105      	bne.n	80047e0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d4:	4b9c      	ldr	r3, [pc, #624]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	4b9b      	ldr	r3, [pc, #620]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80047da:	499d      	ldr	r1, [pc, #628]	; (8004a50 <HAL_RCC_OscConfig+0x684>)
 80047dc:	400a      	ands	r2, r1
 80047de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2210      	movs	r2, #16
 80047e6:	4013      	ands	r3, r2
 80047e8:	d063      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d12a      	bne.n	8004848 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80047f2:	4b95      	ldr	r3, [pc, #596]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80047f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f6:	4b94      	ldr	r3, [pc, #592]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80047f8:	2104      	movs	r1, #4
 80047fa:	430a      	orrs	r2, r1
 80047fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80047fe:	4b92      	ldr	r3, [pc, #584]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004802:	4b91      	ldr	r3, [pc, #580]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004804:	2101      	movs	r1, #1
 8004806:	430a      	orrs	r2, r1
 8004808:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7ff fb5d 	bl	8003ec8 <HAL_GetTick>
 800480e:	0003      	movs	r3, r0
 8004810:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004814:	f7ff fb58 	bl	8003ec8 <HAL_GetTick>
 8004818:	0002      	movs	r2, r0
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e152      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004826:	4b88      	ldr	r3, [pc, #544]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	d0f1      	beq.n	8004814 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004830:	4b85      	ldr	r3, [pc, #532]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	22f8      	movs	r2, #248	; 0xf8
 8004836:	4393      	bics	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	00da      	lsls	r2, r3, #3
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004842:	430a      	orrs	r2, r1
 8004844:	635a      	str	r2, [r3, #52]	; 0x34
 8004846:	e034      	b.n	80048b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	3305      	adds	r3, #5
 800484e:	d111      	bne.n	8004874 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004850:	4b7d      	ldr	r3, [pc, #500]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004854:	4b7c      	ldr	r3, [pc, #496]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004856:	2104      	movs	r1, #4
 8004858:	438a      	bics	r2, r1
 800485a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800485c:	4b7a      	ldr	r3, [pc, #488]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	22f8      	movs	r2, #248	; 0xf8
 8004862:	4393      	bics	r3, r2
 8004864:	0019      	movs	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	00da      	lsls	r2, r3, #3
 800486c:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800486e:	430a      	orrs	r2, r1
 8004870:	635a      	str	r2, [r3, #52]	; 0x34
 8004872:	e01e      	b.n	80048b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004874:	4b74      	ldr	r3, [pc, #464]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004878:	4b73      	ldr	r3, [pc, #460]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800487a:	2104      	movs	r1, #4
 800487c:	430a      	orrs	r2, r1
 800487e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004880:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004884:	4b70      	ldr	r3, [pc, #448]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004886:	2101      	movs	r1, #1
 8004888:	438a      	bics	r2, r1
 800488a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488c:	f7ff fb1c 	bl	8003ec8 <HAL_GetTick>
 8004890:	0003      	movs	r3, r0
 8004892:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004896:	f7ff fb17 	bl	8003ec8 <HAL_GetTick>
 800489a:	0002      	movs	r2, r0
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e111      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048a8:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	2202      	movs	r2, #2
 80048ae:	4013      	ands	r3, r2
 80048b0:	d1f1      	bne.n	8004896 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2220      	movs	r2, #32
 80048b8:	4013      	ands	r3, r2
 80048ba:	d05c      	beq.n	8004976 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80048bc:	4b62      	ldr	r3, [pc, #392]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	220c      	movs	r2, #12
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	d00e      	beq.n	80048e6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80048c8:	4b5f      	ldr	r3, [pc, #380]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	220c      	movs	r2, #12
 80048ce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d114      	bne.n	80048fe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80048d4:	4b5c      	ldr	r3, [pc, #368]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	23c0      	movs	r3, #192	; 0xc0
 80048da:	025b      	lsls	r3, r3, #9
 80048dc:	401a      	ands	r2, r3
 80048de:	23c0      	movs	r3, #192	; 0xc0
 80048e0:	025b      	lsls	r3, r3, #9
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d10b      	bne.n	80048fe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80048e6:	4b58      	ldr	r3, [pc, #352]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80048e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	029b      	lsls	r3, r3, #10
 80048ee:	4013      	ands	r3, r2
 80048f0:	d040      	beq.n	8004974 <HAL_RCC_OscConfig+0x5a8>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d03c      	beq.n	8004974 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e0e6      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01b      	beq.n	800493e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004906:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490a:	4b4f      	ldr	r3, [pc, #316]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800490c:	2180      	movs	r1, #128	; 0x80
 800490e:	0249      	lsls	r1, r1, #9
 8004910:	430a      	orrs	r2, r1
 8004912:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7ff fad8 	bl	8003ec8 <HAL_GetTick>
 8004918:	0003      	movs	r3, r0
 800491a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800491e:	f7ff fad3 	bl	8003ec8 <HAL_GetTick>
 8004922:	0002      	movs	r2, r0
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e0cd      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004930:	4b45      	ldr	r3, [pc, #276]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	029b      	lsls	r3, r3, #10
 8004938:	4013      	ands	r3, r2
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x552>
 800493c:	e01b      	b.n	8004976 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800493e:	4b42      	ldr	r3, [pc, #264]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004944:	4943      	ldr	r1, [pc, #268]	; (8004a54 <HAL_RCC_OscConfig+0x688>)
 8004946:	400a      	ands	r2, r1
 8004948:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7ff fabd 	bl	8003ec8 <HAL_GetTick>
 800494e:	0003      	movs	r3, r0
 8004950:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004954:	f7ff fab8 	bl	8003ec8 <HAL_GetTick>
 8004958:	0002      	movs	r2, r0
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0b2      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004966:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	029b      	lsls	r3, r3, #10
 800496e:	4013      	ands	r3, r2
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x588>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004974:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b00      	cmp	r3, #0
 800497c:	d100      	bne.n	8004980 <HAL_RCC_OscConfig+0x5b4>
 800497e:	e0a4      	b.n	8004aca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004980:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	220c      	movs	r2, #12
 8004986:	4013      	ands	r3, r2
 8004988:	2b08      	cmp	r3, #8
 800498a:	d100      	bne.n	800498e <HAL_RCC_OscConfig+0x5c2>
 800498c:	e078      	b.n	8004a80 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2b02      	cmp	r3, #2
 8004994:	d14c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 800499c:	492e      	ldr	r1, [pc, #184]	; (8004a58 <HAL_RCC_OscConfig+0x68c>)
 800499e:	400a      	ands	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a2:	f7ff fa91 	bl	8003ec8 <HAL_GetTick>
 80049a6:	0003      	movs	r3, r0
 80049a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ac:	f7ff fa8c 	bl	8003ec8 <HAL_GetTick>
 80049b0:	0002      	movs	r2, r0
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e086      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049be:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	049b      	lsls	r3, r3, #18
 80049c6:	4013      	ands	r3, r2
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ca:	4b1f      	ldr	r3, [pc, #124]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	220f      	movs	r2, #15
 80049d0:	4393      	bics	r3, r2
 80049d2:	0019      	movs	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80049da:	430a      	orrs	r2, r1
 80049dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <HAL_RCC_OscConfig+0x690>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	0019      	movs	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	431a      	orrs	r2, r3
 80049f2:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f8:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 80049fe:	2180      	movs	r1, #128	; 0x80
 8004a00:	0449      	lsls	r1, r1, #17
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7ff fa5f 	bl	8003ec8 <HAL_GetTick>
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a10:	f7ff fa5a 	bl	8003ec8 <HAL_GetTick>
 8004a14:	0002      	movs	r2, r0
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e054      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	049b      	lsls	r3, r3, #18
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x644>
 8004a2e:	e04c      	b.n	8004aca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <HAL_RCC_OscConfig+0x67c>)
 8004a36:	4908      	ldr	r1, [pc, #32]	; (8004a58 <HAL_RCC_OscConfig+0x68c>)
 8004a38:	400a      	ands	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7ff fa44 	bl	8003ec8 <HAL_GetTick>
 8004a40:	0003      	movs	r3, r0
 8004a42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a44:	e015      	b.n	8004a72 <HAL_RCC_OscConfig+0x6a6>
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	00001388 	.word	0x00001388
 8004a50:	efffffff 	.word	0xefffffff
 8004a54:	fffeffff 	.word	0xfffeffff
 8004a58:	feffffff 	.word	0xfeffffff
 8004a5c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a60:	f7ff fa32 	bl	8003ec8 <HAL_GetTick>
 8004a64:	0002      	movs	r2, r0
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e02c      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a72:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <HAL_RCC_OscConfig+0x708>)
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	049b      	lsls	r3, r3, #18
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x694>
 8004a7e:	e024      	b.n	8004aca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e01f      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004a8c:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <HAL_RCC_OscConfig+0x708>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <HAL_RCC_OscConfig+0x708>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	23c0      	movs	r3, #192	; 0xc0
 8004a9c:	025b      	lsls	r3, r3, #9
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d10e      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	220f      	movs	r2, #15
 8004aac:	401a      	ands	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	23f0      	movs	r3, #240	; 0xf0
 8004aba:	039b      	lsls	r3, r3, #14
 8004abc:	401a      	ands	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	0018      	movs	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	b008      	add	sp, #32
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000

08004ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0bf      	b.n	8004c6c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aec:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <HAL_RCC_ClockConfig+0x19c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	4013      	ands	r3, r2
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d911      	bls.n	8004b1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afa:	4b5e      	ldr	r3, [pc, #376]	; (8004c74 <HAL_RCC_ClockConfig+0x19c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2201      	movs	r2, #1
 8004b00:	4393      	bics	r3, r2
 8004b02:	0019      	movs	r1, r3
 8004b04:	4b5b      	ldr	r3, [pc, #364]	; (8004c74 <HAL_RCC_ClockConfig+0x19c>)
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0c:	4b59      	ldr	r3, [pc, #356]	; (8004c74 <HAL_RCC_ClockConfig+0x19c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	4013      	ands	r3, r2
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d001      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0a6      	b.n	8004c6c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2202      	movs	r2, #2
 8004b24:	4013      	ands	r3, r2
 8004b26:	d015      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d006      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b32:	4b51      	ldr	r3, [pc, #324]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	4b50      	ldr	r3, [pc, #320]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004b38:	21e0      	movs	r1, #224	; 0xe0
 8004b3a:	00c9      	lsls	r1, r1, #3
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b4d      	ldr	r3, [pc, #308]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	22f0      	movs	r2, #240	; 0xf0
 8004b46:	4393      	bics	r3, r2
 8004b48:	0019      	movs	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	4b4a      	ldr	r3, [pc, #296]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d04c      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b66:	4b44      	ldr	r3, [pc, #272]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d120      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e07a      	b.n	8004c6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7e:	4b3e      	ldr	r3, [pc, #248]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	049b      	lsls	r3, r3, #18
 8004b86:	4013      	ands	r3, r2
 8004b88:	d114      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06e      	b.n	8004c6c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b96:	4b38      	ldr	r3, [pc, #224]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	029b      	lsls	r3, r3, #10
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e062      	b.n	8004c6c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba6:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2202      	movs	r2, #2
 8004bac:	4013      	ands	r3, r2
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e05b      	b.n	8004c6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb4:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	4393      	bics	r3, r2
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc8:	f7ff f97e 	bl	8003ec8 <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd0:	e009      	b.n	8004be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd2:	f7ff f979 	bl	8003ec8 <HAL_GetTick>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	4a27      	ldr	r2, [pc, #156]	; (8004c7c <HAL_RCC_ClockConfig+0x1a4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e042      	b.n	8004c6c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	220c      	movs	r2, #12
 8004bec:	401a      	ands	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d1ec      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <HAL_RCC_ClockConfig+0x19c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4013      	ands	r3, r2
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d211      	bcs.n	8004c2a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_RCC_ClockConfig+0x19c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	4393      	bics	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <HAL_RCC_ClockConfig+0x19c>)
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c18:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <HAL_RCC_ClockConfig+0x19c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4013      	ands	r3, r2
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d001      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e020      	b.n	8004c6c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2204      	movs	r2, #4
 8004c30:	4013      	ands	r3, r2
 8004c32:	d009      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c34:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <HAL_RCC_ClockConfig+0x1a8>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c48:	f000 f820 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c4c:	0001      	movs	r1, r0
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <HAL_RCC_ClockConfig+0x1a0>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	220f      	movs	r2, #15
 8004c56:	4013      	ands	r3, r2
 8004c58:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <HAL_RCC_ClockConfig+0x1ac>)
 8004c5a:	5cd3      	ldrb	r3, [r2, r3]
 8004c5c:	000a      	movs	r2, r1
 8004c5e:	40da      	lsrs	r2, r3
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <HAL_RCC_ClockConfig+0x1b0>)
 8004c62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c64:	2003      	movs	r0, #3
 8004c66:	f7ff f8e9 	bl	8003e3c <HAL_InitTick>
  
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b004      	add	sp, #16
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40022000 	.word	0x40022000
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	00001388 	.word	0x00001388
 8004c80:	fffff8ff 	.word	0xfffff8ff
 8004c84:	08005b90 	.word	0x08005b90
 8004c88:	20000000 	.word	0x20000000

08004c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004ca6:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	220c      	movs	r2, #12
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d046      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0xb8>
 8004cb6:	d848      	bhi.n	8004d4a <HAL_RCC_GetSysClockFreq+0xbe>
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d002      	beq.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x36>
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d003      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x3c>
 8004cc0:	e043      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cc2:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004cc4:	613b      	str	r3, [r7, #16]
      break;
 8004cc6:	e043      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	0c9b      	lsrs	r3, r3, #18
 8004ccc:	220f      	movs	r2, #15
 8004cce:	4013      	ands	r3, r2
 8004cd0:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004cd2:	5cd3      	ldrb	r3, [r2, r3]
 8004cd4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004cd6:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	220f      	movs	r2, #15
 8004cdc:	4013      	ands	r3, r2
 8004cde:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004ce0:	5cd3      	ldrb	r3, [r2, r3]
 8004ce2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	23c0      	movs	r3, #192	; 0xc0
 8004ce8:	025b      	lsls	r3, r3, #9
 8004cea:	401a      	ands	r2, r3
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	025b      	lsls	r3, r3, #9
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d109      	bne.n	8004d08 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	481a      	ldr	r0, [pc, #104]	; (8004d60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004cf8:	f7fb fa06 	bl	8000108 <__udivsi3>
 8004cfc:	0003      	movs	r3, r0
 8004cfe:	001a      	movs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4353      	muls	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	e01a      	b.n	8004d3e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	23c0      	movs	r3, #192	; 0xc0
 8004d0c:	025b      	lsls	r3, r3, #9
 8004d0e:	401a      	ands	r2, r3
 8004d10:	23c0      	movs	r3, #192	; 0xc0
 8004d12:	025b      	lsls	r3, r3, #9
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d109      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	4814      	ldr	r0, [pc, #80]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xe0>)
 8004d1c:	f7fb f9f4 	bl	8000108 <__udivsi3>
 8004d20:	0003      	movs	r3, r0
 8004d22:	001a      	movs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4353      	muls	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	480c      	ldr	r0, [pc, #48]	; (8004d60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d30:	f7fb f9ea 	bl	8000108 <__udivsi3>
 8004d34:	0003      	movs	r3, r0
 8004d36:	001a      	movs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4353      	muls	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	613b      	str	r3, [r7, #16]
      break;
 8004d42:	e005      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004d44:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xe0>)
 8004d46:	613b      	str	r3, [r7, #16]
      break;
 8004d48:	e002      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d4c:	613b      	str	r3, [r7, #16]
      break;
 8004d4e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004d50:	693b      	ldr	r3, [r7, #16]
}
 8004d52:	0018      	movs	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b006      	add	sp, #24
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	007a1200 	.word	0x007a1200
 8004d64:	08005ba8 	.word	0x08005ba8
 8004d68:	08005bb8 	.word	0x08005bb8
 8004d6c:	02dc6c00 	.word	0x02dc6c00

08004d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b02      	ldr	r3, [pc, #8]	; (8004d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	0018      	movs	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	20000000 	.word	0x20000000

08004d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004d88:	f7ff fff2 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004d8c:	0001      	movs	r1, r0
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	2207      	movs	r2, #7
 8004d96:	4013      	ands	r3, r2
 8004d98:	4a04      	ldr	r2, [pc, #16]	; (8004dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d9a:	5cd3      	ldrb	r3, [r2, r3]
 8004d9c:	40d9      	lsrs	r1, r3
 8004d9e:	000b      	movs	r3, r1
}    
 8004da0:	0018      	movs	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	40021000 	.word	0x40021000
 8004dac:	08005ba0 	.word	0x08005ba0

08004db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	025b      	lsls	r3, r3, #9
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d100      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004dcc:	e08e      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004dce:	2017      	movs	r0, #23
 8004dd0:	183b      	adds	r3, r7, r0
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd6:	4b67      	ldr	r3, [pc, #412]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	055b      	lsls	r3, r3, #21
 8004dde:	4013      	ands	r3, r2
 8004de0:	d110      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004de2:	4b64      	ldr	r3, [pc, #400]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	4b63      	ldr	r3, [pc, #396]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004de8:	2180      	movs	r1, #128	; 0x80
 8004dea:	0549      	lsls	r1, r1, #21
 8004dec:	430a      	orrs	r2, r1
 8004dee:	61da      	str	r2, [r3, #28]
 8004df0:	4b60      	ldr	r3, [pc, #384]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	055b      	lsls	r3, r3, #21
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfe:	183b      	adds	r3, r7, r0
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e04:	4b5c      	ldr	r3, [pc, #368]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d11a      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b58      	ldr	r3, [pc, #352]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004e16:	2180      	movs	r1, #128	; 0x80
 8004e18:	0049      	lsls	r1, r1, #1
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1e:	f7ff f853 	bl	8003ec8 <HAL_GetTick>
 8004e22:	0003      	movs	r3, r0
 8004e24:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e26:	e008      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e28:	f7ff f84e 	bl	8003ec8 <HAL_GetTick>
 8004e2c:	0002      	movs	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e097      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3a:	4b4f      	ldr	r3, [pc, #316]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4013      	ands	r3, r2
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e46:	4b4b      	ldr	r3, [pc, #300]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	23c0      	movs	r3, #192	; 0xc0
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4013      	ands	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d034      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	23c0      	movs	r3, #192	; 0xc0
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4013      	ands	r3, r2
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d02c      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e68:	4b42      	ldr	r3, [pc, #264]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	4a43      	ldr	r2, [pc, #268]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e72:	4b40      	ldr	r3, [pc, #256]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004e74:	6a1a      	ldr	r2, [r3, #32]
 8004e76:	4b3f      	ldr	r3, [pc, #252]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004e78:	2180      	movs	r1, #128	; 0x80
 8004e7a:	0249      	lsls	r1, r1, #9
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e80:	4b3c      	ldr	r3, [pc, #240]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	4b3b      	ldr	r3, [pc, #236]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004e86:	493e      	ldr	r1, [pc, #248]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e88:	400a      	ands	r2, r1
 8004e8a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e8c:	4b39      	ldr	r3, [pc, #228]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	4013      	ands	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9a:	f7ff f815 	bl	8003ec8 <HAL_GetTick>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea2:	e009      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea4:	f7ff f810 	bl	8003ec8 <HAL_GetTick>
 8004ea8:	0002      	movs	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	4a35      	ldr	r2, [pc, #212]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e058      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb8:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	4a2d      	ldr	r2, [pc, #180]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4b28      	ldr	r3, [pc, #160]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ed6:	2317      	movs	r3, #23
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee0:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ee6:	4928      	ldr	r1, [pc, #160]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ee8:	400a      	ands	r2, r1
 8004eea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ef6:	4b1f      	ldr	r3, [pc, #124]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	2203      	movs	r2, #3
 8004efc:	4393      	bics	r3, r2
 8004efe:	0019      	movs	r1, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f06:	430a      	orrs	r2, r1
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	4013      	ands	r3, r2
 8004f12:	d009      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	2210      	movs	r2, #16
 8004f1a:	4393      	bics	r3, r2
 8004f1c:	0019      	movs	r1, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f24:	430a      	orrs	r2, r1
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	029b      	lsls	r3, r3, #10
 8004f30:	4013      	ands	r3, r2
 8004f32:	d009      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f34:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	2280      	movs	r2, #128	; 0x80
 8004f3a:	4393      	bics	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f44:	430a      	orrs	r2, r1
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4013      	ands	r3, r2
 8004f52:	d009      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f54:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	2240      	movs	r2, #64	; 0x40
 8004f5a:	4393      	bics	r3, r2
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f64:	430a      	orrs	r2, r1
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b006      	add	sp, #24
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40007000 	.word	0x40007000
 8004f7c:	fffffcff 	.word	0xfffffcff
 8004f80:	fffeffff 	.word	0xfffeffff
 8004f84:	00001388 	.word	0x00001388
 8004f88:	efffffff 	.word	0xefffffff

08004f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e044      	b.n	8005028 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d107      	bne.n	8004fb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2278      	movs	r2, #120	; 0x78
 8004faa:	2100      	movs	r1, #0
 8004fac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7fe fe6f 	bl	8003c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2224      	movs	r2, #36	; 0x24
 8004fba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	438a      	bics	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 f8d0 	bl	8005174 <UART_SetConfig>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e024      	b.n	8005028 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f000 fa03 	bl	80053f4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	490d      	ldr	r1, [pc, #52]	; (8005030 <HAL_UART_Init+0xa4>)
 8004ffa:	400a      	ands	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	212a      	movs	r1, #42	; 0x2a
 800500a:	438a      	bics	r2, r1
 800500c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2101      	movs	r1, #1
 800501a:	430a      	orrs	r2, r1
 800501c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	0018      	movs	r0, r3
 8005022:	f000 fa9b 	bl	800555c <UART_CheckIdleState>
 8005026:	0003      	movs	r3, r0
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b002      	add	sp, #8
 800502e:	bd80      	pop	{r7, pc}
 8005030:	ffffb7ff 	.word	0xffffb7ff

08005034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	1dbb      	adds	r3, r7, #6
 8005042:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005048:	2b20      	cmp	r3, #32
 800504a:	d000      	beq.n	800504e <HAL_UART_Transmit+0x1a>
 800504c:	e08d      	b.n	800516a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_UART_Transmit+0x28>
 8005054:	1dbb      	adds	r3, r7, #6
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e085      	b.n	800516c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	2380      	movs	r3, #128	; 0x80
 8005066:	015b      	lsls	r3, r3, #5
 8005068:	429a      	cmp	r2, r3
 800506a:	d109      	bne.n	8005080 <HAL_UART_Transmit+0x4c>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2201      	movs	r2, #1
 8005078:	4013      	ands	r3, r2
 800507a:	d001      	beq.n	8005080 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e075      	b.n	800516c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2284      	movs	r2, #132	; 0x84
 8005084:	2100      	movs	r1, #0
 8005086:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2221      	movs	r2, #33	; 0x21
 800508c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800508e:	f7fe ff1b 	bl	8003ec8 <HAL_GetTick>
 8005092:	0003      	movs	r3, r0
 8005094:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1dba      	adds	r2, r7, #6
 800509a:	2150      	movs	r1, #80	; 0x50
 800509c:	8812      	ldrh	r2, [r2, #0]
 800509e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1dba      	adds	r2, r7, #6
 80050a4:	2152      	movs	r1, #82	; 0x52
 80050a6:	8812      	ldrh	r2, [r2, #0]
 80050a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	015b      	lsls	r3, r3, #5
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d108      	bne.n	80050c8 <HAL_UART_Transmit+0x94>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e003      	b.n	80050d0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050d0:	e030      	b.n	8005134 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	0013      	movs	r3, r2
 80050dc:	2200      	movs	r2, #0
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	f000 fae4 	bl	80056ac <UART_WaitOnFlagUntilTimeout>
 80050e4:	1e03      	subs	r3, r0, #0
 80050e6:	d004      	beq.n	80050f2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e03c      	b.n	800516c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	881a      	ldrh	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	05d2      	lsls	r2, r2, #23
 8005102:	0dd2      	lsrs	r2, r2, #23
 8005104:	b292      	uxth	r2, r2
 8005106:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	3302      	adds	r3, #2
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	e008      	b.n	8005122 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	781a      	ldrb	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	b292      	uxth	r2, r2
 800511a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2252      	movs	r2, #82	; 0x52
 8005126:	5a9b      	ldrh	r3, [r3, r2]
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b299      	uxth	r1, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2252      	movs	r2, #82	; 0x52
 8005132:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2252      	movs	r2, #82	; 0x52
 8005138:	5a9b      	ldrh	r3, [r3, r2]
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1c8      	bne.n	80050d2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	0013      	movs	r3, r2
 800514a:	2200      	movs	r2, #0
 800514c:	2140      	movs	r1, #64	; 0x40
 800514e:	f000 faad 	bl	80056ac <UART_WaitOnFlagUntilTimeout>
 8005152:	1e03      	subs	r3, r0, #0
 8005154:	d004      	beq.n	8005160 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e005      	b.n	800516c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800516a:	2302      	movs	r3, #2
  }
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b008      	add	sp, #32
 8005172:	bd80      	pop	{r7, pc}

08005174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800517c:	231e      	movs	r3, #30
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a8d      	ldr	r2, [pc, #564]	; (80053d8 <UART_SetConfig+0x264>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	0019      	movs	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4a88      	ldr	r2, [pc, #544]	; (80053dc <UART_SetConfig+0x268>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	0019      	movs	r1, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4a7f      	ldr	r2, [pc, #508]	; (80053e0 <UART_SetConfig+0x26c>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	0019      	movs	r1, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a7b      	ldr	r2, [pc, #492]	; (80053e4 <UART_SetConfig+0x270>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d127      	bne.n	800524a <UART_SetConfig+0xd6>
 80051fa:	4b7b      	ldr	r3, [pc, #492]	; (80053e8 <UART_SetConfig+0x274>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	2203      	movs	r2, #3
 8005200:	4013      	ands	r3, r2
 8005202:	2b03      	cmp	r3, #3
 8005204:	d00d      	beq.n	8005222 <UART_SetConfig+0xae>
 8005206:	d81b      	bhi.n	8005240 <UART_SetConfig+0xcc>
 8005208:	2b02      	cmp	r3, #2
 800520a:	d014      	beq.n	8005236 <UART_SetConfig+0xc2>
 800520c:	d818      	bhi.n	8005240 <UART_SetConfig+0xcc>
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <UART_SetConfig+0xa4>
 8005212:	2b01      	cmp	r3, #1
 8005214:	d00a      	beq.n	800522c <UART_SetConfig+0xb8>
 8005216:	e013      	b.n	8005240 <UART_SetConfig+0xcc>
 8005218:	231f      	movs	r3, #31
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e021      	b.n	8005266 <UART_SetConfig+0xf2>
 8005222:	231f      	movs	r3, #31
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	2202      	movs	r2, #2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e01c      	b.n	8005266 <UART_SetConfig+0xf2>
 800522c:	231f      	movs	r3, #31
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	2204      	movs	r2, #4
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e017      	b.n	8005266 <UART_SetConfig+0xf2>
 8005236:	231f      	movs	r3, #31
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	2208      	movs	r2, #8
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	e012      	b.n	8005266 <UART_SetConfig+0xf2>
 8005240:	231f      	movs	r3, #31
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	2210      	movs	r2, #16
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e00d      	b.n	8005266 <UART_SetConfig+0xf2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a67      	ldr	r2, [pc, #412]	; (80053ec <UART_SetConfig+0x278>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d104      	bne.n	800525e <UART_SetConfig+0xea>
 8005254:	231f      	movs	r3, #31
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e003      	b.n	8005266 <UART_SetConfig+0xf2>
 800525e:	231f      	movs	r3, #31
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	2210      	movs	r2, #16
 8005264:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	429a      	cmp	r2, r3
 8005270:	d15c      	bne.n	800532c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8005272:	231f      	movs	r3, #31
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d015      	beq.n	80052a8 <UART_SetConfig+0x134>
 800527c:	dc18      	bgt.n	80052b0 <UART_SetConfig+0x13c>
 800527e:	2b04      	cmp	r3, #4
 8005280:	d00d      	beq.n	800529e <UART_SetConfig+0x12a>
 8005282:	dc15      	bgt.n	80052b0 <UART_SetConfig+0x13c>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <UART_SetConfig+0x11a>
 8005288:	2b02      	cmp	r3, #2
 800528a:	d005      	beq.n	8005298 <UART_SetConfig+0x124>
 800528c:	e010      	b.n	80052b0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800528e:	f7ff fd79 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8005292:	0003      	movs	r3, r0
 8005294:	61bb      	str	r3, [r7, #24]
        break;
 8005296:	e012      	b.n	80052be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005298:	4b55      	ldr	r3, [pc, #340]	; (80053f0 <UART_SetConfig+0x27c>)
 800529a:	61bb      	str	r3, [r7, #24]
        break;
 800529c:	e00f      	b.n	80052be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529e:	f7ff fcf5 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 80052a2:	0003      	movs	r3, r0
 80052a4:	61bb      	str	r3, [r7, #24]
        break;
 80052a6:	e00a      	b.n	80052be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	61bb      	str	r3, [r7, #24]
        break;
 80052ae:	e006      	b.n	80052be <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052b4:	231e      	movs	r3, #30
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	2201      	movs	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]
        break;
 80052bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d100      	bne.n	80052c6 <UART_SetConfig+0x152>
 80052c4:	e07a      	b.n	80053bc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	005a      	lsls	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	18d2      	adds	r2, r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	0019      	movs	r1, r3
 80052d8:	0010      	movs	r0, r2
 80052da:	f7fa ff15 	bl	8000108 <__udivsi3>
 80052de:	0003      	movs	r3, r0
 80052e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b0f      	cmp	r3, #15
 80052e6:	d91c      	bls.n	8005322 <UART_SetConfig+0x1ae>
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	025b      	lsls	r3, r3, #9
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d217      	bcs.n	8005322 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	200e      	movs	r0, #14
 80052f8:	183b      	adds	r3, r7, r0
 80052fa:	210f      	movs	r1, #15
 80052fc:	438a      	bics	r2, r1
 80052fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	b29b      	uxth	r3, r3
 8005306:	2207      	movs	r2, #7
 8005308:	4013      	ands	r3, r2
 800530a:	b299      	uxth	r1, r3
 800530c:	183b      	adds	r3, r7, r0
 800530e:	183a      	adds	r2, r7, r0
 8005310:	8812      	ldrh	r2, [r2, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	183a      	adds	r2, r7, r0
 800531c:	8812      	ldrh	r2, [r2, #0]
 800531e:	60da      	str	r2, [r3, #12]
 8005320:	e04c      	b.n	80053bc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005322:	231e      	movs	r3, #30
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	e047      	b.n	80053bc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800532c:	231f      	movs	r3, #31
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b08      	cmp	r3, #8
 8005334:	d015      	beq.n	8005362 <UART_SetConfig+0x1ee>
 8005336:	dc18      	bgt.n	800536a <UART_SetConfig+0x1f6>
 8005338:	2b04      	cmp	r3, #4
 800533a:	d00d      	beq.n	8005358 <UART_SetConfig+0x1e4>
 800533c:	dc15      	bgt.n	800536a <UART_SetConfig+0x1f6>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <UART_SetConfig+0x1d4>
 8005342:	2b02      	cmp	r3, #2
 8005344:	d005      	beq.n	8005352 <UART_SetConfig+0x1de>
 8005346:	e010      	b.n	800536a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7ff fd1c 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 800534c:	0003      	movs	r3, r0
 800534e:	61bb      	str	r3, [r7, #24]
        break;
 8005350:	e012      	b.n	8005378 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005352:	4b27      	ldr	r3, [pc, #156]	; (80053f0 <UART_SetConfig+0x27c>)
 8005354:	61bb      	str	r3, [r7, #24]
        break;
 8005356:	e00f      	b.n	8005378 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005358:	f7ff fc98 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 800535c:	0003      	movs	r3, r0
 800535e:	61bb      	str	r3, [r7, #24]
        break;
 8005360:	e00a      	b.n	8005378 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	61bb      	str	r3, [r7, #24]
        break;
 8005368:	e006      	b.n	8005378 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800536e:	231e      	movs	r3, #30
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	2201      	movs	r2, #1
 8005374:	701a      	strb	r2, [r3, #0]
        break;
 8005376:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01e      	beq.n	80053bc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	085a      	lsrs	r2, r3, #1
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	18d2      	adds	r2, r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	0019      	movs	r1, r3
 800538e:	0010      	movs	r0, r2
 8005390:	f7fa feba 	bl	8000108 <__udivsi3>
 8005394:	0003      	movs	r3, r0
 8005396:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b0f      	cmp	r3, #15
 800539c:	d90a      	bls.n	80053b4 <UART_SetConfig+0x240>
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	025b      	lsls	r3, r3, #9
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d205      	bcs.n	80053b4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	e003      	b.n	80053bc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80053b4:	231e      	movs	r3, #30
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053c8:	231e      	movs	r3, #30
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	781b      	ldrb	r3, [r3, #0]
}
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b008      	add	sp, #32
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	efff69f3 	.word	0xefff69f3
 80053dc:	ffffcfff 	.word	0xffffcfff
 80053e0:	fffff4ff 	.word	0xfffff4ff
 80053e4:	40013800 	.word	0x40013800
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40004400 	.word	0x40004400
 80053f0:	007a1200 	.word	0x007a1200

080053f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2201      	movs	r2, #1
 8005402:	4013      	ands	r3, r2
 8005404:	d00b      	beq.n	800541e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4a4a      	ldr	r2, [pc, #296]	; (8005538 <UART_AdvFeatureConfig+0x144>)
 800540e:	4013      	ands	r3, r2
 8005410:	0019      	movs	r1, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2202      	movs	r2, #2
 8005424:	4013      	ands	r3, r2
 8005426:	d00b      	beq.n	8005440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4a43      	ldr	r2, [pc, #268]	; (800553c <UART_AdvFeatureConfig+0x148>)
 8005430:	4013      	ands	r3, r2
 8005432:	0019      	movs	r1, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2204      	movs	r2, #4
 8005446:	4013      	ands	r3, r2
 8005448:	d00b      	beq.n	8005462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a3b      	ldr	r2, [pc, #236]	; (8005540 <UART_AdvFeatureConfig+0x14c>)
 8005452:	4013      	ands	r3, r2
 8005454:	0019      	movs	r1, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2208      	movs	r2, #8
 8005468:	4013      	ands	r3, r2
 800546a:	d00b      	beq.n	8005484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4a34      	ldr	r2, [pc, #208]	; (8005544 <UART_AdvFeatureConfig+0x150>)
 8005474:	4013      	ands	r3, r2
 8005476:	0019      	movs	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2210      	movs	r2, #16
 800548a:	4013      	ands	r3, r2
 800548c:	d00b      	beq.n	80054a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4a2c      	ldr	r2, [pc, #176]	; (8005548 <UART_AdvFeatureConfig+0x154>)
 8005496:	4013      	ands	r3, r2
 8005498:	0019      	movs	r1, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2220      	movs	r2, #32
 80054ac:	4013      	ands	r3, r2
 80054ae:	d00b      	beq.n	80054c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	4a25      	ldr	r2, [pc, #148]	; (800554c <UART_AdvFeatureConfig+0x158>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	0019      	movs	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	2240      	movs	r2, #64	; 0x40
 80054ce:	4013      	ands	r3, r2
 80054d0:	d01d      	beq.n	800550e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <UART_AdvFeatureConfig+0x15c>)
 80054da:	4013      	ands	r3, r2
 80054dc:	0019      	movs	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	035b      	lsls	r3, r3, #13
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d10b      	bne.n	800550e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4a15      	ldr	r2, [pc, #84]	; (8005554 <UART_AdvFeatureConfig+0x160>)
 80054fe:	4013      	ands	r3, r2
 8005500:	0019      	movs	r1, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2280      	movs	r2, #128	; 0x80
 8005514:	4013      	ands	r3, r2
 8005516:	d00b      	beq.n	8005530 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4a0e      	ldr	r2, [pc, #56]	; (8005558 <UART_AdvFeatureConfig+0x164>)
 8005520:	4013      	ands	r3, r2
 8005522:	0019      	movs	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
  }
}
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	b002      	add	sp, #8
 8005536:	bd80      	pop	{r7, pc}
 8005538:	fffdffff 	.word	0xfffdffff
 800553c:	fffeffff 	.word	0xfffeffff
 8005540:	fffbffff 	.word	0xfffbffff
 8005544:	ffff7fff 	.word	0xffff7fff
 8005548:	ffffefff 	.word	0xffffefff
 800554c:	ffffdfff 	.word	0xffffdfff
 8005550:	ffefffff 	.word	0xffefffff
 8005554:	ff9fffff 	.word	0xff9fffff
 8005558:	fff7ffff 	.word	0xfff7ffff

0800555c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b092      	sub	sp, #72	; 0x48
 8005560:	af02      	add	r7, sp, #8
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2284      	movs	r2, #132	; 0x84
 8005568:	2100      	movs	r1, #0
 800556a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800556c:	f7fe fcac 	bl	8003ec8 <HAL_GetTick>
 8005570:	0003      	movs	r3, r0
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2208      	movs	r2, #8
 800557c:	4013      	ands	r3, r2
 800557e:	2b08      	cmp	r3, #8
 8005580:	d12c      	bne.n	80055dc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005584:	2280      	movs	r2, #128	; 0x80
 8005586:	0391      	lsls	r1, r2, #14
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4a46      	ldr	r2, [pc, #280]	; (80056a4 <UART_CheckIdleState+0x148>)
 800558c:	9200      	str	r2, [sp, #0]
 800558e:	2200      	movs	r2, #0
 8005590:	f000 f88c 	bl	80056ac <UART_WaitOnFlagUntilTimeout>
 8005594:	1e03      	subs	r3, r0, #0
 8005596:	d021      	beq.n	80055dc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005598:	f3ef 8310 	mrs	r3, PRIMASK
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a2:	2301      	movs	r3, #1
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	f383 8810 	msr	PRIMASK, r3
}
 80055ac:	46c0      	nop			; (mov r8, r8)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2180      	movs	r1, #128	; 0x80
 80055ba:	438a      	bics	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	f383 8810 	msr	PRIMASK, r3
}
 80055c8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2278      	movs	r2, #120	; 0x78
 80055d4:	2100      	movs	r1, #0
 80055d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e05f      	b.n	800569c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2204      	movs	r2, #4
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d146      	bne.n	8005678 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	2280      	movs	r2, #128	; 0x80
 80055ee:	03d1      	lsls	r1, r2, #15
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <UART_CheckIdleState+0x148>)
 80055f4:	9200      	str	r2, [sp, #0]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f000 f858 	bl	80056ac <UART_WaitOnFlagUntilTimeout>
 80055fc:	1e03      	subs	r3, r0, #0
 80055fe:	d03b      	beq.n	8005678 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005600:	f3ef 8310 	mrs	r3, PRIMASK
 8005604:	60fb      	str	r3, [r7, #12]
  return(result);
 8005606:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
 800560a:	2301      	movs	r3, #1
 800560c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f383 8810 	msr	PRIMASK, r3
}
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4921      	ldr	r1, [pc, #132]	; (80056a8 <UART_CheckIdleState+0x14c>)
 8005622:	400a      	ands	r2, r1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005632:	f3ef 8310 	mrs	r3, PRIMASK
 8005636:	61bb      	str	r3, [r7, #24]
  return(result);
 8005638:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
 800563c:	2301      	movs	r3, #1
 800563e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f383 8810 	msr	PRIMASK, r3
}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2101      	movs	r1, #1
 8005654:	438a      	bics	r2, r1
 8005656:	609a      	str	r2, [r3, #8]
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	f383 8810 	msr	PRIMASK, r3
}
 8005662:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2280      	movs	r2, #128	; 0x80
 8005668:	2120      	movs	r1, #32
 800566a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2278      	movs	r2, #120	; 0x78
 8005670:	2100      	movs	r1, #0
 8005672:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e011      	b.n	800569c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2280      	movs	r2, #128	; 0x80
 8005682:	2120      	movs	r1, #32
 8005684:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2278      	movs	r2, #120	; 0x78
 8005696:	2100      	movs	r1, #0
 8005698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b010      	add	sp, #64	; 0x40
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	01ffffff 	.word	0x01ffffff
 80056a8:	fffffedf 	.word	0xfffffedf

080056ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	1dfb      	adds	r3, r7, #7
 80056ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056bc:	e04b      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	3301      	adds	r3, #1
 80056c2:	d048      	beq.n	8005756 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c4:	f7fe fc00 	bl	8003ec8 <HAL_GetTick>
 80056c8:	0002      	movs	r2, r0
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d302      	bcc.n	80056da <UART_WaitOnFlagUntilTimeout+0x2e>
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e04b      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2204      	movs	r2, #4
 80056e6:	4013      	ands	r3, r2
 80056e8:	d035      	beq.n	8005756 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	2208      	movs	r2, #8
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d111      	bne.n	800571c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2208      	movs	r2, #8
 80056fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	0018      	movs	r0, r3
 8005704:	f000 f83c 	bl	8005780 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2284      	movs	r2, #132	; 0x84
 800570c:	2108      	movs	r1, #8
 800570e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2278      	movs	r2, #120	; 0x78
 8005714:	2100      	movs	r1, #0
 8005716:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e02c      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69da      	ldr	r2, [r3, #28]
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	401a      	ands	r2, r3
 8005728:	2380      	movs	r3, #128	; 0x80
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	429a      	cmp	r2, r3
 800572e:	d112      	bne.n	8005756 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2280      	movs	r2, #128	; 0x80
 8005736:	0112      	lsls	r2, r2, #4
 8005738:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	0018      	movs	r0, r3
 800573e:	f000 f81f 	bl	8005780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2284      	movs	r2, #132	; 0x84
 8005746:	2120      	movs	r1, #32
 8005748:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2278      	movs	r2, #120	; 0x78
 800574e:	2100      	movs	r1, #0
 8005750:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e00f      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	425a      	negs	r2, r3
 8005766:	4153      	adcs	r3, r2
 8005768:	b2db      	uxtb	r3, r3
 800576a:	001a      	movs	r2, r3
 800576c:	1dfb      	adds	r3, r7, #7
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d0a4      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	0018      	movs	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	b004      	add	sp, #16
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08e      	sub	sp, #56	; 0x38
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005788:	f3ef 8310 	mrs	r3, PRIMASK
 800578c:	617b      	str	r3, [r7, #20]
  return(result);
 800578e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
 8005792:	2301      	movs	r3, #1
 8005794:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4926      	ldr	r1, [pc, #152]	; (8005844 <UART_EndRxTransfer+0xc4>)
 80057aa:	400a      	ands	r2, r1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	f383 8810 	msr	PRIMASK, r3
}
 80057b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ba:	f3ef 8310 	mrs	r3, PRIMASK
 80057be:	623b      	str	r3, [r7, #32]
  return(result);
 80057c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30
 80057c4:	2301      	movs	r3, #1
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	f383 8810 	msr	PRIMASK, r3
}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2101      	movs	r1, #1
 80057dc:	438a      	bics	r2, r1
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	f383 8810 	msr	PRIMASK, r3
}
 80057ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d118      	bne.n	8005826 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f4:	f3ef 8310 	mrs	r3, PRIMASK
 80057f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80057fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057fe:	2301      	movs	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f383 8810 	msr	PRIMASK, r3
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2110      	movs	r1, #16
 8005816:	438a      	bics	r2, r1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f383 8810 	msr	PRIMASK, r3
}
 8005824:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2280      	movs	r2, #128	; 0x80
 800582a:	2120      	movs	r1, #32
 800582c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	669a      	str	r2, [r3, #104]	; 0x68
}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	46bd      	mov	sp, r7
 800583e:	b00e      	add	sp, #56	; 0x38
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	fffffedf 	.word	0xfffffedf

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	2600      	movs	r6, #0
 800584c:	4d0c      	ldr	r5, [pc, #48]	; (8005880 <__libc_init_array+0x38>)
 800584e:	4c0d      	ldr	r4, [pc, #52]	; (8005884 <__libc_init_array+0x3c>)
 8005850:	1b64      	subs	r4, r4, r5
 8005852:	10a4      	asrs	r4, r4, #2
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	2600      	movs	r6, #0
 800585a:	f000 f821 	bl	80058a0 <_init>
 800585e:	4d0a      	ldr	r5, [pc, #40]	; (8005888 <__libc_init_array+0x40>)
 8005860:	4c0a      	ldr	r4, [pc, #40]	; (800588c <__libc_init_array+0x44>)
 8005862:	1b64      	subs	r4, r4, r5
 8005864:	10a4      	asrs	r4, r4, #2
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	00b3      	lsls	r3, r6, #2
 800586e:	58eb      	ldr	r3, [r5, r3]
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	00b3      	lsls	r3, r6, #2
 8005878:	58eb      	ldr	r3, [r5, r3]
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	08005bd0 	.word	0x08005bd0
 8005884:	08005bd0 	.word	0x08005bd0
 8005888:	08005bd0 	.word	0x08005bd0
 800588c:	08005bd4 	.word	0x08005bd4

08005890 <memset>:
 8005890:	0003      	movs	r3, r0
 8005892:	1882      	adds	r2, r0, r2
 8005894:	4293      	cmp	r3, r2
 8005896:	d100      	bne.n	800589a <memset+0xa>
 8005898:	4770      	bx	lr
 800589a:	7019      	strb	r1, [r3, #0]
 800589c:	3301      	adds	r3, #1
 800589e:	e7f9      	b.n	8005894 <memset+0x4>

080058a0 <_init>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr

080058ac <_fini>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr
